---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/user/alexist
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/user/alexist
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      X-Served-By:
      - ws236
      Vary:
      - Accept-Encoding
      - User-Agent
      - cookie
      Expires:
      - Fri, 12 Jul 2019 08:27:42 GMT
      Cache-Control:
      - max-age=0, no-cache, no-store
      Pragma:
      - no-cache
      Date:
      - Fri, 12 Jul 2019 08:27:42 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Set-Cookie:
      - csrftoken=zy9C5o3ERQXqsUAK4PnxhxXYlEXr8Ar2; expires=Fri, 10-Jul-2020 08:27:41
        GMT; Max-Age=31449600; Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=.eJwNy0sKwjAQANC7zNpASJuadu0N6kIQGfKZmEBtpZNoRby73T54X0BbS8LKtGKynGCAQNHWqcABmJjzMmMOO8dOeuOcEo11WrRdK4Uh44VSsemdjkcZ9H5o81MNFJC2J635QXNhGK7g1fslqB_PpzHUJC4Jlf_c4fb7AyQ2Kvk:1hlqu5:qypOAR4EIHC6S1QNDhEwF2v8bc0;
        Domain=.last.fm; expires=Sat, 11-Jul-2020 08:27:41 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        





<!doctype html>
<html
    lang="en"
    class="
        no-js
        playbar-masthead-release-shim
        youtube-provider-not-ready
    "
>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge"><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"UwYPV15QGwYFXFlXDgU="};window.NREUM||(NREUM={}),__nr_require=function(t,n,e){function r(e){if(!n[e]){var o=n[e]={exports:{}};t[e][0].call(o.exports,function(n){var o=t[e][1][n];return r(o||n)},o,o.exports)}return n[e].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<e.length;o++)r(e[o]);return r}({1:[function(t,n,e){function r(t){try{s.console&&console.log(t)}catch(n){}}var o,i=t("ee"),a=t(18),s={};try{o=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(s.console=!0,o.indexOf("dev")!==-1&&(s.dev=!0),o.indexOf("nr_dev")!==-1&&(s.nrDev=!0))}catch(c){}s.nrDev&&i.on("internal-error",function(t){r(t.stack)}),s.dev&&i.on("fn-err",function(t,n,e){r(e.stack)}),s.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(s,function(t,n){return t}).join(", ")))},{}],2:[function(t,n,e){function r(t,n,e,r,s){try{p?p-=1:o(s||new UncaughtException(t,n,e),!0)}catch(f){try{i("ierr",[f,c.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,n,e){this.message=t||"Uncaught error with no additional information",this.sourceURL=n,this.line=e}function o(t,n){var e=n?null:c.now();i("err",[t,e])}var i=t("handle"),a=t(19),s=t("ee"),c=t("loader"),f=t("gos"),u=window.onerror,d=!1,l="nr@seenError",p=0;c.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(h){"stack"in h&&(t(8),t(7),"addEventListener"in window&&t(5),c.xhrWrappable&&t(9),d=!0)}s.on("fn-start",function(t,n,e){d&&(p+=1)}),s.on("fn-err",function(t,n,e){d&&!e[l]&&(f(e,l,function(){return!0}),this.thrown=!0,o(e))}),s.on("fn-end",function(){d&&!this.thrown&&p>0&&(p-=1)}),s.on("internal-error",function(t){i("ierr",[t,c.now(),!0])})},{}],3:[function(t,n,e){t("loader").features.ins=!0},{}],4:[function(t,n,e){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var o=t("ee"),i=t("handle"),a=t(8),s=t(7),c="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",l="resource",p="-start",h="-end",m="fn"+p,w="fn"+h,v="bstTimer",y="pushState",g=t("loader");g.features.stn=!0,t(6);var x=NREUM.o.EV;o.on(m,function(t,n){var e=t[0];e instanceof x&&(this.bstStart=g.now())}),o.on(w,function(t,n){var e=t[0];e instanceof x&&i("bst",[e,n,this.bstStart,g.now()])}),a.on(m,function(t,n,e){this.bstStart=g.now(),this.bstType=e}),a.on(w,function(t,n){i(v,[n,this.bstStart,g.now(),this.bstType])}),s.on(m,function(){this.bstStart=g.now()}),s.on(w,function(t,n){i(v,[n,this.bstStart,g.now(),"requestAnimationFrame"])}),o.on(y+p,function(t){this.time=g.now(),this.startPath=location.pathname+location.hash}),o.on(y+h,function(t){i("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+c]?window.performance[f](u,function(t){i(d,[window.performance.getEntriesByType(l)]),window.performance["c"+c]()},!1):window.performance[f]("webkit"+u,function(t){i(d,[window.performance.getEntriesByType(l)]),window.performance["webkitC"+c]()},!1)),document[f]("scroll",r,{passive:!0}),document[f]("keypress",r,!1),document[f]("click",r,!1)}},{}],5:[function(t,n,e){function r(t){for(var n=t;n&&!n.hasOwnProperty(u);)n=Object.getPrototypeOf(n);n&&o(n)}function o(t){s.inPlace(t,[u,d],"-",i)}function i(t,n){return t[1]}var a=t("ee").get("events"),s=t(21)(a,!0),c=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";n.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(o(window),o(f.prototype)),a.on(u+"-start",function(t,n){var e=t[1],r=c(e,"nr@wrapped",function(){function t(){if("function"==typeof e.handleEvent)return e.handleEvent.apply(e,arguments)}var n={object:t,"function":e}[typeof e];return n?s(n,"fn-",null,n.name||"anonymous"):e});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],6:[function(t,n,e){var r=t("ee").get("history"),o=t(21)(r);n.exports=r,o.inPlace(window.history,["pushState","replaceState"],"-")},{}],7:[function(t,n,e){var r=t("ee").get("raf"),o=t(21)(r),i="equestAnimationFrame";n.exports=r,o.inPlace(window,["r"+i,"mozR"+i,"webkitR"+i,"msR"+i],"raf-"),r.on("raf-start",function(t){t[0]=o(t[0],"fn-")})},{}],8:[function(t,n,e){function r(t,n,e){t[0]=a(t[0],"fn-",null,e)}function o(t,n,e){this.method=e,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,e)}var i=t("ee").get("timer"),a=t(21)(i),s="setTimeout",c="setInterval",f="clearTimeout",u="-start",d="-";n.exports=i,a.inPlace(window,[s,"setImmediate"],s+d),a.inPlace(window,[c],c+d),a.inPlace(window,[f,"clearImmediate"],f+d),i.on(c+u,r),i.on(s+u,o)},{}],9:[function(t,n,e){function r(t,n){d.inPlace(n,["onreadystatechange"],"fn-",s)}function o(){var t=this,n=u.context(t);t.readyState>3&&!n.resolved&&(n.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,y,"fn-",s)}function i(t){g.push(t),h&&(b?b.then(a):w?w(a):(E=-E,R.data=E))}function a(){for(var t=0;t<g.length;t++)r([],g[t]);g.length&&(g=[])}function s(t,n){return n}function c(t,n){for(var e in t)n[e]=t[e];return n}t(5);var f=t("ee"),u=f.get("xhr"),d=t(21)(u),l=NREUM.o,p=l.XHR,h=l.MO,m=l.PR,w=l.SI,v="readystatechange",y=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],g=[];n.exports=u;var x=window.XMLHttpRequest=function(t){var n=new p(t);try{u.emit("new-xhr",[n],n),n.addEventListener(v,o,!1)}catch(e){try{u.emit("internal-error",[e])}catch(r){}}return n};if(c(p,x),x.prototype=p.prototype,d.inPlace(x.prototype,["open","send"],"-xhr-",s),u.on("send-xhr-start",function(t,n){r(t,n),i(n)}),u.on("open-xhr-start",r),h){var b=m&&m.resolve();if(!w&&!m){var E=1,R=document.createTextNode(E);new h(a).observe(R,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===v||a()})},{}],10:[function(t,n,e){function r(){var t=window.NREUM,n=t.info.accountID||null,e=t.info.agentID||null,r=t.info.trustKey||null,i="btoa"in window&&"function"==typeof window.btoa;if(!n||!e||!i)return null;var a={v:[0,1],d:{ty:"Browser",ac:n,ap:e,id:o.generateCatId(),tr:o.generateCatId(),ti:Date.now()}};return r&&n!==r&&(a.d.tk=r),btoa(JSON.stringify(a))}var o=t(16);n.exports={generateTraceHeader:r}},{}],11:[function(t,n,e){function r(t){var n=this.params,e=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<p;r++)t.removeEventListener(l[r],this.listener,!1);n.aborted||(e.duration=s.now()-this.startTime,this.loadCaptureCalled||4!==t.readyState?null==n.status&&(n.status=0):a(this,t),e.cbTime=this.cbTime,d.emit("xhr-done",[t],t),c("xhr",[n,e,this.startTime]))}}function o(t,n){var e=t.responseType;if("json"===e&&null!==n)return n;var r="arraybuffer"===e||"blob"===e||"json"===e?t.response:t.responseText;return w(r)}function i(t,n){var e=f(n),r=t.params;r.host=e.hostname+":"+e.port,r.pathname=e.pathname,t.sameOrigin=e.sameOrigin}function a(t,n){t.params.status=n.status;var e=o(n,t.lastSize);if(e&&(t.metrics.rxSize=e),t.sameOrigin){var r=n.getResponseHeader("X-NewRelic-App-Data");r&&(t.params.cat=r.split(", ").pop())}t.loadCaptureCalled=!0}var s=t("loader");if(s.xhrWrappable){var c=t("handle"),f=t(12),u=t(10).generateTraceHeader,d=t("ee"),l=["load","error","abort","timeout"],p=l.length,h=t("id"),m=t(15),w=t(14),v=window.XMLHttpRequest;s.features.xhr=!0,t(9),d.on("new-xhr",function(t){var n=this;n.totalCbs=0,n.called=0,n.cbTime=0,n.end=r,n.ended=!1,n.xhrGuids={},n.lastSize=null,n.loadCaptureCalled=!1,t.addEventListener("load",function(e){a(n,t)},!1),m&&(m>34||m<10)||window.opera||t.addEventListener("progress",function(t){n.lastSize=t.loaded},!1)}),d.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),d.on("open-xhr-end",function(t,n){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&n.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid);var e=!1;if("init"in NREUM&&"distributed_tracing"in NREUM.init&&(e=!!NREUM.init.distributed_tracing.enabled),e&&this.sameOrigin){var r=u();r&&n.setRequestHeader("newrelic",r)}}),d.on("send-xhr-start",function(t,n){var e=this.metrics,r=t[0],o=this;if(e&&r){var i=w(r);i&&(e.txSize=i)}this.startTime=s.now(),this.listener=function(t){try{"abort"!==t.type||o.loadCaptureCalled||(o.params.aborted=!0),("load"!==t.type||o.called===o.totalCbs&&(o.onloadCalled||"function"!=typeof n.onload))&&o.end(n)}catch(e){try{d.emit("internal-error",[e])}catch(r){}}};for(var a=0;a<p;a++)n.addEventListener(l[a],this.listener,!1)}),d.on("xhr-cb-time",function(t,n,e){this.cbTime+=t,n?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof e.onload||this.end(e)}),d.on("xhr-load-added",function(t,n){var e=""+h(t)+!!n;this.xhrGuids&&!this.xhrGuids[e]&&(this.xhrGuids[e]=!0,this.totalCbs+=1)}),d.on("xhr-load-removed",function(t,n){var e=""+h(t)+!!n;this.xhrGuids&&this.xhrGuids[e]&&(delete this.xhrGuids[e],this.totalCbs-=1)}),d.on("addEventListener-end",function(t,n){n instanceof v&&"load"===t[0]&&d.emit("xhr-load-added",[t[1],t[2]],n)}),d.on("removeEventListener-end",function(t,n){n instanceof v&&"load"===t[0]&&d.emit("xhr-load-removed",[t[1],t[2]],n)}),d.on("fn-start",function(t,n,e){n instanceof v&&("onload"===e&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=s.now()))}),d.on("fn-end",function(t,n){this.xhrCbStart&&d.emit("xhr-cb-time",[s.now()-this.xhrCbStart,this.onload,n],n)})}},{}],12:[function(t,n,e){n.exports=function(t){var n=document.createElement("a"),e=window.location,r={};n.href=t,r.port=n.port;var o=n.href.split("://");!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=n.hostname||e.hostname,r.pathname=n.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname);var i=!n.protocol||":"===n.protocol||n.protocol===e.protocol,a=n.hostname===document.domain&&n.port===e.port;return r.sameOrigin=i&&(!n.hostname||a),r}},{}],13:[function(t,n,e){function r(){}function o(t,n,e){return function(){return i(t,[f.now()].concat(s(arguments)),n?null:this,e),n?void 0:this}}var i=t("handle"),a=t(18),s=t(19),c=t("ee").get("tracer"),f=t("loader"),u=NREUM;"undefined"==typeof window.newrelic&&(newrelic=u);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],l="api-",p=l+"ixn-";a(d,function(t,n){u[n]=o(l+n,!0,"api")}),u.addPageAction=o(l+"addPageAction",!0),u.setCurrentRouteName=o(l+"routeName",!0),n.exports=newrelic,u.interaction=function(){return(new r).get()};var h=r.prototype={createTracer:function(t,n){var e={},r=this,o="function"==typeof n;return i(p+"tracer",[f.now(),t,e],r),function(){if(c.emit((o?"":"no-")+"fn-start",[f.now(),r,o],e),o)try{return n.apply(this,arguments)}catch(t){throw c.emit("fn-err",[arguments,this,t],e),t}finally{c.emit("fn-end",[f.now()],e)}}}};a("actionText,setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,n){h[n]=o(p+n)}),newrelic.noticeError=function(t,n){"string"==typeof t&&(t=new Error(t)),i("err",[t,f.now(),!1,n])}},{}],14:[function(t,n,e){n.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(n){return}}}},{}],15:[function(t,n,e){var r=0,o=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);o&&(r=+o[1]),n.exports=r},{}],16:[function(t,n,e){function r(){function t(){return n?15&n[e++]:16*Math.random()|0}var n=null,e=0,r=window.crypto||window.msCrypto;r&&r.getRandomValues&&(n=r.getRandomValues(new Uint8Array(31)));for(var o,i="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",a="",s=0;s<i.length;s++)o=i[s],"x"===o?a+=t().toString(16):"y"===o?(o=3&t()|8,a+=o.toString(16)):a+=o;return a}function o(){function t(){return n?15&n[e++]:16*Math.random()|0}var n=null,e=0,r=window.crypto||window.msCrypto;r&&r.getRandomValues&&Uint8Array&&(n=r.getRandomValues(new Uint8Array(31)));for(var o=[],i=0;i<16;i++)o.push(t().toString(16));return o.join("")}n.exports={generateUuid:r,generateCatId:o}},{}],17:[function(t,n,e){function r(t,n){if(!o)return!1;if(t!==o)return!1;if(!n)return!0;if(!i)return!1;for(var e=i.split("."),r=n.split("."),a=0;a<r.length;a++)if(r[a]!==e[a])return!1;return!0}var o=null,i=null,a=/Version\/(\S+)\s+Safari/;if(navigator.userAgent){var s=navigator.userAgent,c=s.match(a);c&&s.indexOf("Chrome")===-1&&s.indexOf("Chromium")===-1&&(o="Safari",i=c[1])}n.exports={agent:o,version:i,match:r}},{}],18:[function(t,n,e){function r(t,n){var e=[],r="",i=0;for(r in t)o.call(t,r)&&(e[i]=n(r,t[r]),i+=1);return e}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],19:[function(t,n,e){function r(t,n,e){n||(n=0),"undefined"==typeof e&&(e=t?t.length:0);for(var r=-1,o=e-n||0,i=Array(o<0?0:o);++r<o;)i[r]=t[n+r];return i}n.exports=r},{}],20:[function(t,n,e){n.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],21:[function(t,n,e){function r(t){return!(t&&t instanceof Function&&t.apply&&!t[a])}var o=t("ee"),i=t(19),a="nr@original",s=Object.prototype.hasOwnProperty,c=!1;n.exports=function(t,n){function e(t,n,e,o){function nrWrapper(){var r,a,s,c;try{a=this,r=i(arguments),s="function"==typeof e?e(r,a):e||{}}catch(f){l([f,"",[r,a,o],s])}u(n+"start",[r,a,o],s);try{return c=t.apply(a,r)}catch(d){throw u(n+"err",[r,a,d],s),d}finally{u(n+"end",[r,a,c],s)}}return r(t)?t:(n||(n=""),nrWrapper[a]=t,d(t,nrWrapper),nrWrapper)}function f(t,n,o,i){o||(o="");var a,s,c,f="-"===o.charAt(0);for(c=0;c<n.length;c++)s=n[c],a=t[s],r(a)||(t[s]=e(a,f?s+o:o,i,s))}function u(e,r,o){if(!c||n){var i=c;c=!0;try{t.emit(e,r,o,n)}catch(a){l([a,e,r,o])}c=i}}function d(t,n){if(Object.defineProperty&&Object.keys)try{var e=Object.keys(t);return e.forEach(function(e){Object.defineProperty(n,e,{get:function(){return t[e]},set:function(n){return t[e]=n,n}})}),n}catch(r){l([r])}for(var o in t)s.call(t,o)&&(n[o]=t[o]);return n}function l(n){try{t.emit("internal-error",n)}catch(e){}}return t||(t=o),e.inPlace=f,e.flag=a,e}},{}],ee:[function(t,n,e){function r(){}function o(t){function n(t){return t&&t instanceof r?t:t?c(t,s,i):i()}function e(e,r,o,i){if(!l.aborted||i){t&&t(e,r,o);for(var a=n(o),s=m(e),c=s.length,f=0;f<c;f++)s[f].apply(a,r);var d=u[g[e]];return d&&d.push([x,e,r,a]),a}}function p(t,n){y[t]=m(t).concat(n)}function h(t,n){var e=y[t];if(e)for(var r=0;r<e.length;r++)e[r]===n&&e.splice(r,1)}function m(t){return y[t]||[]}function w(t){return d[t]=d[t]||o(e)}function v(t,n){f(t,function(t,e){n=n||"feature",g[e]=n,n in u||(u[n]=[])})}var y={},g={},x={on:p,addEventListener:p,removeEventListener:h,emit:e,get:w,listeners:m,context:n,buffer:v,abort:a,aborted:!1};return x}function i(){return new r}function a(){(u.api||u.feature)&&(l.aborted=!0,u=l.backlog={})}var s="nr@context",c=t("gos"),f=t(18),u={},d={},l=n.exports=o();l.backlog=u},{}],gos:[function(t,n,e){function r(t,n,e){if(o.call(t,n))return t[n];var r=e();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,n,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[n]=r,r}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],handle:[function(t,n,e){function r(t,n,e,r){o.buffer([t],r),o.emit(t,n,e)}var o=t("ee").get("handle");n.exports=r,r.ee=o},{}],id:[function(t,n,e){function r(t){var n=typeof t;return!t||"object"!==n&&"function"!==n?-1:t===window?0:a(t,i,function(){return o++})}var o=1,i="nr@id",a=t("gos");n.exports=r},{}],loader:[function(t,n,e){function r(){if(!E++){var t=b.info=NREUM.info,n=p.getElementsByTagName("script")[0];if(setTimeout(u.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&n))return u.abort();f(g,function(n,e){t[n]||(t[n]=e)}),c("mark",["onload",a()+b.offset],null,"api");var e=p.createElement("script");e.src="https://"+t.agent,n.parentNode.insertBefore(e,n)}}function o(){"complete"===p.readyState&&i()}function i(){c("mark",["domContent",a()+b.offset],null,"api")}function a(){return R.exists&&performance.now?Math.round(performance.now()):(s=Math.max((new Date).getTime(),s))-b.offset}var s=(new Date).getTime(),c=t("handle"),f=t(18),u=t("ee"),d=t(17),l=window,p=l.document,h="addEventListener",m="attachEvent",w=l.XMLHttpRequest,v=w&&w.prototype;NREUM.o={ST:setTimeout,SI:l.setImmediate,CT:clearTimeout,XHR:w,REQ:l.Request,EV:l.Event,PR:l.Promise,MO:l.MutationObserver};var y=""+location,g={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1123.min.js"},x=w&&v&&v[h]&&!/CriOS/.test(navigator.userAgent),b=n.exports={offset:s,now:a,origin:y,features:{},xhrWrappable:x,userAgent:d};t(13),p[h]?(p[h]("DOMContentLoaded",i,!1),l[h]("load",r,!1)):(p[m]("onreadystatechange",o),l[m]("onload",r)),c("mark",["firstbyte",s],null,"api");var E=0,R=t(20)},{}]},{},["loader",2,11,4,3]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"0ed0ce50b0","applicationID":"5588594","transactionName":"Y1BRbUUFWkMEWxYMV1oadUxZB0BZClZNCV5ZG0RcVUpDRxIWAxVIRxtGSlIWGkYMXRUWFllUWlcNMUdVF3cUAEpCXFZOGQNRRA==","queueTime":0,"applicationTime":455,"agent":""}</script>
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title aria-live="assertive">AlexisT’s Music Profile | Last.fm</title>

        
    <link rel="canonical" href="https://www.last.fm/user/alexist" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="en" href="https://www.last.fm/user/alexist" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="de" href="https://www.last.fm/de/user/alexist" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="es" href="https://www.last.fm/es/user/alexist" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="fr" href="https://www.last.fm/fr/user/alexist" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="it" href="https://www.last.fm/it/user/alexist" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="ja" href="https://www.last.fm/ja/user/alexist" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="pl" href="https://www.last.fm/pl/user/alexist" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="pt" href="https://www.last.fm/pt/user/alexist" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="ru" href="https://www.last.fm/ru/user/alexist" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="sv" href="https://www.last.fm/sv/user/alexist" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="tr" href="https://www.last.fm/tr/user/alexist" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="zh" href="https://www.last.fm/zh/user/alexist" data-replaceable-head-tag />
    
    <link rel="alternate" hreflang="x-default" href="https://www.last.fm/user/alexist" data-replaceable-head-tag />


        
            
                
                
                
    <meta name="description" content="Listen to music from AlexisT’s library (1,505 tracks played). Get your own music profile at Last.fm, the world’s largest social music platform." data-replaceable-head-tag>

    <meta property="og:title"           content="AlexisT’s Music Profile | Last.fm" data-replaceable-head-tag>
    <meta property="og:description"     content="Listen to music from AlexisT’s library (1,505 tracks played). Get your own music profile at Last.fm, the world’s largest social music platform." data-replaceable-head-tag>
    <meta property="og:type"            content="website" data-replaceable-head-tag>
    <meta property="og:site_name"       content="Last.fm" data-replaceable-head-tag>
    <meta property="og:url"             content="https://www.last.fm/user/alexist" data-replaceable-head-tag />
    <meta property="og:image"           content="https://lastfm-img2.akamaized.net/i/u/ar0/abb1c2bf4242462ac6f99863367f8478.png" data-replaceable-head-tag>
    <meta property="og:image:width"     content="1200" data-replaceable-head-tag>
    <meta property="og:image:height"    content="630" data-replaceable-head-tag>
    <meta property="fb:app_id"          content="192959324047861" data-replaceable-head-tag />

    <meta name="twitter:title"          content="AlexisT’s Music Profile | Last.fm" data-replaceable-head-tag>
    <meta name="twitter:description"    content="Listen to music from AlexisT’s library (1,505 tracks played). Get your own music profile at Last.fm, the world’s largest social music platform." data-replaceable-head-tag>
    <meta name="twitter:image"          content="https://lastfm-img2.akamaized.net/i/u/ar0/abb1c2bf4242462ac6f99863367f8478.png" data-replaceable-head-tag>
    <meta name="twitter:card"           content="summary" data-replaceable-head-tag>
    <meta name="twitter:site"           content="@lastfm" data-replaceable-head-tag>

    

            
        

        

        <script>(function(e) { e.className = e.className.replace(/\bno-js\b/,'js'); })(document.documentElement)</script>

        

        
            
<script id="initial-tealium-data" data-tealium-data="{&#34;siteSection&#34;: &#34;user&#34;, &#34;pageType&#34;: &#34;user_door&#34;, &#34;pageName&#34;: &#34;user/overview&#34;, &#34;nativeEventTracking&#34;: true, &#34;userState&#34;: &#34;not authenticated&#34;, &#34;userType&#34;: &#34;anon&#34;, &#34;deviceType&#34;: &#34;desktop&#34;, &#34;ipGeo&#34;: &#34;NC&#34;, &#34;pageViewGuid&#34;: &#34;c7540b5b-00d3-48b0-9f82-91dfed7b6b69&#34;}"></script>
<script>
    var initialTealiumElement = document.getElementById('initial-tealium-data');
    window.utag_data = JSON.parse(initialTealiumElement.getAttribute('data-tealium-data'));
</script>

<script async src="https://tags.tiqcdn.com/utag/cbsi/lastfmsite/prod/utag.js"></script>
        

        <link rel="icon" href="/static/images/favicon.702b239b6194.ico">

        <link rel="stylesheet" href="/static/styles/build/6559f92cbe.6559f92cbede.css" data-stylesheet-name="defaults" charset="utf-8">

        
            <link rel="stylesheet" href="/static/styles/build/cd746db7a5.cd746db7a5cd.css" data-stylesheet-name="app" charset="utf-8">
        

        
    
        <link rel="stylesheet" href="/static/styles/build/2b569c1030.2b569c103054.css" charset="utf-8">
    


        
            
    
    
        <script async data-main="/static/js-build/init.659dac0e1a6b" src="/static/js-build/lib/require/require.53bc64c729e9.js"></script>
    

        

        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
    </head>
    <body
        class="
            
            anhv1
            namespace--user_overview
            
        "
        data-require="ads/page-ads,ads/searchlinks,player/playlink-handler,dev/grid-overlay,dev/toggle-version,dev/debug-log,dev/debug-image-analysis,dev/js-log,dev/ads-toggle,components/link-block,components/ajax-form,core/media-size-events-v2"
        data-player-supported="true"
        data-persistent-player-supported="true"
        data-country-code="NC"
        data-initial-view-guid="c7540b5b-00d3-48b0-9f82-91dfed7b6b69"
        data-cbsi-player-config="/static/config/video-player.9ae88a1373da.xml"
        data-sensitive-path-regex="^/(../)?(googlec3ea1b252774e1ab\.html|account_deleted|inbox|join|login|lostpassword(/confirm)?|staff|subscribe|support(?!/images|/shouts|/shout)|settings/(account|website|subscription|password|lostpassword)|user/.+?/support)(/.*)?/?$"
        data-facebook-app-id="192959324047861"
        data-facebook-placement-id="195612451022080_220502155199776"
        data-google-maps-api-key="AIzaSyBX6-IE3lz4PpJUSBVIo_dPb0BAyMgi-VE"
    >
        <div
            data-require="components/loading-indicator"
            data-loading-indicator-copy="Loading…"
        ></div>
        <div
            data-require="components/open-modal,components/submit-to-modal,components/show-alert"
            data-show-alert-ok-copy="Okay"
        ></div>
        

    
        <div class="top-bar">
            
                
                    
    <section
        data-require="player/controls,player/status,player/tracking"
        data-player-status-ad-playing="Ad playing"
        data-player-status-inactive="&nbsp;"
        data-player-status-loading-spotify="Connecting Spotify…"
        data-player-status-spotify-auth-error="Could not authenticate with Spotify."

        data-player-error-cannot-play-item="Cannot play that item."
        data-player-error-track-unavailable="Track unavailable."
        data-player-modal-title="Play video"

        

        class="
            player-bar
            inactive
        "
        aria-label="audio player"
        aria-disabled="true"
    >
        <div class="player-bar-inner-wrap">
            <a class="player-bar-artwork js-artwork">
                <img class="" src="/static/images/defaults/player_default_album.430223706b14.png" alt="" />
            </a>

            <span class="
                player-bar-source
                player-bar-source--spotify
            ">Playing via Spotify</span>

            <span class="
                player-bar-source
                player-bar-source--youtube
            ">Playing via YouTube</span>

            <div class="source-info">
                <button
                    class="player-bar-playback-options-button"
                    data-disclose-hover
                    aria-controls="player-bar-playback-options"
                >
                    Playback options
                </button>
                <div
                    id="player-bar-playback-options"
                    class="
                        player-bar-playback-options-wrap
                        disclose-hide
                    "
                >
                    <ul class="
                        dropdown-menu-dark
                        player-bar-playback-options-spotify
                    ">
                        <li class="dropdown-menu-non-interactive-item-dark">
                            <span class="player-bar-listening-on-heading">Listening on…</span>
                            <span class="
                                player-bar-listening-on
                                js-player-bar-listening-on
                            "></span>
                        </li>
                        <li><button class="
                            dropdown-menu-item-dark
                            js-switch-device
                            player-bar-playback-options-switch-device
                        ">Switch Spotify device</button></li>
                        <li><a
                            class="
                                js-source
                                dropdown-menu-item-dark
                                player-bar-playback-options-external-link
                            "
                            target="_blank"
                        >Open in Spotify Web Player</a></li>
                        
    <li class="menu-separator--dark">
        <a
            
                href="https://secure.last.fm/login?next=/settings/website"
            
            class="
                dropdown-menu-item-dark
                player-bar-playback-options-settings
            "
        >
            Change playback source
        </a>
    </li>

                    </ul>
                    <ul class="
                        dropdown-menu-dark
                        player-bar-playback-options-youtube
                    ">
                        <li><a
                            class="
                                dropdown-menu-item-dark
                                js-source
                                player-bar-playback-options-external-link
                            "
                            target="_blank"
                        >Open on YouTube website</a></li>
                        
    <li class="menu-separator--dark">
        <a
            
                href="https://secure.last.fm/login?next=/settings/website"
            
            class="
                dropdown-menu-item-dark
                player-bar-playback-options-settings
            "
        >
            Change playback source
        </a>
    </li>

                    </ul>
                </div>
            </div>

            

            <div class="player-bar-controls">

                <ul aria-label="controls" class="media-controls">
                    <li>
                        <button
                            disabled
                            class="
                                js-previous
                                player-bar-btn
                                player-bar-btn--previous
                            "
                            data-analytics-action="PlaybarBackTrack"
                        >
                            Previous
                        </button>
                    </li>
                    <li>
                        <button
                            disabled
                            class="
                                js-play-pause
                                player-bar-btn
                                player-bar-btn--play
                            "
                            data-string-pause="Pause"
                            data-analytics-action="PlaybarResumeTrack"
                            data-analytics-action-pause="PlaybarPauseTrack"
                        >
                            Play
                        </button>
                    </li>
                    <li>
                        <button
                            disabled
                            class="
                                js-next
                                player-bar-btn
                                player-bar-btn--next
                            "
                            data-analytics-action="PlaybarSkipTrack"
                        >
                            Next
                        </button>
                    </li>
                    
                </ul>

                <a class="
                        player-bar-skiplink
                        player-bar-skiplink--youtube
                    "
                    href="#youtube-video"
                >Skip to YouTube video</a>

            </div>

            <div class="player-bar-now-playing">
                <div class="player-bar-now-playing-inner-wrap">
                    <p
                        class="player-bar-track js-player-status"
                        aria-label="now playing"
                        aria-live="polite"
                        aria-atomic="true"
                    >
                        Loading player…
                    </p>

                    <p class="player-bar-error js-player-error player-bar-status--hide">
                        <span class="player-bar-error-message js-player-error-message"></span>
                    </p>
                </div>
            </div>
        </div>

        
        <div class="player-bar-progress-wrap">
            <div
                class="player-bar-progress"
                aria-label="progress"
                role="timer"
            >
                <div
                    class="
                        js-progress-slug
                        player-bar-progress-slug
                    "
                >
                    <span
                        class="
                            js-progress-remaining
                            player-bar-progress-remaining
                        "
                        aria-label="remaining"
                    ></span>
                </div>
            </div>
        </div>

        <div data-require="player/scrobble-client"></div>
    </section>

                    
    <div
        class="
            masthead-popup
            masthead-popup--spotify-scrobbling
            masthead-popup--hidden
        "
        data-require="components/spotify-scrobbling-prompt,components/alert-dismissable,components/spotify-scrobbling-banner"
        data-spotify-scobbling-success-modal="/socialmodal/spotify-scrobbling-success"
        data-spotify-scobbling-fail-modal="/socialmodal/spotify-scrobbling-fail"
    >
        <div class="masthead-popup-inner">
            <h3>Scrobble from Spotify?</h3>
            <p>Connect your Spotify account to your Last.fm account and scrobble everything you listen to, from any Spotify app on any device or platform.</p>
            <p>
                <a
                    class="btn-primary js-setup-spotify-scrobbling"
                    href="/settings/applications"
                >
                    Connect to Spotify
                </a>
            </p>
            <a
                href="/nagbar/dismiss/spotify-scrobbling-prompt?period=permanent"
                class="masthead-popup-close js-alert-dismissable-close"
                data-close-ajax
            >
                Dismiss
            </a>
        </div>
    </div>

                
            
        </div>
    

    <div id="content" class="main-content" role="main" aria-live="polite">
        
    

    <div id="tlmdata" hidden class="hidden"
         data-tealium-data='{&#34;siteSection&#34;: &#34;user&#34;, &#34;pageType&#34;: &#34;user_door&#34;, &#34;pageName&#34;: &#34;user/overview&#34;, &#34;nativeEventTracking&#34;: true, &#34;userState&#34;: &#34;not authenticated&#34;, &#34;userType&#34;: &#34;anon&#34;, &#34;deviceType&#34;: &#34;desktop&#34;, &#34;ipGeo&#34;: &#34;NC&#34;}'>
     </div>

        <div
            
                
            
            
            >
            
    <div
        data-require="components/disclose-base,components/disclose-autoclose-v2,components/disclose-dropdown-v2,components/disclose-dropdown-location-picker-v2,components/disclose-collapsing-nav-v2,components/disclose-artwork,components/disclose-remove,components/disclose-search,components/disclose-hover-v3,components/disclose-select,components/disclose-lazy-buylinks,components/focus-controls,components/prevent-resubmit-v2,components/edit-scrobble,components/toggle-buttons,components/click-proxy,components/bookmark-notification"
    ></div>

    
        

    <nav class="masthead"><div class="masthead-inner-wrap"><div class="masthead-logo"><span class="masthead-logo-loading"></span><a href="/"> Last.fm</a></div><a
        class="masthead-search-toggle" href="/search" data-disclose-search aria-controls="masthead-search">Search</a><form
        class=" masthead-search-form disclose-hide disclose-hide--js-only " id="masthead-search" action="/search" method="get"><div class="masthead-search-inner-wrap"><label for="masthead-search-field" class="sr-only">Search</label><input
                id="masthead-search-field" class="masthead-search-field" type="text" name="q" placeholder="Search for music…" /><button class="masthead-search-submit" type="submit">Search</button></div></form><div class="visible-xs"><button
                        class=" masthead-hamburger-toggle " data-disclose-autoclose aria-controls="masthead-nav">Toggle navigation</button><ul
                        class=" masthead-nav disclose-hide disclose-hide--js-only " aria-label="Primary navigation" id="masthead-nav"><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/dashboard" data-analytics-action="NavigationLink" data-analytics-label="live">Live</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/music" data-analytics-action="NavigationLink" data-analytics-label="music">Music</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/charts" data-analytics-action="NavigationLink" data-analytics-label="charts">Charts</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/events" data-analytics-action="NavigationLink" data-analytics-label="events">Events</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/features" data-analytics-action="NavigationLink" data-analytics-label="features">Features</a></li>
    
        
            <li class="masthead-nav-item">
                <a
                    class="masthead-nav-control"
                    href="/subscribe"
                    data-analytics-label="subscribe"
                    data-analytics-action="UserMenuClick"
                >Subscribe</a>
            </li>
        
        <li class="masthead-nav-item">
            <a
                class="masthead-nav-control"
                href="/join"
                data-analytics-action="SignUpClick"
            >Join</a>
        </li>
        <li class="masthead-nav-item">
            <a
                class="masthead-nav-control"
                href="https://secure.last.fm/login"
            >Login</a>
        </li>
    
</ul></div><div
                    class=" navlist navlist--more masthead-nav hidden-xs " data-require="components/primary-nav" data-more-string="More…"><ul
                        class="js-navlist-items navlist-items" aria-label="Primary navigation"><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/dashboard" data-analytics-action="NavigationLink" data-analytics-label="live">Live</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/music" data-analytics-action="NavigationLink" data-analytics-label="music">Music</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/charts" data-analytics-action="NavigationLink" data-analytics-label="charts">Charts</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/events" data-analytics-action="NavigationLink" data-analytics-label="events">Events</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/features" data-analytics-action="NavigationLink" data-analytics-label="features">Features</a></li></ul></div><ul
            class=" site-auth site-auth--anon hidden-xs ">
    <li class="site-auth-item"><a
                class="site-auth-control" href="/join" data-analytics-action="SignUpClick">Join</a></li><li class="site-auth-item"><a
                class="site-auth-control" href="https://secure.last.fm/login">Login</a></li>
</ul></div></nav>

    

    

    

    

    

    
    


    
    


    

    
    
    
    <div
        class="nag-bar nag-bar--plybar-masthead-release-warning"
        
        role="status"
    >
        <div class="container">
            
            <p class="nag-bar-message">
                
        
        A new version of Last.fm is available, to keep everything running smoothly, please <a href="javascript:window.location.reload()">reload</a> the site.
    
    
            </p>
        </div>
    </div>



    

    

    
    

    
        
    


    
    







    
    

    <header class="
        header
        
            header--with-avatar
        
        
            header--overview
        
        
            header--user
        
        
    ">
        
            <div class="header-background"></div>
        

        
    


        <div class="container">
            <div class="header-inner-wrap">
                
                    

    

    <div class="header-avatar">
        <div class="expand-image-show-on-focus header-avatar-inner-wrap">
            
                
                    
    
        
        <span
    
        class="
            avatar
            
        "
        
    >
        <img
            src="https://lastfm-img2.akamaized.net/i/u/avatar170s/abb1c2bf4242462ac6f99863367f8478.png"
            
                alt="Avatar for AlexisT"
            
            itemprop="image"
            
        >
        
    
        </span>
    
    

                
            
        </div>

        
    </div>

                
                <div class="header-info">
                    
    <div class="header-info-primary header-info-primary--with-columns">

        <div class="header-info-primary-col1">
            <div class="header-title-column-ellipsis-wrap">
                <div class="header-title-label-wrap">
                    <h1 class="header-title">
                        <a
            href="/user/AlexisT"
            
            
        >AlexisT</a>
                    </h1>
                    
                        <span
                            class="
                                label
                                user-status-None
                            "
                        ></span>
                    
                    
                </div>

                <p class="header-title-secondary">
                    <span class="header-title-display-name">Alexis
                    </span>
                    <span class="header-scrobble-since">• scrobbling since 26 Dec 2007
                    </span>
                </p>
            </div>

            
    
        
    <nav
        class="
            
                navlist
            
            secondary-nav
            
                navlist--more
            
            
        "
        aria-label="Secondary navigation"
        
            data-require="components/collapsing-nav-v2"
            data-more-string="More…"
        
    >
        <ul class="navlist-items js-navlist-items">
            <li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--overview
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                                    secondary-nav-item-link--active
                                
                            "
                            href="/user/AlexisT"
                            
                        >
                            Overview
                            
                                <span class="sr-only">(current section)</span>
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--week
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/AlexisT/listening-report/week"
                            
                        >
                            Listening Reports
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--library
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/AlexisT/library"
                            
                        >
                            Library
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--following
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/AlexisT/following"
                            
                        >
                            Following
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--followers
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/AlexisT/followers"
                            
                        >
                            Followers
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--loved
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/AlexisT/loved"
                            
                        >
                            Loved Tracks
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--obsessions
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/AlexisT/obsessions"
                            
                        >
                            Obsessions
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--events
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/AlexisT/events"
                            
                        >
                            Events
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--neighbours
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/AlexisT/neighbours"
                            
                        >
                            Neighbours
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--tags
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/AlexisT/tags"
                            
                        >
                            Tags
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--shoutbox
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/AlexisT/shoutbox"
                            
                        >
                            Shouts
                            
                        </a></li>
        </ul>
    </nav>

    

        </div>

        
    
    

    

    
    
    


        
    

    </div>
    <div
        class="
            header-info-secondary
            
        "
    >
        
        
    <ul class="header-metadata">

        

        
    
    
    
        
            <li class="
                header-metadata-item
                header-metadata-item--scrobbles
            ">
                <h4 class="header-metadata-title">Scrobbles</h4>
                
                
                <p
                    class="header-metadata-display"
                    
                    
                ><a href="/user/AlexisT/library"
                            
                        >1,505</a></p>
            </li>
        
            <li class="
                header-metadata-item
                header-metadata-item--artists
            ">
                <h4 class="header-metadata-title">Artists</h4>
                
                
                <p
                    class="header-metadata-display"
                    
                    
                ><a href="/user/AlexisT/library/artists"
                            
                        >601</a></p>
            </li>
        
    


        

        

        
        

        

        
        
    </ul>

        
    </div>

                </div>
            </div>
        </div>
    </header>



    
    <div id="mantle_skin" class="adaptive-skin-container">
        <div class="adaptive-skin-wrapper">
            <div id="adSkinLeft" class="adaptive-skin-left"></div>
            <div id="adSkinRight" class="adaptive-skin-right"></div>
        </div>
        
    
        
        
            <div id="skin" data-ad="skin" class="skin lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;skin&#34;, &#34;sizes&#34;: [[1600, 1000]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;collapse_before_load&#34;: true}'></div>
        
        
    


        

        
    <div class="content-top">
        <div class="content-top-inner-wrap">
            
                
    
        
        
            <div id="leader_top" data-ad="leader_top" class="leader_top lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;leader_top&#34;, &#34;sizes&#34;: [[728, 90], [970, 66], [970, 250], [728, 91]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
    

                
            

            <div class="container content-top-lower">
                
                    


                

                

                
                    
                

                

                
            </div>
        </div>
    </div>


        
    <div class="container page-content">
        
    <div class="row">
        <div class="col-main">

            

                

                
    <div class="profile-mobile-featured-track">
        
    
    

    

    
    
    


        
    

    </div>


                
    


                
                    <section
                        id="recent-tracks-section"
                        class="
                            clearfix
                            
                        "
                        
                        >
                        <h2>
                            <a class="text-colour-link"
                               href="/user/AlexisT/library"
                            >Recent Tracks</a>
                        </h2>
                        
                        


    
    

    
    
    
    
    
    
    

    <table
        
        class="
            chartlist
            
            
            
                chartlist--with-play
            
            
                chartlist--with-mobile-play
            
            
            
                chartlist--with-image
            
            
                chartlist--with-loved
            
            
                chartlist--with-artist
            
            
            
                chartlist--with-more
            
            
            
            
            
            
                chartlist--with-buylinks
            
        "
    >
        <thead class="sr-only">
            <tr>
                

                

                
                    
                    <th>Play</th>
                

                

                
                    
                    <th>
                        
                            Album
                        
                    </th>
                

                
                    
                    <th>Loved</th>
                

                <th>
                    
                    
                        Track name
                    
                </th>

                
                    
                    <th>Artist name</th>
                

                

                
                    
                    <th>Buy</th>
                

                
                    
                    <th>Options</th>
                

                
                    
                    <th>Timestamp</th>
                

                

                

                

                

                
            </tr>
        </thead>
        <tbody>
            

                
                

                
                    
                

                

                
                

                

                

                

                <tr
                    class="
                        chartlist-row
                        
                        
                            chartlist-row--with-artist
                        
                        
                            js-focus-controls-container
                        
                        
                        
                    "

                    data-scrobble-row
                    data-ajax-form-state

                    

                    
                        data-recenttrack-id="ef2bcd5a98cdcb9737ee17a0cd4cf75d"
                        data-timestamp="1202511044"
                    

                    
                        data-edit-scrobble-id="9d4bfc2867976f555dce28f0fcbd12f0"
                    
                >

                    

                    

                    
                        <td class="chartlist-play">
                            
    
        
    

    
        
        
    

                        </td>
                    

                    

                    
                        <td class="chartlist-image">
                            
                                
    
        
    

    

    

    
        <a href="/music/Fergie/The+Dutchess" class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/389bb17b6959a94d88f232f5df2e3c3f.jpg"
            alt="The Dutchess"
            
        />
    

    
        </a>
    

                            
                            
                        </td>
                    

                    
                        <td class="chartlist-loved">
                            
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="3abd40ffad920fad4a812edf077a4d20"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;AlexisT doesn&#39;t love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;AlexisT loves this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <span
                class="toggle-button chartlist-love-button"
            >
                AlexisT doesn&#39;t love this track
            </span>
        
    </div>

    

                        </td>
                    

                    <td
                        class="chartlist-name"
                        

                        
                            
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="3abd40ffad920fad4a812edf077a4d20"
        
    
    data-toggle-button-current-state="unloved"

    

                        
                    >
                        
                        
                        <a
            href="/music/Fergie/_/Fergalicious++Version+(Explicit))"
            
            
                title="Fergalicious  Version (Explicit))"
            
                class=""
            
                itemprop=""
            
        >Fergalicious  Version (Explicit))</a>
                    </td>

                    
                        <td
                            class="chartlist-artist"
                            
                        >
                            
                                <a
            href="/music/Fergie"
            
            
                title="Fergie"
            
                itemprop=""
            
        >Fergie</a>
                            
                        </td>
                    

                    

                    
                        <td class="chartlist-buylinks focus-control">
                            
        <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-925eb5de-f792-42d9-9b07-b80668ed7a6b"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Fergie/_/Fergalicious++Version+(Explicit))/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-925eb5de-f792-42d9-9b07-b80668ed7a6b"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    
                        </td>
                    

                    
                        <td class="chartlist-more focus-control">
                            
    
        
        
        
        
        
        
            
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-3f545ce7-aade-4dfc-8521-869b03fa1d49"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Fergie/_/Fergalicious++Version+(Explicit))/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-3f545ce7-aade-4dfc-8521-869b03fa1d49"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    
                        
                        

                        
    
        
    
    <li>
        <a
            href="/music/Fergie/_/Fergalicious++Version+(Explicit))"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track
                
            
        </a>
    </li>


                        
                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Fergie/_/Fergalicious++Version+(Explicit))"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track in library
                
            
        </a>
    </li>

                        

                        
                            
    
        
    
    <li>
        <a
            href="/music/Fergie"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist
                
            
        </a>
    </li>

                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Fergie"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist in library
                
            
        </a>
    </li>

                        

                        

                    

                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Fuser%2Falexist"
    
    
    href="https://secure.last.fm/login?next=/user/alexist"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

                        </td>
                    

                    
                        <td class="
                            chartlist-timestamp
                            chartlist-timestamp--lang-en
                        ">
                            
                                <span title="Saturday 9 Feb 2008, 9:50am">
                                    9 Feb 2008, 9:50am
                                </span>
                            
                        </td>
                    

                    

                    

                    

                    

                    

                </tr>

            

                
                

                
                    
                

                

                
                

                

                

                

                <tr
                    class="
                        chartlist-row
                        
                        
                            chartlist-row--with-artist
                        
                        
                            js-focus-controls-container
                        
                        
                        
                    "

                    data-scrobble-row
                    data-ajax-form-state

                    

                    
                        data-recenttrack-id="cf3633080b3e3676b9e59841274b2f20"
                        data-timestamp="1202510807"
                    

                    
                        data-edit-scrobble-id="49b44c70635ef6b1b2dad785501a4be7"
                    
                >

                    

                    

                    
                        <td class="chartlist-play">
                            
    
        
    

    
        
        
            
            <a
                class="
                    chartlist-play-button
                    
                        js-playlink
                    
                    
                "
                href="https://www.youtube.com/watch?v=9rlNpWYQunY"
                target="_blank"

                data-playlink-affiliate="youtube"
                data-youtube-id="9rlNpWYQunY"
                data-youtube-url="https://www.youtube.com/watch?v=9rlNpWYQunY"

                

                data-track-name="Rich Girl"
                data-track-url="/music/Gwen+Stefani/_/Rich+Girl"
                
                    data-artist-name="Gwen Stefani"
                    data-artist-url="/music/Gwen+Stefani"
                
                title="Play on youtube"
                
                data-analytics-action="PlayTrackOnPage"
                data-analytics-label="youtube"

                
            >
                
                    Play track
                
            </a>
        
    

                        </td>
                    

                    

                    
                        <td class="chartlist-image">
                            
                                
    
        
    

    

    

    
        <a href="/music/Gwen+Stefani/Love+Angel+Music+Baby" class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/3b3cf297119547258c24f1939f80941d.jpg"
            alt="Love Angel Music Baby"
            
        />
    

    
        </a>
    

                            
                            
                        </td>
                    

                    
                        <td class="chartlist-loved">
                            
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="ae5f63e19fced0fbc34853dbda5f3493"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;AlexisT doesn&#39;t love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;AlexisT loves this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <span
                class="toggle-button chartlist-love-button"
            >
                AlexisT doesn&#39;t love this track
            </span>
        
    </div>

    

                        </td>
                    

                    <td
                        class="chartlist-name"
                        

                        
                            
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="ae5f63e19fced0fbc34853dbda5f3493"
        
    
    data-toggle-button-current-state="unloved"

    

                        
                    >
                        
                        
                        <a
            href="/music/Gwen+Stefani/_/Rich+Girl"
            
            
                title="Rich Girl"
            
                class=""
            
                itemprop=""
            
        >Rich Girl</a>
                    </td>

                    
                        <td
                            class="chartlist-artist"
                            
                        >
                            
                                <a
            href="/music/Gwen+Stefani"
            
            
                title="Gwen Stefani"
            
                itemprop=""
            
        >Gwen Stefani</a>
                            
                        </td>
                    

                    

                    
                        <td class="chartlist-buylinks focus-control">
                            
        <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-41635466-d5ab-4e10-a05f-6d1fe40c39d1"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Gwen+Stefani/_/Rich+Girl/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-41635466-d5ab-4e10-a05f-6d1fe40c39d1"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    
                        </td>
                    

                    
                        <td class="chartlist-more focus-control">
                            
    
        
        
        
        
        
        
            
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-bb7ec2e4-5368-46d0-b216-d4e310677624"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Gwen+Stefani/_/Rich+Girl/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-bb7ec2e4-5368-46d0-b216-d4e310677624"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    
                        
                        

                        
    
        
    
    <li>
        <a
            href="/music/Gwen+Stefani/_/Rich+Girl"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track
                
            
        </a>
    </li>


                        
                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Gwen+Stefani/_/Rich+Girl"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track in library
                
            
        </a>
    </li>

                        

                        
                            
    
        
    
    <li>
        <a
            href="/music/Gwen+Stefani"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist
                
            
        </a>
    </li>

                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Gwen+Stefani"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist in library
                
            
        </a>
    </li>

                        

                        

                    

                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Fuser%2Falexist"
    
    
    href="https://secure.last.fm/login?next=/user/alexist"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

                        </td>
                    

                    
                        <td class="
                            chartlist-timestamp
                            chartlist-timestamp--lang-en
                        ">
                            
                                <span title="Saturday 9 Feb 2008, 9:46am">
                                    9 Feb 2008, 9:46am
                                </span>
                            
                        </td>
                    

                    

                    

                    

                    

                    

                </tr>

            

                
                

                
                    
                

                

                
                

                

                

                

                <tr
                    class="
                        chartlist-row
                        
                        
                            chartlist-row--with-artist
                        
                        
                            js-focus-controls-container
                        
                        
                        
                    "

                    data-scrobble-row
                    data-ajax-form-state

                    

                    
                        data-recenttrack-id="3d99ffbfa987e8d6df7c9ffd69d6c3c8"
                        data-timestamp="1202510577"
                    

                    
                        data-edit-scrobble-id="2f3a1a495e1cac10fd95b3c0508136a0"
                    
                >

                    

                    

                    
                        <td class="chartlist-play">
                            
    
        
    

    
        
        
            
            <a
                class="
                    chartlist-play-button
                    
                        js-playlink
                    
                    
                "
                href="https://www.youtube.com/watch?v=AWpFbue1EpM"
                target="_blank"

                data-playlink-affiliate="youtube"
                data-youtube-id="AWpFbue1EpM"
                data-youtube-url="https://www.youtube.com/watch?v=AWpFbue1EpM"

                

                data-track-name="International Affair"
                data-track-url="/music/Sean+Paul/_/International+Affair"
                
                    data-artist-name="Sean Paul"
                    data-artist-url="/music/Sean+Paul"
                
                title="Play on youtube"
                
                data-analytics-action="PlayTrackOnPage"
                data-analytics-label="youtube"

                
            >
                
                    Play track
                
            </a>
        
    

                        </td>
                    

                    

                    
                        <td class="chartlist-image">
                            
                                
    
        
    

    

    

    
        <span class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/4128a6eb29f94943c9d206c08e625904"
            alt="International Affair"
            
        />
    

    
        </span>
    

                            
                            
                        </td>
                    

                    
                        <td class="chartlist-loved">
                            
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="0bc19e30db670f27e7c90b2d384ee921"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;AlexisT doesn&#39;t love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;AlexisT loves this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <span
                class="toggle-button chartlist-love-button"
            >
                AlexisT doesn&#39;t love this track
            </span>
        
    </div>

    

                        </td>
                    

                    <td
                        class="chartlist-name"
                        

                        
                            
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="0bc19e30db670f27e7c90b2d384ee921"
        
    
    data-toggle-button-current-state="unloved"

    

                        
                    >
                        
                        
                        <a
            href="/music/Sean+Paul/_/International+Affair"
            
            
                title="International Affair"
            
                class=""
            
                itemprop=""
            
        >International Affair</a>
                    </td>

                    
                        <td
                            class="chartlist-artist"
                            
                        >
                            
                                <a
            href="/music/Sean+Paul"
            
            
                title="Sean Paul"
            
                itemprop=""
            
        >Sean Paul</a>
                            
                        </td>
                    

                    

                    
                        <td class="chartlist-buylinks focus-control">
                            
        <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-20b00f60-86ca-4ee9-8761-bfe6b6c69ee7"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Sean+Paul/_/International+Affair/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-20b00f60-86ca-4ee9-8761-bfe6b6c69ee7"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    
                        </td>
                    

                    
                        <td class="chartlist-more focus-control">
                            
    
        
        
        
        
        
        
            
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-69fc5312-82f3-4735-8e9d-07a78d85b170"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Sean+Paul/_/International+Affair/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-69fc5312-82f3-4735-8e9d-07a78d85b170"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    
                        
                        

                        
    
        
    
    <li>
        <a
            href="/music/Sean+Paul/_/International+Affair"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track
                
            
        </a>
    </li>


                        
                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Sean+Paul/_/International+Affair"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track in library
                
            
        </a>
    </li>

                        

                        
                            
    
        
    
    <li>
        <a
            href="/music/Sean+Paul"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist
                
            
        </a>
    </li>

                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Sean+Paul"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist in library
                
            
        </a>
    </li>

                        

                        

                    

                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Fuser%2Falexist"
    
    
    href="https://secure.last.fm/login?next=/user/alexist"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

                        </td>
                    

                    
                        <td class="
                            chartlist-timestamp
                            chartlist-timestamp--lang-en
                        ">
                            
                                <span title="Saturday 9 Feb 2008, 9:42am">
                                    9 Feb 2008, 9:42am
                                </span>
                            
                        </td>
                    

                    

                    

                    

                    

                    

                </tr>

            

                
                

                
                    
                

                

                
                

                

                

                

                <tr
                    class="
                        chartlist-row
                        
                        
                            chartlist-row--with-artist
                        
                        
                            js-focus-controls-container
                        
                        
                        
                    "

                    data-scrobble-row
                    data-ajax-form-state

                    

                    
                        data-recenttrack-id="ae72763f112e73bd3c14b2a08e186cfb"
                        data-timestamp="1202510378"
                    

                    
                        data-edit-scrobble-id="8208590756d10c27a8fd3be40d7c4ae4"
                    
                >

                    

                    

                    
                        <td class="chartlist-play">
                            
    
        
    

    
        
        
            
            <a
                class="
                    chartlist-play-button
                    
                        js-playlink
                    
                    
                "
                href="https://www.youtube.com/watch?v=P8N9P15FbOA"
                target="_blank"

                data-playlink-affiliate="youtube"
                data-youtube-id="P8N9P15FbOA"
                data-youtube-url="https://www.youtube.com/watch?v=P8N9P15FbOA"

                

                data-track-name="If"
                data-track-url="/music/Nelly/_/If"
                
                    data-artist-name="Nelly"
                    data-artist-url="/music/Nelly"
                
                title="Play on youtube"
                
                data-analytics-action="PlayTrackOnPage"
                data-analytics-label="youtube"

                
            >
                
                    Play track
                
            </a>
        
    

                        </td>
                    

                    

                    
                        <td class="chartlist-image">
                            
                                
    
        
    

    

    

    
        <a href="/music/Nelly/Da+Derrty+Versions" class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/86daa4b91ff114870a47824f7a87468d.jpg"
            alt="Da Derrty Versions"
            
        />
    

    
        </a>
    

                            
                            
                        </td>
                    

                    
                        <td class="chartlist-loved">
                            
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="b693bb4159502ae2316cfd1e0dee272a"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;AlexisT doesn&#39;t love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;AlexisT loves this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <span
                class="toggle-button chartlist-love-button"
            >
                AlexisT doesn&#39;t love this track
            </span>
        
    </div>

    

                        </td>
                    

                    <td
                        class="chartlist-name"
                        

                        
                            
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="b693bb4159502ae2316cfd1e0dee272a"
        
    
    data-toggle-button-current-state="unloved"

    

                        
                    >
                        
                        
                        <a
            href="/music/Nelly/_/If"
            
            
                title="If"
            
                class=""
            
                itemprop=""
            
        >If</a>
                    </td>

                    
                        <td
                            class="chartlist-artist"
                            
                        >
                            
                                <a
            href="/music/Nelly"
            
            
                title="Nelly"
            
                itemprop=""
            
        >Nelly</a>
                            
                        </td>
                    

                    

                    
                        <td class="chartlist-buylinks focus-control">
                            
        <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-055f8ff6-52f2-482d-83df-5c87c3da3461"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Nelly/_/If/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-055f8ff6-52f2-482d-83df-5c87c3da3461"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    
                        </td>
                    

                    
                        <td class="chartlist-more focus-control">
                            
    
        
        
        
        
        
        
            
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-20b1072f-e326-4bab-a274-cf89ea180c4f"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Nelly/_/If/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-20b1072f-e326-4bab-a274-cf89ea180c4f"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    
                        
                        

                        
    
        
    
    <li>
        <a
            href="/music/Nelly/_/If"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track
                
            
        </a>
    </li>


                        
                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Nelly/_/If"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track in library
                
            
        </a>
    </li>

                        

                        
                            
    
        
    
    <li>
        <a
            href="/music/Nelly"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist
                
            
        </a>
    </li>

                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Nelly"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist in library
                
            
        </a>
    </li>

                        

                        

                    

                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Fuser%2Falexist"
    
    
    href="https://secure.last.fm/login?next=/user/alexist"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

                        </td>
                    

                    
                        <td class="
                            chartlist-timestamp
                            chartlist-timestamp--lang-en
                        ">
                            
                                <span title="Saturday 9 Feb 2008, 9:39am">
                                    9 Feb 2008, 9:39am
                                </span>
                            
                        </td>
                    

                    

                    

                    

                    

                    

                </tr>

            

                
                

                
                    
                

                

                
                

                

                

                

                <tr
                    class="
                        chartlist-row
                        
                        
                            chartlist-row--with-artist
                        
                        
                            js-focus-controls-container
                        
                        
                        
                    "

                    data-scrobble-row
                    data-ajax-form-state

                    

                    
                        data-recenttrack-id="37e6a84745586d4a942bbea21a169cde"
                        data-timestamp="1202510141"
                    

                    
                        data-edit-scrobble-id="b62d455bca8c5b4dd7b82a6b488a24ce"
                    
                >

                    

                    

                    
                        <td class="chartlist-play">
                            
    
        
    

    
        
        
    

                        </td>
                    

                    

                    
                        <td class="chartlist-image">
                            
                                
    
        
    

    

    

    
        <a href="/music/The+Pussycat+Dolls/Wait+A+Minute" class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/663c6dfc16ccd5a0e167c64c45aa5d0c.jpg"
            alt="Wait A Minute"
            
        />
    

    
        </a>
    

                            
                            
                        </td>
                    

                    
                        <td class="chartlist-loved">
                            
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="a4012d5042de83c03742653b7a5d476e"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;AlexisT doesn&#39;t love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;AlexisT loves this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <span
                class="toggle-button chartlist-love-button"
            >
                AlexisT doesn&#39;t love this track
            </span>
        
    </div>

    

                        </td>
                    

                    <td
                        class="chartlist-name"
                        

                        
                            
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="a4012d5042de83c03742653b7a5d476e"
        
    
    data-toggle-button-current-state="unloved"

    

                        
                    >
                        
                        
                        <a
            href="/music/The+Pussycat+Dolls/_/Wait+A+Minute+(Timbaland+Version)"
            
            
                title="Wait A Minute (Timbaland Version)"
            
                class=""
            
                itemprop=""
            
        >Wait A Minute (Timbaland Version)</a>
                    </td>

                    
                        <td
                            class="chartlist-artist"
                            
                        >
                            
                                <a
            href="/music/The+Pussycat+Dolls"
            
            
                title="The Pussycat Dolls"
            
                itemprop=""
            
        >The Pussycat Dolls</a>
                            
                        </td>
                    

                    

                    
                        <td class="chartlist-buylinks focus-control">
                            
        <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-43d7d1d6-109d-4673-9b8c-c966c7fc55c4"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/The+Pussycat+Dolls/_/Wait+A+Minute+(Timbaland+Version)/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-43d7d1d6-109d-4673-9b8c-c966c7fc55c4"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    
                        </td>
                    

                    
                        <td class="chartlist-more focus-control">
                            
    
        
        
        
        
        
        
            
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-52fc630f-5ef8-4da9-be6e-18a166c7abc4"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/The+Pussycat+Dolls/_/Wait+A+Minute+(Timbaland+Version)/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-52fc630f-5ef8-4da9-be6e-18a166c7abc4"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    
                        
                        

                        
    
        
    
    <li>
        <a
            href="/music/The+Pussycat+Dolls/_/Wait+A+Minute+(Timbaland+Version)"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track
                
            
        </a>
    </li>


                        
                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/The+Pussycat+Dolls/_/Wait+A+Minute+(Timbaland+Version)"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track in library
                
            
        </a>
    </li>

                        

                        
                            
    
        
    
    <li>
        <a
            href="/music/The+Pussycat+Dolls"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist
                
            
        </a>
    </li>

                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/The+Pussycat+Dolls"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist in library
                
            
        </a>
    </li>

                        

                        

                    

                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Fuser%2Falexist"
    
    
    href="https://secure.last.fm/login?next=/user/alexist"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

                        </td>
                    

                    
                        <td class="
                            chartlist-timestamp
                            chartlist-timestamp--lang-en
                        ">
                            
                                <span title="Saturday 9 Feb 2008, 9:35am">
                                    9 Feb 2008, 9:35am
                                </span>
                            
                        </td>
                    

                    

                    

                    

                    

                    

                </tr>

            

                
                

                
                    
                

                

                
                

                

                
                    <tr class="chartlist-row--interlist-ad buffer-standard" data-ad-container>
                        <td colspan="8">
                            <div id="mobile_pos_1" data-ad="mobile_pos_1" class="mobile_pos_1 lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_pos_1&#34;, &#34;sizes&#34;: [[300, 250], [320, 50]], &#34;is_mobile&#34;: true, &#34;targeting&#34;: {&#34;pos&#34;: &#34;1&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mobile_pos_1">
                Don't want to see ads? <a href="/subscribe" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Subscribe now</a>
            </p>
                        </td>
                    </tr>
                

                

                <tr
                    class="
                        chartlist-row
                        
                        
                            chartlist-row--with-artist
                        
                        
                            js-focus-controls-container
                        
                        
                        
                    "

                    data-scrobble-row
                    data-ajax-form-state

                    

                    
                        data-recenttrack-id="8fae2f3eb3c6f28c764db545ed6c773e"
                        data-timestamp="1202509612"
                    

                    
                        data-edit-scrobble-id="852a5e086ec809be911b76fe69104dd6"
                    
                >

                    

                    

                    
                        <td class="chartlist-play">
                            
    
        
    

    
        
        
            
            <a
                class="
                    chartlist-play-button
                    
                        js-playlink
                    
                    
                "
                href="https://www.youtube.com/watch?v=eMplWu1hvjc"
                target="_blank"

                data-playlink-affiliate="youtube"
                data-youtube-id="eMplWu1hvjc"
                data-youtube-url="https://www.youtube.com/watch?v=eMplWu1hvjc"

                

                data-track-name="Bills, Bills, Bills (Maurice&#39;s Xclusive Livegig Mix)"
                data-track-url="/music/Destiny%27s+Child/_/Bills,+Bills,+Bills+(Maurice%27s+Xclusive+Livegig+Mix)"
                
                    data-artist-name="Destiny&#39;s Child"
                    data-artist-url="/music/Destiny%27s+Child"
                
                title="Play on youtube"
                
                data-analytics-action="PlayTrackOnPage"
                data-analytics-label="youtube"

                
            >
                
                    Play track
                
            </a>
        
    

                        </td>
                    

                    

                    
                        <td class="chartlist-image">
                            
                                
    
        
    

    

    

    
        <a href="/music/Destiny%27s+Child/This+Is+The+Remix" class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/d8e61ec979ac622c2738b05cc45cc0e7.jpg"
            alt="This Is The Remix"
            
        />
    

    
        </a>
    

                            
                            
                        </td>
                    

                    
                        <td class="chartlist-loved">
                            
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="b0e9655226b5acc80ef9ca226c476223"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;AlexisT doesn&#39;t love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;AlexisT loves this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <span
                class="toggle-button chartlist-love-button"
            >
                AlexisT doesn&#39;t love this track
            </span>
        
    </div>

    

                        </td>
                    

                    <td
                        class="chartlist-name"
                        

                        
                            
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="b0e9655226b5acc80ef9ca226c476223"
        
    
    data-toggle-button-current-state="unloved"

    

                        
                    >
                        
                        
                        <a
            href="/music/Destiny%27s+Child/_/Bills,+Bills,+Bills+(Maurice%27s+Xclusive+Livegig+Mix)"
            
            
                title="Bills, Bills, Bills (Maurice&#39;s Xclusive Livegig Mix)"
            
                class=""
            
                itemprop=""
            
        >Bills, Bills, Bills (Maurice&#39;s Xclusive Livegig Mix)</a>
                    </td>

                    
                        <td
                            class="chartlist-artist"
                            
                        >
                            
                                <a
            href="/music/Destiny%27s+Child"
            
            
                title="Destiny&#39;s Child"
            
                itemprop=""
            
        >Destiny&#39;s Child</a>
                            
                        </td>
                    

                    

                    
                        <td class="chartlist-buylinks focus-control">
                            
        <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-1d32c2f5-19c0-42b4-86ac-706fbf997b18"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Destiny%27s+Child/_/Bills,+Bills,+Bills+(Maurice%27s+Xclusive+Livegig+Mix)/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-1d32c2f5-19c0-42b4-86ac-706fbf997b18"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    
                        </td>
                    

                    
                        <td class="chartlist-more focus-control">
                            
    
        
        
        
        
        
        
            
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-c75201ec-835e-4b5a-b109-561e2004b8bc"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Destiny%27s+Child/_/Bills,+Bills,+Bills+(Maurice%27s+Xclusive+Livegig+Mix)/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-c75201ec-835e-4b5a-b109-561e2004b8bc"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    
                        
                        

                        
    
        
    
    <li>
        <a
            href="/music/Destiny%27s+Child/_/Bills,+Bills,+Bills+(Maurice%27s+Xclusive+Livegig+Mix)"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track
                
            
        </a>
    </li>


                        
                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Destiny%27s+Child/_/Bills,+Bills,+Bills+(Maurice%27s+Xclusive+Livegig+Mix)"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track in library
                
            
        </a>
    </li>

                        

                        
                            
    
        
    
    <li>
        <a
            href="/music/Destiny%27s+Child"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist
                
            
        </a>
    </li>

                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Destiny%27s+Child"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist in library
                
            
        </a>
    </li>

                        

                        

                    

                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Fuser%2Falexist"
    
    
    href="https://secure.last.fm/login?next=/user/alexist"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

                        </td>
                    

                    
                        <td class="
                            chartlist-timestamp
                            chartlist-timestamp--lang-en
                        ">
                            
                                <span title="Saturday 9 Feb 2008, 9:26am">
                                    9 Feb 2008, 9:26am
                                </span>
                            
                        </td>
                    

                    

                    

                    

                    

                    

                </tr>

            

                
                

                
                    
                

                

                
                

                

                

                

                <tr
                    class="
                        chartlist-row
                        
                        
                            chartlist-row--with-artist
                        
                        
                            js-focus-controls-container
                        
                        
                        
                    "

                    data-scrobble-row
                    data-ajax-form-state

                    

                    
                        data-recenttrack-id="61bc09fb8542d53a23f9f02dcbc6a66f"
                        data-timestamp="1202509125"
                    

                    
                        data-edit-scrobble-id="dbd6ee9e5bf3aaee99615b3028b2f000"
                    
                >

                    

                    

                    
                        <td class="chartlist-play">
                            
    
        
    

    
        
        
    

                        </td>
                    

                    

                    
                        <td class="chartlist-image">
                            
                                
    
        
    

    

    

    
        <a href="/music/Black+Eyed+Peas/Behind+The+Front" class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/4b8de511baec4baba37feb5698ff4369.jpg"
            alt="Behind The Front"
            
        />
    

    
        </a>
    

                            
                            
                        </td>
                    

                    
                        <td class="chartlist-loved">
                            
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="3b745d2ceda71f464776fcbb1c9e1e17"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;AlexisT doesn&#39;t love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;AlexisT loves this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <span
                class="toggle-button chartlist-love-button"
            >
                AlexisT doesn&#39;t love this track
            </span>
        
    </div>

    

                        </td>
                    

                    <td
                        class="chartlist-name"
                        

                        
                            
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="3b745d2ceda71f464776fcbb1c9e1e17"
        
    
    data-toggle-button-current-state="unloved"

    

                        
                    >
                        
                        
                        <a
            href="/music/Black+Eyed+Peas/_/Positivity++Version+(Explicit))"
            
            
                title="Positivity  Version (Explicit))"
            
                class=""
            
                itemprop=""
            
        >Positivity  Version (Explicit))</a>
                    </td>

                    
                        <td
                            class="chartlist-artist"
                            
                        >
                            
                                <a
            href="/music/Black+Eyed+Peas"
            
            
                title="Black Eyed Peas"
            
                itemprop=""
            
        >Black Eyed Peas</a>
                            
                        </td>
                    

                    

                    
                        <td class="chartlist-buylinks focus-control">
                            
        <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-fc712564-e009-4d05-bd26-0f959e057167"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Black+Eyed+Peas/_/Positivity++Version+(Explicit))/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-fc712564-e009-4d05-bd26-0f959e057167"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    
                        </td>
                    

                    
                        <td class="chartlist-more focus-control">
                            
    
        
        
        
        
        
        
            
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-eac48d14-fd06-4f38-bd99-dd771f444015"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Black+Eyed+Peas/_/Positivity++Version+(Explicit))/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-eac48d14-fd06-4f38-bd99-dd771f444015"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    
                        
                        

                        
    
        
    
    <li>
        <a
            href="/music/Black+Eyed+Peas/_/Positivity++Version+(Explicit))"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track
                
            
        </a>
    </li>


                        
                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Black+Eyed+Peas/_/Positivity++Version+(Explicit))"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track in library
                
            
        </a>
    </li>

                        

                        
                            
    
        
    
    <li>
        <a
            href="/music/Black+Eyed+Peas"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist
                
            
        </a>
    </li>

                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Black+Eyed+Peas"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist in library
                
            
        </a>
    </li>

                        

                        

                    

                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Fuser%2Falexist"
    
    
    href="https://secure.last.fm/login?next=/user/alexist"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

                        </td>
                    

                    
                        <td class="
                            chartlist-timestamp
                            chartlist-timestamp--lang-en
                        ">
                            
                                <span title="Saturday 9 Feb 2008, 9:18am">
                                    9 Feb 2008, 9:18am
                                </span>
                            
                        </td>
                    

                    

                    

                    

                    

                    

                </tr>

            

                
                

                
                    
                

                

                
                

                

                

                

                <tr
                    class="
                        chartlist-row
                        
                        
                            chartlist-row--with-artist
                        
                        
                            js-focus-controls-container
                        
                        
                        
                    "

                    data-scrobble-row
                    data-ajax-form-state

                    

                    
                        data-recenttrack-id="a17c63a9bba3dd6c3e74e6a49e6506e5"
                        data-timestamp="1202507546"
                    

                    
                        data-edit-scrobble-id="4ff5e0d6b4335cf5310d6917496cad39"
                    
                >

                    

                    

                    
                        <td class="chartlist-play">
                            
    
        
    

    
        
        
    

                        </td>
                    

                    

                    
                        <td class="chartlist-image">
                            
                                
    
        
    

    

    

    
        <a href="/music/Vladimir+Ashkenazy/Chopin+.+Favourite+Piano+Works+:+Vladimir+Ashkenazy+02%2F02" class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/5257f173885b49c5b71dfb4a0ae4ed43.jpg"
            alt="Chopin . Favourite Piano Works : Vladimir Ashkenazy 02/02"
            
        />
    

    
        </a>
    

                            
                            
                        </td>
                    

                    
                        <td class="chartlist-loved">
                            
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="99d53f8a958610b6b4420886f5167d23"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;AlexisT doesn&#39;t love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;AlexisT loves this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <span
                class="toggle-button chartlist-love-button"
            >
                AlexisT doesn&#39;t love this track
            </span>
        
    </div>

    

                        </td>
                    

                    <td
                        class="chartlist-name"
                        

                        
                            
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="99d53f8a958610b6b4420886f5167d23"
        
    
    data-toggle-button-current-state="unloved"

    

                        
                    >
                        
                        
                        <a
            href="/music/Vladimir+Ashkenazy/_/Ballade+in+A+flat+major,+op.+47"
            
            
                title="Ballade in A flat major, op. 47"
            
                class=""
            
                itemprop=""
            
        >Ballade in A flat major, op. 47</a>
                    </td>

                    
                        <td
                            class="chartlist-artist"
                            
                        >
                            
                                <a
            href="/music/Vladimir+Ashkenazy"
            
            
                title="Vladimir Ashkenazy"
            
                itemprop=""
            
        >Vladimir Ashkenazy</a>
                            
                        </td>
                    

                    

                    
                        <td class="chartlist-buylinks focus-control">
                            
        <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-930263a2-9ec9-4afe-bdc5-42c30b6adebd"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Vladimir+Ashkenazy/_/Ballade+in+A+flat+major,+op.+47/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-930263a2-9ec9-4afe-bdc5-42c30b6adebd"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    
                        </td>
                    

                    
                        <td class="chartlist-more focus-control">
                            
    
        
        
        
        
        
        
            
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-3195f08b-0c5c-41df-82e9-2e8e82113443"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Vladimir+Ashkenazy/_/Ballade+in+A+flat+major,+op.+47/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-3195f08b-0c5c-41df-82e9-2e8e82113443"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    
                        
                        

                        
    
        
    
    <li>
        <a
            href="/music/Vladimir+Ashkenazy/_/Ballade+in+A+flat+major,+op.+47"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track
                
            
        </a>
    </li>


                        
                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Vladimir+Ashkenazy/_/Ballade+in+A+flat+major,+op.+47"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track in library
                
            
        </a>
    </li>

                        

                        
                            
    
        
    
    <li>
        <a
            href="/music/Vladimir+Ashkenazy"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist
                
            
        </a>
    </li>

                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Vladimir+Ashkenazy"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist in library
                
            
        </a>
    </li>

                        

                        

                    

                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Fuser%2Falexist"
    
    
    href="https://secure.last.fm/login?next=/user/alexist"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

                        </td>
                    

                    
                        <td class="
                            chartlist-timestamp
                            chartlist-timestamp--lang-en
                        ">
                            
                                <span title="Saturday 9 Feb 2008, 8:52am">
                                    9 Feb 2008, 8:52am
                                </span>
                            
                        </td>
                    

                    

                    

                    

                    

                    

                </tr>

            

                
                

                
                    
                

                

                
                

                

                

                

                <tr
                    class="
                        chartlist-row
                        
                        
                            chartlist-row--with-artist
                        
                        
                            js-focus-controls-container
                        
                        
                        
                    "

                    data-scrobble-row
                    data-ajax-form-state

                    

                    
                        data-recenttrack-id="2c6fcbb6f30b7a3e2c6206f356d9960f"
                        data-timestamp="1202507449"
                    

                    
                        data-edit-scrobble-id="960c9276a5c828a2b7fab154a10b3664"
                    
                >

                    

                    

                    
                        <td class="chartlist-play">
                            
    
        
    

    
        
        
    

                        </td>
                    

                    

                    
                        <td class="chartlist-image">
                            
                                
    
        
    

    

    

    
        <a href="/music/Francis+Poulenc/POULENC:+Stabat+Mater+%2F+Gloria+%2F+Litanies" class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/acf62337c4c0a5a6b519636103ec7a87.jpg"
            alt="POULENC: Stabat Mater / Gloria / Litanies"
            
        />
    

    
        </a>
    

                            
                            
                        </td>
                    

                    
                        <td class="chartlist-loved">
                            
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="dcb8364759291c40c7a71e34a4becf59"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;AlexisT doesn&#39;t love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;AlexisT loves this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <span
                class="toggle-button chartlist-love-button"
            >
                AlexisT doesn&#39;t love this track
            </span>
        
    </div>

    

                        </td>
                    

                    <td
                        class="chartlist-name"
                        

                        
                            
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="dcb8364759291c40c7a71e34a4becf59"
        
    
    data-toggle-button-current-state="unloved"

    

                        
                    >
                        
                        
                        <a
            href="/music/Francis+Poulenc/_/Quae+moerebat"
            
            
                title="Quae moerebat"
            
                class=""
            
                itemprop=""
            
        >Quae moerebat</a>
                    </td>

                    
                        <td
                            class="chartlist-artist"
                            
                        >
                            
                                <a
            href="/music/Francis+Poulenc"
            
            
                title="Francis Poulenc"
            
                itemprop=""
            
        >Francis Poulenc</a>
                            
                        </td>
                    

                    

                    
                        <td class="chartlist-buylinks focus-control">
                            
        <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-b0b5ae7c-bd5b-43ea-b2d8-5eef6a0e836b"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Francis+Poulenc/_/Quae+moerebat/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-b0b5ae7c-bd5b-43ea-b2d8-5eef6a0e836b"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    
                        </td>
                    

                    
                        <td class="chartlist-more focus-control">
                            
    
        
        
        
        
        
        
            
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-adb1d3dd-722e-4b01-b266-1977d48bc204"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Francis+Poulenc/_/Quae+moerebat/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-adb1d3dd-722e-4b01-b266-1977d48bc204"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    
                        
                        

                        
    
        
    
    <li>
        <a
            href="/music/Francis+Poulenc/_/Quae+moerebat"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track
                
            
        </a>
    </li>


                        
                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Francis+Poulenc/_/Quae+moerebat"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track in library
                
            
        </a>
    </li>

                        

                        
                            
    
        
    
    <li>
        <a
            href="/music/Francis+Poulenc"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist
                
            
        </a>
    </li>

                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Francis+Poulenc"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist in library
                
            
        </a>
    </li>

                        

                        

                    

                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Fuser%2Falexist"
    
    
    href="https://secure.last.fm/login?next=/user/alexist"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

                        </td>
                    

                    
                        <td class="
                            chartlist-timestamp
                            chartlist-timestamp--lang-en
                        ">
                            
                                <span title="Saturday 9 Feb 2008, 8:50am">
                                    9 Feb 2008, 8:50am
                                </span>
                            
                        </td>
                    

                    

                    

                    

                    

                    

                </tr>

            

                
                

                
                    
                

                

                
                

                

                

                

                <tr
                    class="
                        chartlist-row
                        
                        
                            chartlist-row--with-artist
                        
                        
                            js-focus-controls-container
                        
                        
                        
                    "

                    data-scrobble-row
                    data-ajax-form-state

                    

                    
                        data-recenttrack-id="7f38a557c7adac8e2aced17dec8ccfff"
                        data-timestamp="1202506984"
                    

                    
                        data-edit-scrobble-id="1ea4a0b6d5ea632e7ce291313516c804"
                    
                >

                    

                    

                    
                        <td class="chartlist-play">
                            
    
        
    

    
        
        
    

                        </td>
                    

                    

                    
                        <td class="chartlist-image">
                            
                                
    
        
    

    

    

    
        <a href="/music/Alexander+Scriabin/SCRIABIN:+Piano+Sonatas,+Vol.++2" class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/ecdd4c8b31be32ed6dd0f23412a324e1.jpg"
            alt="SCRIABIN: Piano Sonatas, Vol.  2"
            
        />
    

    
        </a>
    

                            
                            
                        </td>
                    

                    
                        <td class="chartlist-loved">
                            
    
        
        
    <div
        
    
        data-toggle-button
        data-toggle-button-group-id="303e495acefceb7aba912f0032fc9147"
        
            data-toggle-button-states="[{&#34;name&#34;: &#34;unloved&#34;, &#34;button_text&#34;: &#34;AlexisT doesn&#39;t love this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;love&#34;, &#34;analytics_action&#34;: &#34;LoveTrack&#34;, &#34;event&#34;: &#34;track.love&#34;}, {&#34;name&#34;: &#34;loved&#34;, &#34;button_text&#34;: &#34;AlexisT loves this track&#34;, &#34;url&#34;: null, &#34;action&#34;: &#34;unlove&#34;, &#34;analytics_action&#34;: &#34;UnloveTrack&#34;, &#34;event&#34;: &#34;track.unlove&#34;}]"
        
    
    data-toggle-button-current-state="unloved"

    >
        
            <span
                class="toggle-button chartlist-love-button"
            >
                AlexisT doesn&#39;t love this track
            </span>
        
    </div>

    

                        </td>
                    

                    <td
                        class="chartlist-name"
                        

                        
                            
    
        
        
    
        data-toggle-button
        data-toggle-button-group-id="303e495acefceb7aba912f0032fc9147"
        
    
    data-toggle-button-current-state="unloved"

    

                        
                    >
                        
                        
                        <a
            href="/music/Alexander+Scriabin/_/I.+(Allegro+appassionato)"
            
            
                title="I. (Allegro appassionato)"
            
                class=""
            
                itemprop=""
            
        >I. (Allegro appassionato)</a>
                    </td>

                    
                        <td
                            class="chartlist-artist"
                            
                        >
                            
                                <a
            href="/music/Alexander+Scriabin"
            
            
                title="Alexander Scriabin"
            
                itemprop=""
            
        >Alexander Scriabin</a>
                            
                        </td>
                    

                    

                    
                        <td class="chartlist-buylinks focus-control">
                            
        <div class="lazy-buylinks ">
            
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                "
                aria-expanded="false"
                aria-controls="buylinks-a8663e14-0dc0-4435-b859-502e9933dbf4"
                data-disclose-lazy-buylinks
                data-lazy-buylink-url="/music/Alexander+Scriabin/_/I.+(Allegro+appassionato)/+partial/buylinks"
                data-dropdown-layout-at="center bottom+3"
            >Buy</button>
            <ul
                id="buylinks-a8663e14-0dc0-4435-b859-502e9933dbf4"
                class="
                    disclose-hide
                    dropdown-menu-clickable
                    buylinks-dropdown-menu
                "
            >
                <li
                    class="menu-loading"
                    data-lazy-buylinks-loading
                    aria-live="polite"
                >Loading</li>
            </ul>
        </div>
    
                        </td>
                    

                    
                        <td class="chartlist-more focus-control">
                            
    
        
        
        
        
        
        
            
        

        
            
            <div>
                <button
                    class="
                        disclose-trigger
                        chartlist-more-button
                    "
                    aria-expanded="false"
                    aria-controls="chartlist-more-c1634189-0ade-4bf3-9c0d-2bfdf6e35dfa"
                    data-disclose-lazy-buylinks
                    data-lazy-buylink-url="/music/Alexander+Scriabin/_/I.+(Allegro+appassionato)/+partial/buylinks"
                    data-dropdown-layout-at="center bottom+3"
                >More</button>
                <ul
                    id="chartlist-more-c1634189-0ade-4bf3-9c0d-2bfdf6e35dfa"
                    class="
                        disclose-hide
                        disclose-hide--js-only
                        dropdown-menu-clickable
                        chartlist-more-menu
                    "
                >

                    

                    
                        
                        

                        
    
        
    
    <li>
        <a
            href="/music/Alexander+Scriabin/_/I.+(Allegro+appassionato)"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track
                
            
        </a>
    </li>


                        
                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Alexander+Scriabin/_/I.+(Allegro+appassionato)"
            class="
                dropdown-menu-clickable-item
                more-item--track
            "
        >
            
                
                    Go to track in library
                
            
        </a>
    </li>

                        

                        
                            
    
        
    
    <li>
        <a
            href="/music/Alexander+Scriabin"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist
                
            
        </a>
    </li>

                            
    
        
    
    <li>
        <a
            href="/user/AlexisT/library/music/Alexander+Scriabin"
            class="
                dropdown-menu-clickable-item
                more-item--artist
            "
        >
            
                
                    Go to artist in library
                
            
        </a>
    </li>

                        

                        

                    

                    

                    
                        <li>
                            
                                
    
        <a
            
    
        
        
    
    
        data-open-modal="/join/modal?action=set-obsession&amp;back_to=%2Fuser%2Falexist"
    
    
    href="https://secure.last.fm/login?next=/user/alexist"

            class="
                                        mimic-link
                                        dropdown-menu-clickable-item
                                        more-item--obsession
                                    "
        >
            Set track as current obsession
        </a>
    

                            
                        </li>
                    

                    

                    

                    
                        <li class="visible-xs">
                            <span class="menu-title">
                                
                                    Get track
                                
                            </span>
                            <ul class="buylinks-dropdown-menu">
                                <li
                                    class="menu-loading"
                                    data-lazy-buylinks-loading
                                    aria-live="polite"
                                >Loading</li>
                            </ul>
                        </li>
                    
                </ul>
            </div>
        
    

                        </td>
                    

                    
                        <td class="
                            chartlist-timestamp
                            chartlist-timestamp--lang-en
                        ">
                            
                                <span title="Saturday 9 Feb 2008, 8:43am">
                                    9 Feb 2008, 8:43am
                                </span>
                            
                        </td>
                    

                    

                    

                    

                    

                    

                </tr>

            
        </tbody>
    </table>



                    </section>
                    <p class="more-link">
                        <a href="/user/AlexisT/library">
                            More tracks
                        </a>
                    </p>
                    
                

                
                    
    <div class="join-cta link-block js-link-block">
        <div class="join-cta-description">
            <h3>Want your own personalised music charts?</h3>
            <p>Join Last.fm for free to get your own music profile!</p>
        </div>
        <a
            href="/join"
            class="
                btn-primary
                btn-big
                join-cta-button
                link-block-target
            "
            data-analytics-action="JoinCTAClick"
            data-analytics-label="WantYourOwnMusicCharts"
        >Join Last.fm</a>
        <a
            href="/join"
            class="js-link-block-cover-link link-block-cover-link"
            tabindex="-1"
            aria-hidden="true"
            data-analytics-action="JoinCTAClick"
            data-analytics-label="WantYourOwnMusicCharts"
        ></a>
    </div>

                

                
    <section
        class="
            
                visible-xs
            
        "
    >
        <h2>Listening Reports</h2>

        
            <a
                class="listening-report-promo listening-report-promo--week"
                href="/user/AlexisT/listening-report/week"
            >
                <span class="listening-report-promo-title">Last.week</span>
                <span class="listening-report-promo-date">
                    28 Jun — 4 Jul
                </span>
            </a>
        

        

        <a
            class="listening-report-promo listening-report-promo--year"
            href="/user/AlexisT/listening-report/year"
        >
            <span class="listening-report-promo-title">Last.year</span>
            <span class="listening-report-promo-date">2018</span>
        </a>
    </section>


                <section
                    id="top-artists"
                    class="
                        grid-items-section
                        section-with-control
                        
                    "
                >
                    <h2>
                        <a class="text-colour-link"
                           href="/user/AlexisT/library/artists?date_preset=LAST_7_DAYS"
                           data-lazy-filter-more-link="artists_range"
                        >Top Artists</a>
                    </h2>
                    
                    
    
    
        <button
            class="
                disclose-trigger
                dropdown-menu-clickable-button
                section-control
            "
            aria-expanded="false"
            aria-controls="artists_range"
            data-disclose-select
            data-dropdown-layout-at="right-6 bottom"
        ><span class="sr-only">Sorted by: </span>Last 7 days</button>
    
    
    <ul
        class="
            
            dropdown-menu-clickable
            disclose-hide
            disclose-hide--js-only
        "
        id="artists_range"
        
            data-dropdown-layout-align="right"
        
    >
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                            dropdown-menu-clickable-item--selected
                        
                    "
                    href="/user/alexist?artists_date_preset=LAST_7_DAYS#top-artists"
                    
                        data-partial-href="/user/AlexisT/partial/artists?artists_date_preset=LAST_7_DAYS"
                    
                >Last 7 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?artists_date_preset=LAST_30_DAYS#top-artists"
                    
                        data-partial-href="/user/AlexisT/partial/artists?artists_date_preset=LAST_30_DAYS"
                    
                >Last 30 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?artists_date_preset=LAST_90_DAYS#top-artists"
                    
                        data-partial-href="/user/AlexisT/partial/artists?artists_date_preset=LAST_90_DAYS"
                    
                >Last 90 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?artists_date_preset=LAST_180_DAYS#top-artists"
                    
                        data-partial-href="/user/AlexisT/partial/artists?artists_date_preset=LAST_180_DAYS"
                    
                >Last 180 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?artists_date_preset=LAST_365_DAYS#top-artists"
                    
                        data-partial-href="/user/AlexisT/partial/artists?artists_date_preset=LAST_365_DAYS"
                    
                >Last 365 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?artists_date_preset=ALL#top-artists"
                    
                        data-partial-href="/user/AlexisT/partial/artists?artists_date_preset=ALL"
                    
                >All time</a>
            </li>
        
    </ul>


                    <div
                        class="buffer-standard"
                        data-require="components/lazy-filter"
                        data-lazy-filter-options="artists_range"
                    >
                        







    
    <p class="no-data-message">
        
            AlexisT hasn't listened to any music in the selected date range.
        
    </p>


                    </div>
                </section>

                
    
        
        
            <div id="mobile_pos_2" data-ad="mobile_pos_2" class="mobile_pos_2 lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_pos_2&#34;, &#34;sizes&#34;: [[300, 250]], &#34;is_mobile&#34;: true, &#34;targeting&#34;: {&#34;pos&#34;: &#34;2&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mobile_pos_2">
                Don't want to see ads? <a href="/subscribe" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Subscribe now</a>
            </p>
        
    


                <section
                    id="top-albums"
                    class="
                        grid-items-section
                        section-with-control
                        
                    "
                >
                    <h2>
                        <a class="text-colour-link"
                           href="/user/AlexisT/library/albums?date_preset=LAST_7_DAYS"
                           data-lazy-filter-more-link="albums_range"
                        >Top Albums</a>
                    </h2>
                    
                    
    
    
        <button
            class="
                disclose-trigger
                dropdown-menu-clickable-button
                section-control
            "
            aria-expanded="false"
            aria-controls="albums_range"
            data-disclose-select
            data-dropdown-layout-at="right-6 bottom"
        ><span class="sr-only">Sorted by: </span>Last 7 days</button>
    
    
    <ul
        class="
            
            dropdown-menu-clickable
            disclose-hide
            disclose-hide--js-only
        "
        id="albums_range"
        
            data-dropdown-layout-align="right"
        
    >
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                            dropdown-menu-clickable-item--selected
                        
                    "
                    href="/user/alexist?albums_date_preset=LAST_7_DAYS#top-albums"
                    
                        data-partial-href="/user/AlexisT/partial/albums?albums_date_preset=LAST_7_DAYS"
                    
                >Last 7 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?albums_date_preset=LAST_30_DAYS#top-albums"
                    
                        data-partial-href="/user/AlexisT/partial/albums?albums_date_preset=LAST_30_DAYS"
                    
                >Last 30 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?albums_date_preset=LAST_90_DAYS#top-albums"
                    
                        data-partial-href="/user/AlexisT/partial/albums?albums_date_preset=LAST_90_DAYS"
                    
                >Last 90 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?albums_date_preset=LAST_180_DAYS#top-albums"
                    
                        data-partial-href="/user/AlexisT/partial/albums?albums_date_preset=LAST_180_DAYS"
                    
                >Last 180 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?albums_date_preset=LAST_365_DAYS#top-albums"
                    
                        data-partial-href="/user/AlexisT/partial/albums?albums_date_preset=LAST_365_DAYS"
                    
                >Last 365 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?albums_date_preset=ALL#top-albums"
                    
                        data-partial-href="/user/AlexisT/partial/albums?albums_date_preset=ALL"
                    
                >All time</a>
            </li>
        
    </ul>


                    <div
                        class="buffer-standard"
                        data-require="components/lazy-filter"
                        data-lazy-filter-options="albums_range"
                    >
                        







    
    <p class="no-data-message">
        
            AlexisT hasn't listened to any music in the selected date range.
        
    </p>


                    </div>
                </section>
                <section
                    id="top-tracks"
                    class="
                        section-with-control
                        
                    "
                >
                    <h2>
                        <a class="text-colour-link"
                           href="/user/AlexisT/library/tracks?date_preset=LAST_7_DAYS"
                           data-lazy-filter-more-link="tracks_range"
                        >Top Tracks</a>
                    </h2>
                    
                    
    
    
        <button
            class="
                disclose-trigger
                dropdown-menu-clickable-button
                section-control
            "
            aria-expanded="false"
            aria-controls="tracks_range"
            data-disclose-select
            data-dropdown-layout-at="right-6 bottom"
        ><span class="sr-only">Sorted by: </span>Last 7 days</button>
    
    
    <ul
        class="
            
            dropdown-menu-clickable
            disclose-hide
            disclose-hide--js-only
        "
        id="tracks_range"
        
            data-dropdown-layout-align="right"
        
    >
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                            dropdown-menu-clickable-item--selected
                        
                    "
                    href="/user/alexist?tracks_date_preset=LAST_7_DAYS#top-tracks"
                    
                        data-partial-href="/user/AlexisT/partial/tracks?tracks_date_preset=LAST_7_DAYS"
                    
                >Last 7 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?tracks_date_preset=LAST_30_DAYS#top-tracks"
                    
                        data-partial-href="/user/AlexisT/partial/tracks?tracks_date_preset=LAST_30_DAYS"
                    
                >Last 30 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?tracks_date_preset=LAST_90_DAYS#top-tracks"
                    
                        data-partial-href="/user/AlexisT/partial/tracks?tracks_date_preset=LAST_90_DAYS"
                    
                >Last 90 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?tracks_date_preset=LAST_180_DAYS#top-tracks"
                    
                        data-partial-href="/user/AlexisT/partial/tracks?tracks_date_preset=LAST_180_DAYS"
                    
                >Last 180 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?tracks_date_preset=LAST_365_DAYS#top-tracks"
                    
                        data-partial-href="/user/AlexisT/partial/tracks?tracks_date_preset=LAST_365_DAYS"
                    
                >Last 365 days</a>
            </li>
        
            <li>
                <a
                    class="
                        dropdown-menu-clickable-item
                        
                    "
                    href="/user/alexist?tracks_date_preset=ALL#top-tracks"
                    
                        data-partial-href="/user/AlexisT/partial/tracks?tracks_date_preset=ALL"
                    
                >All time</a>
            </li>
        
    </ul>


                    <div
                        class="buffer-standard"
                        data-require="components/lazy-filter"
                        data-lazy-filter-options="tracks_range"
                    >
                        






    
    <p class="no-data-message">
        
            AlexisT hasn't listened to any music in the selected date range.
        
    </p>


                    </div>
                </section>
            

            
    
        
        
            <div id="mobile_pos_3" data-ad="mobile_pos_3" class="mobile_pos_3 lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_pos_3&#34;, &#34;sizes&#34;: [[300, 250], [320, 50]], &#34;is_mobile&#34;: true, &#34;targeting&#34;: {&#34;pos&#34;: &#34;3&#34;}}'></div>
        
        
    


            
                
    <div
        id="shoutbox"
        class="lazy-shoutbox section-with-separator buffer-standard-ignore-hidden "
        data-require="components/lazy-load-v2"
        data-lazy-load-content="/user/AlexisT/partial/shoutbox"
        data-lazy-load-error-message="Shoutbox could not be loaded, try reloading the page."
        data-lazy-load-when-on-screen
    ></div>

            
        </div>
        <div class="col-sidebar col-sidebar--long">
            
    
    

    
        
    
        <section class="stationlinks">
            <h2 class="stationlinks-header">Listen</h2>
            
                
    <ul class="stationlink-list">
        <li>
            
                
                    
    
        

        

        <button
            class="
                btn stationlink
                js-playlink-station
            "
            data-station-url="/player/station/user/AlexisT/library"
            data-analytics-action="StartStation"
            data-analytics-label="library"
            
                title="Listen to music AlexisT has scrobbled before"
            
        >
            
                        Play AlexisT's library
                    
        </button>
    

                
            
        </li>
        <li>
            
                
                    
    
        

        

        <button
            class="
                btn stationlink
                js-playlink-station
            "
            data-station-url="/player/station/user/AlexisT/mix"
            data-analytics-action="StartStation"
            data-analytics-label="mix"
            
                title="Listen to a mix of music AlexisT has scrobbled before and recommendations from Last.fm"
            
        >
            
                        Play AlexisT's mix
                    
        </button>
    

                
            
        </li>
        <li>
            
                
                    
    
        

        

        <button
            class="
                btn stationlink
                js-playlink-station
            "
            data-station-url="/player/station/user/AlexisT/recommended"
            data-analytics-action="StartStation"
            data-analytics-label="recommended"
            
                title="Listen to AlexisT's recommended music from Last.fm"
            
        >
            
                        Play AlexisT's recommendations
                    
        </button>
    

                
            
        </li>
    </ul>

            
        </section>
    

    
    
    
        
        
            <div id="mpu_top" data-ad="mpu_top" class="mpu_top lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;mpu_top&#34;, &#34;sizes&#34;: [[300, 250], [300, 600]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;adblock_message&#34;: true}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mpu">
                Don't want to see ads? <a href="/subscribe" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Subscribe now</a>
            </p>
        
    

    
    <section
        class="
            
                hidden-xs
            
        "
    >
        <h2>Listening Reports</h2>

        
            <a
                class="listening-report-promo listening-report-promo--week"
                href="/user/AlexisT/listening-report/week"
            >
                <span class="listening-report-promo-title">Last.week</span>
                <span class="listening-report-promo-date">
                    28 Jun — 4 Jul
                </span>
            </a>
        

        

        <a
            class="listening-report-promo listening-report-promo--year"
            href="/user/AlexisT/listening-report/year"
        >
            <span class="listening-report-promo-title">Last.year</span>
            <span class="listening-report-promo-date">2018</span>
        </a>
    </section>

    
    
    

    
    
        
        
            <div id="mobile_pos_4" data-ad="mobile_pos_4" class="mobile_pos_4 lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_pos_4&#34;, &#34;sizes&#34;: [[300, 250], [320, 50]], &#34;is_mobile&#34;: true, &#34;targeting&#34;: {&#34;pos&#34;: &#34;4&#34;}}'></div>
        
        
    

    
    
        
            
        
        <div class="related-content" id="taboola-right-rail-thumbnails" data-require="ads/taboola" data-taboola-layout="None"></div>
    

    
    <div class="related-ads">
            <div
                
                    data-searchlinks-desktop
                
            ></div>
        </div>

    
    
        
        
            <div id="mpu_bottom" data-ad="mpu_bottom" class="mpu_bottom lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;mpu_bottom&#34;, &#34;sizes&#34;: [[300, 250]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;bottom&#34;}}'></div>
        
        
    


        </div>
    </div>


    </div>


        


        
    <div class="container">
        
    
        
        
            <div id="leader_bottom" data-ad="leader_bottom" class="leader_bottom lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;leader_bottom&#34;, &#34;sizes&#34;: [[728, 90], [970, 66], [728, 92]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;bottom&#34;}}'></div>
        
        
    

    </div>


        
            <div class="container page-content visible-xs">
                
    <div class="related-ads">
            <div
                
                    data-searchlinks-mobile
                
            ></div>
        </div>

            </div>
        
    </div>

    <div id="qa-page-load"></div>

    
    
        
            
    
    
    
    <div
        class="lazy-features-footer"
        data-require="components/lazy-load-v2"
        data-lazy-load-content="/features/partial/footer"
        data-lazy-load-when-on-screen
    ></div>

        
    


    
    <footer class="footer" itemscope itemtype="http://schema.org/Organization">
        <link itemprop="url" href="https://www.last.fm">

        <div class="footer-top">
            <div class="container">
                <div class="footer-top-row">
                    <div class="footer-top-col">
                        <h2 class="footer-heading">Company</h2>
                        <ul class="footer-links">
                            <li><a href="/about">About Last.fm</a></li>
                            <li><a href="/about/contact">Contact Us</a></li>
                            <li><a href="/about/jobs">Jobs</a></li>
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Help</h2>
                        <ul class="footer-links">
                            <li><a href="/about/trackmymusic">Track My Music</a></li>
                            
                                <li><a href="https://getsatisfaction.com/lastfm" target="_BLANK">Community Support</a></li>
                            
                            <li><a href="/help/guidelines">Community Guidelines</a></li>
                            
                                <li><a href="http://cbsi.force.com/CBSi/lastfm" target="_BLANK">Help</a></li>
                            
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Goodies</h2>
                        <ul class="footer-links">
                            <li><a href="/about/trackmymusic">Download Scrobbler</a></li>
                            <li><a href="/api">Developer API</a></li>
                            <li><a href="/music/+free-music-downloads">Free Music Downloads</a></li>
                            <li><a href="https://store.last.fm">Merchandise</a></li>
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Account</h2>
                        <ul class="footer-links">
                            
                                <li><a href="/join">Join</a></li>
                                <li><a href="https://secure.last.fm/login">Login</a></li>
                                <li><a href="/subscribe">Subscribe</a></li>
                            
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Follow Us</h2>
                        <ul class="footer-links">
                            <li><a itemprop="sameAs" target="_blank" href="https://www.facebook.com/lastfm">Facebook</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://twitter.com/lastfm">Twitter</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://www.instagram.com/last_fm">Instagram</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://www.youtube.com/user/lastfm">YouTube</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-xs-12 col-sm-9">
                        <ul id="language-selector">
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                            footer-language--active
                                        
                                    "
                                >
                                    
                                        <strong>English</strong><span class="sr-only">current language</span>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='zy9C5o3ERQXqsUAK4PnxhxXYlEXr8Ar2' />
                                            <input type="hidden" name="language" value="de" />
                                            <button class="mimic-link" name="de" type="submit">Deutsch</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='zy9C5o3ERQXqsUAK4PnxhxXYlEXr8Ar2' />
                                            <input type="hidden" name="language" value="es" />
                                            <button class="mimic-link" name="es" type="submit">Español</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='zy9C5o3ERQXqsUAK4PnxhxXYlEXr8Ar2' />
                                            <input type="hidden" name="language" value="fr" />
                                            <button class="mimic-link" name="fr" type="submit">Français</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='zy9C5o3ERQXqsUAK4PnxhxXYlEXr8Ar2' />
                                            <input type="hidden" name="language" value="it" />
                                            <button class="mimic-link" name="it" type="submit">Italiano</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='zy9C5o3ERQXqsUAK4PnxhxXYlEXr8Ar2' />
                                            <input type="hidden" name="language" value="ja" />
                                            <button class="mimic-link" name="ja" type="submit">日本語</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='zy9C5o3ERQXqsUAK4PnxhxXYlEXr8Ar2' />
                                            <input type="hidden" name="language" value="pl" />
                                            <button class="mimic-link" name="pl" type="submit">Polski</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='zy9C5o3ERQXqsUAK4PnxhxXYlEXr8Ar2' />
                                            <input type="hidden" name="language" value="pt" />
                                            <button class="mimic-link" name="pt" type="submit">Português</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='zy9C5o3ERQXqsUAK4PnxhxXYlEXr8Ar2' />
                                            <input type="hidden" name="language" value="ru" />
                                            <button class="mimic-link" name="ru" type="submit">Русский</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='zy9C5o3ERQXqsUAK4PnxhxXYlEXr8Ar2' />
                                            <input type="hidden" name="language" value="sv" />
                                            <button class="mimic-link" name="sv" type="submit">Svenska</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='zy9C5o3ERQXqsUAK4PnxhxXYlEXr8Ar2' />
                                            <input type="hidden" name="language" value="tr" />
                                            <button class="mimic-link" name="tr" type="submit">Türkçe</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='zy9C5o3ERQXqsUAK4PnxhxXYlEXr8Ar2' />
                                            <input type="hidden" name="language" value="zh" />
                                            <button class="mimic-link" name="zh" type="submit">简体中文</button>
                                        </form>
                                    
                                </li>
                            
                        </ul>
                        
                        <p class="footer-timezone">
                            
                                Time zone: <strong>Pacific/Noumea</strong>
                            
                        </p>

                        <div class="footer-legal">
                            <ul>
                                <li class="footer-legal-item"><a rel="nofollow" href="http://www.cbsinteractive.com/">CBS Interactive</a> © 2019 <span itemprop="name">Last.fm</span> Ltd. All rights reserved</li>
                                <li class="footer-legal-item"><a href="/legal/terms">Terms of Use</a></li>
                                <li class="footer-legal-item"><a href="/legal/privacy">Privacy Policy</a></li>
                                <li class="footer-legal-item"><a href="/legal">Legal Policies</a></li>
                                <li class="footer-legal-item"><a target="_blank" href="http://www.cbsinteractive.com/careers">Jobs at CBSi</a></li>
                                <li class="footer-legal-item"><a rel="nofollow" href="http://www.last.fm">Last.fm Music</a></li>
                            </ul>
                            
                        </div>
                    </div>


                    <div class="logo col-xs-12 col-sm-3">
                        <p>Audioscrobbler</p>
                        <img src="/static/images/footer_logo@2x.49ca51948b0a.png" width="37" height="20" alt="Last.fm 'as' logo">
                    </div>
                </div>
            </div>
        </div>

        <div class="feedback-message">
    <div class="feedback-message-inner">
        <p>
            <span class="hidden-xs">
                Let us know what you think of the Last.fm website.
            </span>
            <a href="http://cbsi.force.com/CBSi/template_lfmfbk?p_userid=" target="_blank">Leave feedback</a>
        </p>
    </div>
</div>
    </footer>


    <section class="debug-log">
    <h2 class="debug-log-heading">API Calls</h2>
    
</section>


        </div>
        
    
        <div
            data-ads-beacon
            data-ads-targeting='{&#34;geo&#34;: &#34;NC&#34;, &#34;lang&#34;: &#34;en&#34;, &#34;beta&#34;: &#34;yes&#34;, &#34;ptype&#34;: &#34;user_door&#34;, &#34;ar&#34;: &#34;fergie,gwenstefani,seanpaul,nelly,thepussycatdolls,destiny&#39;schild,blackeyedpeas,vladimirashkenazy,francispoulenc,alexanderscriabin&#34;}'
            data-ads-unitname='/8264/row-lastfm/user/overview'
            data-ads-unitname-mobile='/8264/maw-lastfm/user/overview'
        ></div>
    

    </div>

    
        <div
            data-require="player/providers/spotify/spotify-provider"
            data-spotify-auth-modal="/player/modal/spotify"
            data-spotify-premium-modal="/player/modal/spotify-premium"
            data-spotify-inactive-modal="/player/modal/spotify-inactive"
            data-spotify-initial-device-modal="/player/modal/spotify-initial-device-detection"
        ></div>

        <div
            data-require="player/providers/youtube/youtube-provider"
            class="video-player"
            aria-hidden="true"
            id="youtube-video"
        >
            <div class="video-player-inner-wrap">
                <div class="video-player-embed js-player"></div>
                <button class="
                    video-player-close
                    js-close-player
                ">Close</button>
            </div>
        </div>
    

    
        
    


        
            
        
        
            
    
        
        
            <div id="intromercial" data-ad="intromercial" class="intromercial lastfm-ad" data-ads-placement='{&#34;id&#34;: &#34;intromercial&#34;, &#34;out_of_page&#34;: true}'></div>
        
        
    

            
    
        
        
            <div id="mobile_intromercial" data-ad="mobile_intromercial" class="mobile_intromercial lastfm-ad-mobile" data-ads-placement='{&#34;id&#34;: &#34;mobile_intromercial&#34;, &#34;is_mobile&#34;: true, &#34;out_of_page&#34;: true}'></div>
        
        
    

        

        <script class="js-modal-template" type="text/template">
            <div class="modal-dialog" role="dialog" aria-labelledby="modal-label">
                <div class="modal-content">
                    <button class="modal-dismiss js-close">Close</button>
                    <h2
                        id="modal-label"
                        class="modal-title js-modal-title"
                    ></h2>
                    <div class="modal-body js-modal-body"></div>
                </div>
            </div>
        </script>

        
        
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--adfree
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Browse ad-free</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/subscribe"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageAdfree"
            >Find out more</a>
            <a
                href="/subscribe"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageAdfree"
            ></a>
        </section>
    </div></div>

            </script>
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--support
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Show your support</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/subscribe"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageSupport"
            >Find out more</a>
            <a
                href="/subscribe"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageSupport"
            ></a>
        </section>
    </div></div>

            </script>
            <script class="js-adblock-message-template" type="text/template">
                
    
    <div><div>
        <section class="
            adblock-message
            adblock-message--benefits
            link-block
            js-link-block
        ">
            <p class="adblock-message-body">
                
                    <strong>Get exclusive benefits</strong> with a premium Last.fm account
                
            </p>
            
            <a
                class="adblock-message-button link-block-target"
                href="/subscribe"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageBenefits"
            >Find out more</a>
            <a
                href="/subscribe"
                class="
                    js-link-block-cover-link
                    link-block-cover-link
                "
                tabindex="-1"
                aria-hidden="true"
                data-analytics-action="SubscribeClick"
                data-analytics-label="AdblockMessageBenefits"
            ></a>
        </section>
    </div></div>

            </script>
        

        <script>
            window.lfmDomReadyCallback && window.lfmDomReadyCallback();
            window.lfmDomReady = true;
        </script>
        
            <link href="/static/styles/build/b7d6ffed70.b7d6ffed7016.css" rel="preload" as="style" charset="utf-8" data-require="shim/rel-preload">
        
    </body>
</html>
    http_version: 
  recorded_at: Fri, 12 Jul 2019 08:27:42 GMT
recorded_with: VCR 5.0.0
