---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/user/foo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Language:
      - en
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Frame-Options:
      - SAMEORIGIN
      X-Pjax-Url:
      - https://www.last.fm/user/foo
      Content-Security-Policy:
      - upgrade-insecure-requests;
      X-Served-By:
      - ws342
      Vary:
      - Accept-Encoding
      - User-Agent
      - cookie
      Expires:
      - Thu, 04 Jan 2018 04:05:57 GMT
      Cache-Control:
      - max-age=0, no-cache, no-store
      Pragma:
      - no-cache
      Date:
      - Thu, 04 Jan 2018 04:05:57 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Set-Cookie:
      - csrftoken=hGm3L1lQsTxCdUWxlDU12tiYQ4jUCiFw; expires=Thu, 03-Jan-2019 04:05:57
        GMT; Max-Age=31449600; Path=/; secure
      - sessionid=.eJxFjUsKwjAQhu8y6wbiEA3pAVRwo65EkTImf23QRmlqKYh3VxBx_z2ehPGOLrZIfRUDlbTaT9a4NHY7IO3mbrG0s_a8oYIyco639KU8pDZOgmKvvTJO18qdWBTbwMbCsEz542D010dAqP6XTOXhWNAgXZT-19OvNw0mLM8:1eWwmz:K0MyfZwX6sub5GlfhfLFyE_q7ck;
        Domain=.last.fm; expires=Fri, 04-Jan-2019 04:05:57 GMT; httponly; Max-Age=31536000;
        Path=/; secure
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        


<!doctype html>
<html
    lang="en"
    class="no-js playbar-masthead-release-shim"
>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge"><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"UwYPV15QGwYFXFlXDgU="};window.NREUM||(NREUM={}),__nr_require=function(t,n,e){function r(e){if(!n[e]){var o=n[e]={exports:{}};t[e][0].call(o.exports,function(n){var o=t[e][1][n];return r(o||n)},o,o.exports)}return n[e].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<e.length;o++)r(e[o]);return r}({1:[function(t,n,e){function r(t){try{s.console&&console.log(t)}catch(n){}}var o,i=t("ee"),a=t(15),s={};try{o=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(s.console=!0,o.indexOf("dev")!==-1&&(s.dev=!0),o.indexOf("nr_dev")!==-1&&(s.nrDev=!0))}catch(c){}s.nrDev&&i.on("internal-error",function(t){r(t.stack)}),s.dev&&i.on("fn-err",function(t,n,e){r(e.stack)}),s.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(s,function(t,n){return t}).join(", ")))},{}],2:[function(t,n,e){function r(t,n,e,r,s){try{p?p-=1:o(s||new UncaughtException(t,n,e),!0)}catch(f){try{i("ierr",[f,c.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,n,e){this.message=t||"Uncaught error with no additional information",this.sourceURL=n,this.line=e}function o(t,n){var e=n?null:c.now();i("err",[t,e])}var i=t("handle"),a=t(16),s=t("ee"),c=t("loader"),f=t("gos"),u=window.onerror,d=!1,l="nr@seenError",p=0;c.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(h){"stack"in h&&(t(8),t(7),"addEventListener"in window&&t(5),c.xhrWrappable&&t(9),d=!0)}s.on("fn-start",function(t,n,e){d&&(p+=1)}),s.on("fn-err",function(t,n,e){d&&!e[l]&&(f(e,l,function(){return!0}),this.thrown=!0,o(e))}),s.on("fn-end",function(){d&&!this.thrown&&p>0&&(p-=1)}),s.on("internal-error",function(t){i("ierr",[t,c.now(),!0])})},{}],3:[function(t,n,e){t("loader").features.ins=!0},{}],4:[function(t,n,e){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var o=t("ee"),i=t("handle"),a=t(8),s=t(7),c="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",l="resource",p="-start",h="-end",m="fn"+p,w="fn"+h,v="bstTimer",y="pushState",g=t("loader");g.features.stn=!0,t(6);var b=NREUM.o.EV;o.on(m,function(t,n){var e=t[0];e instanceof b&&(this.bstStart=g.now())}),o.on(w,function(t,n){var e=t[0];e instanceof b&&i("bst",[e,n,this.bstStart,g.now()])}),a.on(m,function(t,n,e){this.bstStart=g.now(),this.bstType=e}),a.on(w,function(t,n){i(v,[n,this.bstStart,g.now(),this.bstType])}),s.on(m,function(){this.bstStart=g.now()}),s.on(w,function(t,n){i(v,[n,this.bstStart,g.now(),"requestAnimationFrame"])}),o.on(y+p,function(t){this.time=g.now(),this.startPath=location.pathname+location.hash}),o.on(y+h,function(t){i("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+c]?window.performance[f](u,function(t){i(d,[window.performance.getEntriesByType(l)]),window.performance["c"+c]()},!1):window.performance[f]("webkit"+u,function(t){i(d,[window.performance.getEntriesByType(l)]),window.performance["webkitC"+c]()},!1)),document[f]("scroll",r,{passive:!0}),document[f]("keypress",r,!1),document[f]("click",r,!1)}},{}],5:[function(t,n,e){function r(t){for(var n=t;n&&!n.hasOwnProperty(u);)n=Object.getPrototypeOf(n);n&&o(n)}function o(t){s.inPlace(t,[u,d],"-",i)}function i(t,n){return t[1]}var a=t("ee").get("events"),s=t(18)(a,!0),c=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";n.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(o(window),o(f.prototype)),a.on(u+"-start",function(t,n){var e=t[1],r=c(e,"nr@wrapped",function(){function t(){if("function"==typeof e.handleEvent)return e.handleEvent.apply(e,arguments)}var n={object:t,"function":e}[typeof e];return n?s(n,"fn-",null,n.name||"anonymous"):e});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],6:[function(t,n,e){var r=t("ee").get("history"),o=t(18)(r);n.exports=r,o.inPlace(window.history,["pushState","replaceState"],"-")},{}],7:[function(t,n,e){var r=t("ee").get("raf"),o=t(18)(r),i="equestAnimationFrame";n.exports=r,o.inPlace(window,["r"+i,"mozR"+i,"webkitR"+i,"msR"+i],"raf-"),r.on("raf-start",function(t){t[0]=o(t[0],"fn-")})},{}],8:[function(t,n,e){function r(t,n,e){t[0]=a(t[0],"fn-",null,e)}function o(t,n,e){this.method=e,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,e)}var i=t("ee").get("timer"),a=t(18)(i),s="setTimeout",c="setInterval",f="clearTimeout",u="-start",d="-";n.exports=i,a.inPlace(window,[s,"setImmediate"],s+d),a.inPlace(window,[c],c+d),a.inPlace(window,[f,"clearImmediate"],f+d),i.on(c+u,r),i.on(s+u,o)},{}],9:[function(t,n,e){function r(t,n){d.inPlace(n,["onreadystatechange"],"fn-",s)}function o(){var t=this,n=u.context(t);t.readyState>3&&!n.resolved&&(n.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,y,"fn-",s)}function i(t){g.push(t),h&&(x?x.then(a):w?w(a):(E=-E,O.data=E))}function a(){for(var t=0;t<g.length;t++)r([],g[t]);g.length&&(g=[])}function s(t,n){return n}function c(t,n){for(var e in t)n[e]=t[e];return n}t(5);var f=t("ee"),u=f.get("xhr"),d=t(18)(u),l=NREUM.o,p=l.XHR,h=l.MO,m=l.PR,w=l.SI,v="readystatechange",y=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],g=[];n.exports=u;var b=window.XMLHttpRequest=function(t){var n=new p(t);try{u.emit("new-xhr",[n],n),n.addEventListener(v,o,!1)}catch(e){try{u.emit("internal-error",[e])}catch(r){}}return n};if(c(p,b),b.prototype=p.prototype,d.inPlace(b.prototype,["open","send"],"-xhr-",s),u.on("send-xhr-start",function(t,n){r(t,n),i(n)}),u.on("open-xhr-start",r),h){var x=m&&m.resolve();if(!w&&!m){var E=1,O=document.createTextNode(E);new h(a).observe(O,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===v||a()})},{}],10:[function(t,n,e){function r(t){var n=this.params,e=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<d;r++)t.removeEventListener(u[r],this.listener,!1);if(!n.aborted){if(e.duration=a.now()-this.startTime,4===t.readyState){n.status=t.status;var i=o(t,this.lastSize);if(i&&(e.rxSize=i),this.sameOrigin){var c=t.getResponseHeader("X-NewRelic-App-Data");c&&(n.cat=c.split(", ").pop())}}else n.status=0;e.cbTime=this.cbTime,f.emit("xhr-done",[t],t),s("xhr",[n,e,this.startTime])}}}function o(t,n){var e=t.responseType;if("json"===e&&null!==n)return n;var r="arraybuffer"===e||"blob"===e||"json"===e?t.response:t.responseText;return h(r)}function i(t,n){var e=c(n),r=t.params;r.host=e.hostname+":"+e.port,r.pathname=e.pathname,t.sameOrigin=e.sameOrigin}var a=t("loader");if(a.xhrWrappable){var s=t("handle"),c=t(11),f=t("ee"),u=["load","error","abort","timeout"],d=u.length,l=t("id"),p=t(14),h=t(13),m=window.XMLHttpRequest;a.features.xhr=!0,t(9),f.on("new-xhr",function(t){var n=this;n.totalCbs=0,n.called=0,n.cbTime=0,n.end=r,n.ended=!1,n.xhrGuids={},n.lastSize=null,p&&(p>34||p<10)||window.opera||t.addEventListener("progress",function(t){n.lastSize=t.loaded},!1)}),f.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),f.on("open-xhr-end",function(t,n){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&n.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),f.on("send-xhr-start",function(t,n){var e=this.metrics,r=t[0],o=this;if(e&&r){var i=h(r);i&&(e.txSize=i)}this.startTime=a.now(),this.listener=function(t){try{"abort"===t.type&&(o.params.aborted=!0),("load"!==t.type||o.called===o.totalCbs&&(o.onloadCalled||"function"!=typeof n.onload))&&o.end(n)}catch(e){try{f.emit("internal-error",[e])}catch(r){}}};for(var s=0;s<d;s++)n.addEventListener(u[s],this.listener,!1)}),f.on("xhr-cb-time",function(t,n,e){this.cbTime+=t,n?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof e.onload||this.end(e)}),f.on("xhr-load-added",function(t,n){var e=""+l(t)+!!n;this.xhrGuids&&!this.xhrGuids[e]&&(this.xhrGuids[e]=!0,this.totalCbs+=1)}),f.on("xhr-load-removed",function(t,n){var e=""+l(t)+!!n;this.xhrGuids&&this.xhrGuids[e]&&(delete this.xhrGuids[e],this.totalCbs-=1)}),f.on("addEventListener-end",function(t,n){n instanceof m&&"load"===t[0]&&f.emit("xhr-load-added",[t[1],t[2]],n)}),f.on("removeEventListener-end",function(t,n){n instanceof m&&"load"===t[0]&&f.emit("xhr-load-removed",[t[1],t[2]],n)}),f.on("fn-start",function(t,n,e){n instanceof m&&("onload"===e&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=a.now()))}),f.on("fn-end",function(t,n){this.xhrCbStart&&f.emit("xhr-cb-time",[a.now()-this.xhrCbStart,this.onload,n],n)})}},{}],11:[function(t,n,e){n.exports=function(t){var n=document.createElement("a"),e=window.location,r={};n.href=t,r.port=n.port;var o=n.href.split("://");!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=n.hostname||e.hostname,r.pathname=n.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname);var i=!n.protocol||":"===n.protocol||n.protocol===e.protocol,a=n.hostname===document.domain&&n.port===e.port;return r.sameOrigin=i&&(!n.hostname||a),r}},{}],12:[function(t,n,e){function r(){}function o(t,n,e){return function(){return i(t,[f.now()].concat(s(arguments)),n?null:this,e),n?void 0:this}}var i=t("handle"),a=t(15),s=t(16),c=t("ee").get("tracer"),f=t("loader"),u=NREUM;"undefined"==typeof window.newrelic&&(newrelic=u);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],l="api-",p=l+"ixn-";a(d,function(t,n){u[n]=o(l+n,!0,"api")}),u.addPageAction=o(l+"addPageAction",!0),u.setCurrentRouteName=o(l+"routeName",!0),n.exports=newrelic,u.interaction=function(){return(new r).get()};var h=r.prototype={createTracer:function(t,n){var e={},r=this,o="function"==typeof n;return i(p+"tracer",[f.now(),t,e],r),function(){if(c.emit((o?"":"no-")+"fn-start",[f.now(),r,o],e),o)try{return n.apply(this,arguments)}catch(t){throw c.emit("fn-err",[arguments,this,t],e),t}finally{c.emit("fn-end",[f.now()],e)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,n){h[n]=o(p+n)}),newrelic.noticeError=function(t){"string"==typeof t&&(t=new Error(t)),i("err",[t,f.now()])}},{}],13:[function(t,n,e){n.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(n){return}}}},{}],14:[function(t,n,e){var r=0,o=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);o&&(r=+o[1]),n.exports=r},{}],15:[function(t,n,e){function r(t,n){var e=[],r="",i=0;for(r in t)o.call(t,r)&&(e[i]=n(r,t[r]),i+=1);return e}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],16:[function(t,n,e){function r(t,n,e){n||(n=0),"undefined"==typeof e&&(e=t?t.length:0);for(var r=-1,o=e-n||0,i=Array(o<0?0:o);++r<o;)i[r]=t[n+r];return i}n.exports=r},{}],17:[function(t,n,e){n.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],18:[function(t,n,e){function r(t){return!(t&&t instanceof Function&&t.apply&&!t[a])}var o=t("ee"),i=t(16),a="nr@original",s=Object.prototype.hasOwnProperty,c=!1;n.exports=function(t,n){function e(t,n,e,o){function nrWrapper(){var r,a,s,c;try{a=this,r=i(arguments),s="function"==typeof e?e(r,a):e||{}}catch(f){l([f,"",[r,a,o],s])}u(n+"start",[r,a,o],s);try{return c=t.apply(a,r)}catch(d){throw u(n+"err",[r,a,d],s),d}finally{u(n+"end",[r,a,c],s)}}return r(t)?t:(n||(n=""),nrWrapper[a]=t,d(t,nrWrapper),nrWrapper)}function f(t,n,o,i){o||(o="");var a,s,c,f="-"===o.charAt(0);for(c=0;c<n.length;c++)s=n[c],a=t[s],r(a)||(t[s]=e(a,f?s+o:o,i,s))}function u(e,r,o){if(!c||n){var i=c;c=!0;try{t.emit(e,r,o,n)}catch(a){l([a,e,r,o])}c=i}}function d(t,n){if(Object.defineProperty&&Object.keys)try{var e=Object.keys(t);return e.forEach(function(e){Object.defineProperty(n,e,{get:function(){return t[e]},set:function(n){return t[e]=n,n}})}),n}catch(r){l([r])}for(var o in t)s.call(t,o)&&(n[o]=t[o]);return n}function l(n){try{t.emit("internal-error",n)}catch(e){}}return t||(t=o),e.inPlace=f,e.flag=a,e}},{}],ee:[function(t,n,e){function r(){}function o(t){function n(t){return t&&t instanceof r?t:t?c(t,s,i):i()}function e(e,r,o,i){if(!l.aborted||i){t&&t(e,r,o);for(var a=n(o),s=h(e),c=s.length,f=0;f<c;f++)s[f].apply(a,r);var d=u[y[e]];return d&&d.push([g,e,r,a]),a}}function p(t,n){v[t]=h(t).concat(n)}function h(t){return v[t]||[]}function m(t){return d[t]=d[t]||o(e)}function w(t,n){f(t,function(t,e){n=n||"feature",y[e]=n,n in u||(u[n]=[])})}var v={},y={},g={on:p,emit:e,get:m,listeners:h,context:n,buffer:w,abort:a,aborted:!1};return g}function i(){return new r}function a(){(u.api||u.feature)&&(l.aborted=!0,u=l.backlog={})}var s="nr@context",c=t("gos"),f=t(15),u={},d={},l=n.exports=o();l.backlog=u},{}],gos:[function(t,n,e){function r(t,n,e){if(o.call(t,n))return t[n];var r=e();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,n,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[n]=r,r}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],handle:[function(t,n,e){function r(t,n,e,r){o.buffer([t],r),o.emit(t,n,e)}var o=t("ee").get("handle");n.exports=r,r.ee=o},{}],id:[function(t,n,e){function r(t){var n=typeof t;return!t||"object"!==n&&"function"!==n?-1:t===window?0:a(t,i,function(){return o++})}var o=1,i="nr@id",a=t("gos");n.exports=r},{}],loader:[function(t,n,e){function r(){if(!x++){var t=b.info=NREUM.info,n=l.getElementsByTagName("script")[0];if(setTimeout(u.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&n))return u.abort();f(y,function(n,e){t[n]||(t[n]=e)}),c("mark",["onload",a()+b.offset],null,"api");var e=l.createElement("script");e.src="https://"+t.agent,n.parentNode.insertBefore(e,n)}}function o(){"complete"===l.readyState&&i()}function i(){c("mark",["domContent",a()+b.offset],null,"api")}function a(){return E.exists&&performance.now?Math.round(performance.now()):(s=Math.max((new Date).getTime(),s))-b.offset}var s=(new Date).getTime(),c=t("handle"),f=t(15),u=t("ee"),d=window,l=d.document,p="addEventListener",h="attachEvent",m=d.XMLHttpRequest,w=m&&m.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:m,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var v=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1071.min.js"},g=m&&w&&w[p]&&!/CriOS/.test(navigator.userAgent),b=n.exports={offset:s,now:a,origin:v,features:{},xhrWrappable:g};t(12),l[p]?(l[p]("DOMContentLoaded",i,!1),d[p]("load",r,!1)):(l[h]("onreadystatechange",o),d[h]("onload",r)),c("mark",["firstbyte",s],null,"api");var x=0,E=t(17)},{}]},{},["loader",2,10,4,3]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"licenseKey":"0ed0ce50b0","queueTime":0,"applicationTime":592,"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","agent":"","applicationID":"5588594","transactionName":"Y1BRbUUFWkMEWxYMV1oadUxZB0BZClZNCV5ZG0RcVUpDRxIWAxVIRxtGSlIWGkYMXRUWFllUWlcNMUdVF3cUAEpCXFZOGQNRRA=="}</script>
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title aria-live="assertive">Foo’s Music Profile — Users at Last.fm</title>

        
            
            
            
    <link rel="canonical" href="https://www.last.fm/user/foo" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="en" href="https://www.last.fm/user/foo" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="de" href="https://www.last.fm/de/user/foo" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="es" href="https://www.last.fm/es/user/foo" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="fr" href="https://www.last.fm/fr/user/foo" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="it" href="https://www.last.fm/it/user/foo" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="ja" href="https://www.last.fm/ja/user/foo" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="pl" href="https://www.last.fm/pl/user/foo" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="pt" href="https://www.last.fm/pt/user/foo" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="ru" href="https://www.last.fm/ru/user/foo" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="sv" href="https://www.last.fm/sv/user/foo" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="tr" href="https://www.last.fm/tr/user/foo" data-replaceable-head-tag />
    
        <link rel="alternate" hreflang="zh" href="https://www.last.fm/zh/user/foo" data-replaceable-head-tag />
    
    <link rel="alternate" hreflang="x-default" href="https://www.last.fm/user/foo" data-replaceable-head-tag />

            
    <meta name="description" content="Listen to music from Foo’s library (214 tracks played). Get your own music profile at Last.fm, the world’s largest social music platform." data-replaceable-head-tag>

    <meta property="og:title"           content="Foo’s Music Profile — Users at Last.fm" data-replaceable-head-tag>
    <meta property="og:description"     content="Listen to music from Foo’s library (214 tracks played). Get your own music profile at Last.fm, the world’s largest social music platform." data-replaceable-head-tag>
    <meta property="og:type"            content="website" data-replaceable-head-tag>
    <meta property="og:site_name"       content="Last.fm" data-replaceable-head-tag>
    <meta property="og:url"             content="https://www.last.fm/user/foo" data-replaceable-head-tag />
    <meta property="og:image"           content="https://lastfm-img2.akamaized.net/i/u/ar0/818148bf682d429dc215c1705eb27b98" data-replaceable-head-tag>
    <meta property="og:image:width"     content="1200" data-replaceable-head-tag>
    <meta property="og:image:height"    content="630" data-replaceable-head-tag>
    <meta property="fb:app_id"          content="192959324047861" data-replaceable-head-tag />

    <meta name="twitter:title"          content="Foo’s Music Profile — Users at Last.fm" data-replaceable-head-tag>
    <meta name="twitter:description"    content="Listen to music from Foo’s library (214 tracks played). Get your own music profile at Last.fm, the world’s largest social music platform." data-replaceable-head-tag>
    <meta name="twitter:image"          content="https://lastfm-img2.akamaized.net/i/u/ar0/818148bf682d429dc215c1705eb27b98" data-replaceable-head-tag>
    <meta name="twitter:card"           content="summary" data-replaceable-head-tag>
    <meta name="twitter:site"           content="@lastfm" data-replaceable-head-tag>

    

        

        

        <script>(function(e) { e.className = e.className.replace(/\bno-js\b/,'js'); })(document.documentElement)</script>

        
            <script src="https://www.google-analytics.com/cx/api.js"></script>
            <script>
                cxApi.setChosenVariation(
                    0,
                    'KZ1Pekh7RvenXF9GH76mgQ'
                );
            </script>
        

        
        <script id="initial-tealium-data" data-tealium-data="{&#34;test&#34;: &#34;us-off-mobile_nav&#34;, &#34;pageType&#34;: &#34;user_door&#34;, &#34;pageViewGuid&#34;: &#34;7c9a6353-20af-4430-83ad-10abbfa503b2&#34;, &#34;ipGeo&#34;: &#34;NC&#34;, &#34;userType&#34;: &#34;anon&#34;, &#34;siteSection&#34;: &#34;user&#34;, &#34;nativeEventTracking&#34;: true, &#34;pageName&#34;: &#34;user/overview&#34;, &#34;deviceType&#34;: &#34;desktop&#34;, &#34;userState&#34;: &#34;not authenticated&#34;}"></script>
        <script>
            var initialTealiumElement = document.getElementById('initial-tealium-data');
            window.utag_data = JSON.parse(initialTealiumElement.getAttribute('data-tealium-data'));
        </script>

        <script async src="https://tags.tiqcdn.com/utag/cbsi/lastfmsite/prod/utag.js"></script>

        <link rel="icon" href="/static/images/favicon.702b239b6194.ico">

        <link rel="stylesheet" href="/static/styles/build/0c8f0c510b.0c8f0c510b27.css" data-stylesheet-name="defaults" charset="utf-8">
        <link rel="stylesheet" href="/static/styles/build/1b8d76bda8.1b8d76bda8bd.css" data-stylesheet-name="app" charset="utf-8">
        

        
    
    <script async data-main="/static/js-build/init.e78e1b44bfbb" src="/static/js-build/lib/require/require.5cf2b9293a0e.js"></script>


        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
    	<script type="text/javascript">var z="function"==typeof Object.defineProperties?Object.defineProperty:function(l,r,g){if(g.get||g.set)throw new TypeError("ES3 does not support getters and setters.");l!=Array.prototype&&l!=Object.prototype&&(l[r]=g.value)},A="undefined"!=typeof window&&window===this?this:"undefined"!=typeof global&&null!=global?global:this;function B(){B=function(){};A.Symbol||(A.Symbol=D)}var E=0;function D(l){return"jscomp_symbol_"+(l||"")+E++}
function F(){B();var l=A.Symbol.iterator;l||(l=A.Symbol.iterator=A.Symbol("iterator"));"function"!=typeof Array.prototype[l]&&z(Array.prototype,l,{configurable:!0,writable:!0,value:function(){return G(this)}});F=function(){}}function G(l){var r=0;return H(function(){return r<l.length?{done:!1,value:l[r++]}:{done:!0}})}function H(l){F();l={next:l};l[A.Symbol.iterator]=function(){return this};return l}for(var L=A,M=["Array","from"],N=0;N<M.length-1;N++){var Q=M[N];Q in L||(L[Q]={});L=L[Q]}
var R=M[M.length-1],S=L[R],T=function(){return S?S:function(l,r,g){F();r=r?r:function(g){return g};var n=[],x=l[Symbol.iterator];if("function"==typeof x)for(l=x.call(l);!(x=l.next()).done;)n.push(r.call(g,x.value));else for(var x=l.length,k=0;k<x;k++)n.push(r.call(g,l[k]));return n}}();T!=S&&null!=T&&z(L,R,{configurable:!0,writable:!0,value:T});
(function(l,r){var g=function(){Array.prototype.indexOf||(Array.prototype.indexOf=function(f){for(var a=0;a<this.length;a++)if(this[a]===f)return a;return-1});return{aa:{},state:{Oa:{}},uid:null,lb:null,Aa:null,Hc:null,Kb:null,ib:null,qb:null,jb:null,Rb:!1,Ub:!1,Zc:{}}}();g.aa=l;var n=function(){var f={ya:null,Bb:0,Ja:0,Fb:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",lc:"abcdefghijklmnopqrstuvwxyz",bb:function(a){var b=Object.prototype.toString,c=/^\[object .+?Constructor\]$/,
e=typeof a;return"function"===e?!("prototype"in a):a&&"object"==e?c.test(b.call(a)):!1},Cc:function(){var a="iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";");if(navigator.platform)for(;a.length;)if(navigator.platform===a.pop())return!0;return!1},Ac:function(){var a=navigator.userAgent||navigator.vendor||window.opera;return-1<a.indexOf("FBAN")||-1<a.indexOf("FBAV")},Gc:function(){var a=navigator.userAgent||navigator.vendor||window.opera;return"[object OperaMini]"===Object.prototype.toString.call(window.operamini)||
-1<a.toLowerCase().indexOf("opera mini")},Fc:function(){return!!window.opr&&!!opr.addons||!!window.opera||0<=navigator.userAgent.indexOf(" OPR/")},Jb:function(){return"undefined"!==typeof InstallTrigger},fb:function(){return!!window.chrome&&!!window.chrome.webstore},Lb:function(){return!!navigator.userAgent.match(/Version\/[\d\.]+. Safari/)},Bc:function(){return!!k.documentMode},Cd:function(){return!f.Bc()&&!!window.StyleMedia},zd:function(){return(f.fb()||f.Fc())&&!!window.CSS},Ib:function(){return f.Gc()},
hb:function(){return 750>=(window.outerWidth||k.documentElement.clientWidth)},Dd:function(){return 768>(window.outerWidth||k.documentElement.clientWidth)},Mb:function(){return-1<(navigator.userAgent||navigator.vendor||window.opera).toLowerCase().indexOf("ucbrowser")},jd:function(a,b){for(var c=k.querySelectorAll(f.fb()?"::shadow style,::shadow link":"style,link"),e=0;e<c.length;e++)if(c[e].sheet&&c[e].sheet.cssRules)for(var d=c[e].sheet.cssRules,h=0;h<d.length;h++)if(/{\s*display:\s*none\s*!\s*important;\s*}/.test(d[h].cssText)&&
d.length>a&&d.length<b)return!0;return!1},la:function(a){return a&&"timeout"===a.message},Gb:function(a){var b=0,c,e;if(0==a.length)return b;for(e=0;e<a.length;e++)c=a.charCodeAt(e),b=(b<<5)-b+c,b&=b;return b},xc:function(a,b){var c=a.length;b^=c;for(var e=0,d;4<=c;)d=a.charCodeAt(e)&255|(a.charCodeAt(++e)&255)<<8|(a.charCodeAt(++e)&255)<<16|(a.charCodeAt(++e)&255)<<24,d=1540483477*(d&65535)+((1540483477*(d>>>16)&65535)<<16),d^=d>>>24,d=1540483477*(d&65535)+((1540483477*(d>>>16)&65535)<<16),b=1540483477*
(b&65535)+((1540483477*(b>>>16)&65535)<<16)^d,c-=4,++e;switch(c){case 3:b^=(a.charCodeAt(e+2)&255)<<16;case 2:b^=(a.charCodeAt(e+1)&255)<<8;case 1:b^=a.charCodeAt(e)&255,b=1540483477*(b&65535)+((1540483477*(b>>>16)&65535)<<16)}b^=b>>>13;b=1540483477*(b&65535)+((1540483477*(b>>>16)&65535)<<16);return(b^b>>>15)>>>0},Ha:function(a){"undefined"==typeof a&&(a=Math.floor(8*Math.random()+4));return f.lc.charAt(Math.floor(26*Math.random()))+Math.random().toString(36).substring(2,a+1)},ga:function(a){return a?
decodeURIComponent(k.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*"+encodeURIComponent(a).replace(/[\-\.\+\*]/g,"\\$\x26")+"\\s*\\\x3d\\s*([^;]*).*$)|^.*$"),"$1"))||null:null},yc:function(a){var b=this.ga(a);return b||(b=Math.random().toString(36).substring(2,13),this.ha(a,b,Infinity,"/"),this.ga(a))?b:""},ha:function(a,b,c,e,d,h){if(!a||/^(?:expires|max\-age|path|domain|secure)$/i.test(a))return!1;var f="";if(c)switch(c.constructor){case Number:f=Infinity==c?"; expires\x3dFri, 31 Dec 9999 23:59:59 GMT":
-1==c?"; expires\x3dThu, 01 Jan 1970 00:00:01 GMT;":"; max-age\x3d"+c;break;case String:f="; expires\x3d"+c;break;case Date:f="; expires\x3d"+c.toUTCString()}k.cookie=encodeURIComponent(a)+"\x3d"+encodeURIComponent(b)+f+(d?"; domain\x3d"+d:"")+(e?"; path\x3d"+e:"")+(h?"; secure":"");return!0},Ma:function(a,b,c,e){this.ha(a,0,-1,b,c,e)},vd:function(){var a=f.Ha();f.ha(a,"1","/",Infinity);var b="1"===f.ga(a);b&&f.Ma(a);return b},ba:function(a,b){var c="";if(window.getComputedStyle&&getComputedStyle(a))c=
getComputedStyle(a).getPropertyValue(b);else if(a.currentStyle)try{c=a.currentStyle[b]}catch(e){}return c},fc:function(a,b){a.parentNode.insertBefore(b,a);b.appendChild(a)},ta:function(a){a=a.getBoundingClientRect();return{top:a.top,bottom:a.bottom,left:a.left,right:a.right,width:"undefined"!==typeof a.width?a.width:a.right-a.left,height:"undefined"!==typeof a.height?a.height:a.bottom-a.top}},Bd:function(a,b){b=this.ta(b);a=this.ta(a);return b.right>=a.left&&b.left<=a.right&&b.bottom>=a.top&&b.top<=
a.bottom},Dc:function(a){a=this.ta(a);return f.Cc()?!0:0<=a.top&&0<=a.left&&a.right<=window.innerWidth&&a.bottom<=window.innerHeight},gb:function(a,b,c){var e=this.ta(a);b=b||0;c=c||0;if(e.width>b&&e.height>b)return!1;a=f.Pa(a);for(e=0;e<Math.min(100,a.length);e++)if(!f.gb(a[e],b,c+1))return!1;return!0},Ec:function(a){return"hidden"===this.ba(a,"visibility")||1>this.ba(a,"opacity")},Ad:function(a){var b=this.ta(a),c=b.width||a.getAttribute("width")||0,b=b.height||a.getAttribute("height")||0;return"none"!==
this.ba(a,"display")&&"hidden"!==this.ba(a,"visibility")&&0<(this.ba(a,"opacity")||1)&&0<c&&0<b},Pa:function(a,b){return b?[].slice.call(a.querySelectorAll(b)):[].slice.call(a.getElementsByTagName("*"))},nd:function(a,b){for(var c={},e=0;e<b.length;e++)c[b[e].toLowerCase()]=!0;return a.filter(function(a){return!c.hasOwnProperty(a.tagName.toLowerCase())})},Hd:function(a,b){return a&&a.tagName&&a.tagName.toLowerCase()===b},kd:function(a,b){window.fetch(a,{mode:"no-cors",redirect:"follow"}).then(function(){b(null,
!0)}).catch(function(a){b(a)})},addListener:function(a,b,c,e){a.addEventListener?a.addEventListener(b,c,e||!1):a.attachEvent?a.attachEvent("on"+b,c):this.na["on"+b]=c},dispatchEvent:function(a,b){k.createEvent?a.dispatchEvent(b):a.fireEvent("on"+b.md,b)},bd:function(a){for(var b=0,c=a.length,e=[];b<c;b++)e.push(a.charCodeAt(b));return e},vc:function(a){return(1<<a)-1},Tb:function(a,b,c){b=6-b;var e=8-b;return[c&f.vc(e),e,a<<b|c>>e]},btoa:function(a){var b=f.bd(unescape(encodeURIComponent(a)));a=[];
for(var c=f.Fb,e=0,d=0,h,p=0,g=b.length;p<g;p++)6==d?(d=0,a.push(c.charAt(e)),e=0,p--):(h=f.Tb(e,d,b[p]),e=h[0],d=h[1],a.push(c.charAt(h[2])));if(d)if(6==d)a.push(c.charAt(e));else switch(b=(6-d)/2,h=f.Tb(e,d,0),a.push(c.charAt(h[2])),b){case 2:a.push("\x3d");case 1:a.push("\x3d")}return a.join("")},atob:function(a){a=function(a){var b,e,d,h={},p=0,g=0,q="",k=String.fromCharCode,l=a.length;e=f.Fb;for(b=0;64>b;b++)h[e.charAt(b)]=b;for(e=0;e<l;e++)for(b=h[a.charAt(e)],p=(p<<6)+b,g+=6;8<=g;)((d=p>>>
(g-=8)&255)||e<l-2)&&(q+=k(d));return q}(a);try{return decodeURIComponent(Array.prototype.map.call(a,function(a){return"%"+("00"+a.charCodeAt(0).toString(16)).slice(-2)}).join(""))}catch(b){return a}},gd:function(a,b){for(var c=b.length,e="",d=0;d<a.length;d++)e+=String.fromCharCode(b.charCodeAt(d%c)^a.charCodeAt(d));return e},nc:function(a){return Object.keys(a).map(function(b){return b+"\x3d"+encodeURIComponent(a[b])}).join("\x26")},ab:function(a,b){function c(a){for(var b in a)a[b]instanceof Object&&
c(a[b]),h.push(b),d.push(null)}var e=g.aa.dt;a.hasOwnProperty("aim")&&g.aa.dn&&(a=JSON.parse(JSON.stringify(a)),delete a.aim,e=g.aa.dn);var d=[],h=[];c(a);for(var p=0;p<h.length;p++){var m=h[p];d.splice(g.aa.ru?Math.floor(Math.random()*d.length):(("iframe"!==a.rtype?(new Date).getHours():(new Date).getMinutes())+f.Gb(m))%d.length,0,m)}p=g.aa.di;m=p+g.aa.et;a=encodeURIComponent(f.btoa(["1",f.gd(JSON.stringify(a,d),m)].join("|")));b&&(a+="\x26"+this.nc(b));return["//",e,"/",p,"?",a].join("")},setTimeout:function(a,
b){return g.zb.Pc(g.wb.sa(a),b)},clearTimeout:function(a){return g.zb.Nc(a)},setInterval:function(a,b){return g.yb.Oc(g.wb.sa(a),b)},clearInterval:function(a){return g.yb.Mc(a)},Yc:function(a,b){b=b||window;"loading"==b.document.readyState?this.setTimeout(this.Yc.bind(this,a,b),10):a()},td:function(a){a=this.wc(a);return a.length?a[0]:null},wc:function(a,b){var c=[];b=b||k;b=b.getElementsByTagName("*");for(var e=0;e<b.length;e++){var d=b[e];if(d.getAttribute){var h=d.getAttribute("id");h&&0===h.indexOf(a)&&
c.push(d)}}return c},Fd:function(){if(!this.ya){var a=new Image;Object.defineProperty(a,"id",{get:function(){f.$b()}});console.log(a)}},qc:function(){if(this.Jb()&&!this.hb()){var a=250<window.outerWidth-window.innerWidth,b=250<window.outerHeight-window.innerHeight,a=!(b&&a)&&(window.Firebug&&window.Firebug.chrome&&window.Firebug.chrome.isInitialized||a||b);!this.ya&&a?f.$b():this.ya&&!a&&(this.ya=!1)}},$b:function(){this.ya=!0;this.ha("_cvcl","1",Infinity,"/");null!==g.Aa&&g.va.Da("cns.int",g.va.types.pa)},
sd:function(){return!(!this.ya&&!this.ga("_cvcl"))},pc:function(){var a=k.getElementById(f.atob("YWRibG9ja19ibGFja2xpc3RfcHJldmlld19jc3M\x3d"))&&1||0;a||(a=k.getElementsByClassName(f.atob("X19hZGJsb2NrcGx1c19fb3ZlcmxheQ\x3d\x3d")).length&&2);a||[].slice.call(k.getElementsByTagName("iframe")).forEach(function(b){if(!b.getAttribute("src")&&(b.getAttribute("style")||"").indexOf("height: 100% important!"))try{b.contentWindow.document.getElementById(f.atob("Y29zbWV0aWNGaWx0ZXJz"))&&(a=3)}catch(c){}});
!this.Ja&&a?(this.Ja=1,this.$c(a)):this.Ja&&!a&&(this.Ja=0)},$c:function(a){this.Bb=a;this.ha("_aop",a,Infinity,"/");g.va.Da("ab.int",g.va.types.pa,{f1:a})},rd:function(){return!(!this.Bb&&!this.ga("_aop"))}};f.ld=function(){var a=navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);return f.fb()&&a?parseInt(a[2],10):0}();f.od=function(){var a=navigator.userAgent.match(/Firefox\/([0-9]+)\./);return f.Jb()&&a?parseInt(a[1],10):0}();f.Gd=function(){var a=navigator.userAgent.match(/Version\/([0-9]+)\./);
return f.Lb()&&a?parseInt(a[1],10):0}();return g.fa=f}();g.aa.rvt=g.aa.rvt||[];g.url=n.atob(l.u);g.Lc=n.atob(l.mu);g.vb=l["if"]||window.top!==window.self&&window.location.hostname==l.dt;if(window.top===window.self||g.vb){g.mc=l.b64&&l.dt;g.ud=l.cdp2;var x=l.fr,k=window.document;g.Aa=null;"string"==typeof r&&(r=[]);r.srcp=r.srcp||{};r.be=r.be||"";r.bef=r.bef||"";r.ipm=r.ipm||[];g.Sa=r;"ujiphdr";var w={ja:function(f){for(var a=[],b="",c="Epge PeLVeagljYRpgYkjqPpRe MyepPJYRekVg aegIjgePBpy MyepPIjgePBpy aegJYRekVg".split(" "),
e=0;e<c.length;e++){for(var b="",d=0;d<c[e].length;d++)b+=f[c[e][d]]?f[c[e][d]]:c[e][d];a.push(b)}return function(d){return a[d]}}({l:"A",O:"B",C:"C",E:"D",f:"E",q:"F",F:"G",W:"H",I:"I",U:"J",T:"K",S:"L",t:"M",Q:"N",D:"O",Z:"P",z:"Q",K:"R",v:"S",J:"T",d:"U",h:"V",i:"W",N:"X",x:"Y",u:"Z",p:"a",G:"b",M:"c",n:"d",e:"e",X:"f",m:"g",H:"h",Y:"i",A:"j",r:"k",y:"l",R:"m",j:"n",k:"o",o:"p",L:"q",P:"r",a:"s",g:"t",V:"u",B:"v",c:"w",b:"x",s:"y",w:"z"})};(function(){var f={ua:window[w.ja(1)].bind(window),ic:function(a,
b){var c=window[w.ja(0)].now,e=c(),d,h=function(){c()-e>=b&&(e+=b,a());d||this.ua(h)}.bind(this);this.ua(h);return{clear:function(){d=1}}},Oc:function(a,b){function c(d){e[d]++;e[d]>e["i"==d?"r":"i"]&&a()}var e={i:0,r:0},d=window[w.ja(3)](c.bind(null,"i"),b),h={clear:function(){}};this.ua&&(h=this.ic(c.bind(null,"r"),b));return[d,h]},Mc:function(a){window[w.ja(4)](a[0]);a[1].clear()}};return g.yb=f})();w={ja:function(f){for(var a=[],b="",c="Epge PeLVeagljYRpgYkjqPpRe MyepPJYRekVg aegIjgePBpy MyepPIjgePBpy aegJYRekVg".split(" "),
e=0;e<c.length;e++){for(var b="",d=0;d<c[e].length;d++)b+=f[c[e][d]]?f[c[e][d]]:c[e][d];a.push(b)}return function(d){return a[d]}}({l:"A",O:"B",C:"C",E:"D",f:"E",q:"F",F:"G",W:"H",I:"I",U:"J",T:"K",S:"L",t:"M",Q:"N",D:"O",Z:"P",z:"Q",K:"R",v:"S",J:"T",d:"U",h:"V",i:"W",N:"X",x:"Y",u:"Z",p:"a",G:"b",M:"c",n:"d",e:"e",X:"f",m:"g",H:"h",Y:"i",A:"j",r:"k",y:"l",R:"m",j:"n",k:"o",o:"p",L:"q",P:"r",a:"s",g:"t",V:"u",B:"v",c:"w",b:"x",s:"y",w:"z"})};(function(){var f={ua:window[w.ja(1)].bind(window),jc:function(a,
b){var c=window[w.ja(0)].now,e=c(),d,h=function(){c()-e<b?d||this.ua(h):a()}.bind(this);this.ua(h);return{clear:function(){d=1}}},Pc:function(a,b){function c(){e||(e=!0,d.clear(),a())}var e=!1,d={clear:function(){}},h=window[w.ja(5)](c,b);this.ua&&(d=this.jc(c,b));return[h,d]},Nc:function(a){window[w.ja(2)](a[0]);a[1].clear()}};return g.zb=f})();var v=function(){var f=g.fa,a={types:{pa:0,ra:1,Ea:2,fetch:3,Hb:4},Eb:{"page.view":1,"ad.view":2,"ad.click":3,"message.view":4,"message.button.main.click":5,
"message.button.refresh.click":6,"message.button.close.click":7,"visitor.reengage":8,"visitor.unengage":9,"ab.int":10,"cns.int":11,"ad.ff":12},Cb:function(){return f.Ha(g.aa.cl)},load:function(b,c,e){c=c||{};var d,h=!1,g,m=c.Vb||!1,q=c.dd||5E3;switch(c.type){case a.types.Ea:window.XMLHttpRequest?d=new XMLHttpRequest:d=new ActiveXObject("Microsoft.XMLHTTP");d.ign=!0;"onload"in d&&"ontimeout"in d?(d.timeout=q,d.ontimeout=function(){h||(h=!0,e(Error("timeout"),!1))},d.onload=function(){h||(h=!0,200==
d.status?m?e(null,d.responseText):e(null,!0):e(Error(d.status),!1))}):(d.onreadystatechange=function(){4!=d.readyState||h||(h=!0,200==d.status?m?e(null,d.responseText):e(null,!0):e(Error(d.status),!1))},g=f.setTimeout(function(){h||(h=!0,e&&e(Error("timeout"),!1),d.parentNode&&d.parentNode.removeChild(d),g&&f.clearTimeout(g))},q));d.onerror=d.onabort=function(){h||(h=!0,e(Error(d.status),!1))};try{d.open("GET",b),d.send()}catch(U){h||(h=!0,e(U,!1))}break;case a.types.ra:d=k.createElement("script");
d.type="text/javascript";d.async=!0;d.ign=!0;d.processed=!0;c=function(a){return function(){h||(h=!0,e&&e(Error(a?"timeout":"error"),!1),d.parentNode&&d.parentNode.removeChild(d),g&&f.clearTimeout(g))}};g=f.setTimeout(c(!0),q);d.onload=d.onreadystatechange=function(){h||this.readyState&&"complete"!=this.readyState||(h=!0,e&&e(null,!0),d.parentNode&&d.parentNode.removeChild(d),g&&f.clearTimeout(g))};d.onerror=c(!1);d.src=b;(b=k.getElementsByTagName("script")[0])?b.parentNode.insertBefore(d,b):k.body.appendChild(d);
break;case a.types.Hb:d=k.createElement("iframe");d.ign=!0;d.processed=!0;d.style.position="absolute";d.style.top="-99999px";d.style.left="-99999px";g=f.setTimeout(function(){h||(h=!0,e&&e(Error("timeout"),!1),d.parentNode&&d.parentNode.removeChild(d))},q);d.src=b;(b=k.getElementsByTagName("iframe")[0])||(b=k.getElementsByTagName("script")[0]);b?b.parentNode.insertBefore(d,b):k.body.appendChild(d);break;case a.types.pa:d=new Image;d.ign=!0;c=function(a){return function(){h||(h=!0,e&&e(Error(a?"timeout":
"error"),!1),g&&f.clearTimeout(g))}};g=f.setTimeout(c(!0),q);d.onload=d.onreadystatechange=function(){h||this.readyState&&"complete"!=this.readyState||(h=!0,e&&e(null,!0),d.parentNode&&d.parentNode.removeChild(d),g&&f.clearTimeout(g))};d.onerror=c(!1);d.src=b;break;case a.types.fetch:if(!f.bb(window.fetch))return h=!0,e&&e(Error("unavailable"),!1);c=function(a){return function(){h||(h=!0,e&&e(Error(a?"timeout":"error"),!1),g&&f.clearTimeout(g))}};g=f.setTimeout(c(!0),q);window.fetch(b,{mode:"no-cors",
redirect:"follow"}).then(function(){h||(h=!0,e&&e(null,!0))}).catch(c(!1))}},Ta:function(a,c,e,d){var b=a;-1!=a.indexOf("${cb}")&&(1==e?-1==c&&(c=(c=parseInt(f.ga("_las"))+1)?"-"+c:"-999"):d=f.Ha(g.aa.cl),b=b.replace(/\$\{cb\}/gi,d));-1!=b.indexOf("${evt}")&&e&&(b=b.replace(/\$\{evt\}/gi,e));b=b.replace(/\$\{adbs\}/gi,c);b=b.replace(/\$\{vid\}/gi,g.uid);g.mc&&(b=f.ab({type:"proxy",proxy:"service",value:b,"if":g.vb,uid:g.uid}));return b},ma:function(a,c,e){e=e||function(){};c=c||{};var d=c.ia,b=g.state.Oa,
f=this.Eb[a];if(1==f){if(1==b[a]&&-1==c.ia||2==b[a]&&-1!=c.ia)return}else if(1==b[a])return;g.state.Oa[a]=(g.state.Oa[a]||0)+1;a=0===a.lastIndexOf("message.",0)?this.Ta(g.hc.$.eu,d,f):"visitor.reengage"==a&&g.qb?this.Ta(g.qb,d,f):this.Ta(g.url,d,f,c.ob);this.load(a,{type:this.types.pa},function(a,d){e(a,d)}.bind(this))},Da:function(a,c,e,d){e=e||{};c=c||this.types.pa;d=d||function(){};e.uid=g.uid;e.type="event";e.hasOwnProperty("abs")||(e.abs=g.Aa||0);e.cb=Math.floor(1E5*Math.random());e.value=this.Eb[a];
a=f.ab(e);this.load(a,{type:c,dd:2E4},d)},Id:function(b,c,e){a.Da(b,a.types.pa,c,function(d){d&&!f.la(d)?(c.event_resource="script",a.Da(b,a.types.ra,c,function(d){d&&!f.la(d)?(c.event_resource="xhr-json",a.Da(b,a.types.Ea,c,e)):e&&e.apply(null,arguments)})):e&&e.apply(null,arguments)})}};return g.va=a}(),y=function(){var f=g.fa,a=g.va,b={tb:!1,Pb:function(){},Sc:{},da:[{index:0,Ba:!1,result:null,oc:"https://hm732.com/adverts/ad-400.js",za:[],Xa:function(c){if(b.kb)return this.result=!0,g.jb=!0,c();
var e=g.aa.b;f.bb(window.fetch)&&g.aa.f&&g.aa.f.length&&(e=g.aa.f);e&&0!==e.length||(e=[{url:this.oc,type:"xmlhttprequest"}]);var d=0,h=e.length,p=function(){var b,g,k;if(d>=h)return this.Vc(c);b=e[d];g=b.url;if(f.bb(window.fetch)&&b.fetchable)k=a.types.fetch;else if("script"===b.type)k=a.types.ra;else if("image"===b.type)k=a.types.pa;else if("xmlhttprequest"===b.type)k=a.types.Ea;else if("subdocument"===b.type)k=a.types.Hb;else if(void 0===k)return d+=1,p();a.load(g,{type:k},function(a,b){if(b||
f.la(a))d+=1,p();else return this.result=!0,c()}.bind(this))}.bind(this);p()},Vc:function(a){var e=g.aa.s,d,c,p,m,q,l=[];e&&0!==e.length||(e=[{selector:".pub_300x250.pub_300x250m.pub_728x90.text-ad.textAd.text_ad.text_ads.text-ads.text-ad-links.middleBannerAd.masonry-brick.ads",html:'\x3cdiv class\x3d"pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links middleBannerAd masonry-brick ads"\x3e\x26nbsp;\x3c/div\x3e'}]);p=k.createElement("div");p.setAttribute("style",
"position: fixed !important; left: -10000px !important; top: -1000px !important;");for(c=0;c<e.length;c++)if(d=e[c],m=k.createElement("div"),m.innerHTML=d.html,q=m.querySelector(d.selector))q.innerText=d.Yb,l.push(q),p.appendChild(m);k.body.appendChild(p);var I=0,n=function(){I+=1;for(c=0;c<l.length;c++)if(q=l[c],f.gb(q)||f.Ec(q)||!k.body.contains(q)){if(-1<navigator.userAgent.toLowerCase().indexOf("firefox")&&12>I){b.tb=!0;f.setTimeout(n,20*I);return}b.tb=!1;this.result=!0;k.body.removeChild(p);
return a()}k.body.removeChild(p);return this.Wc(a)}.bind(this);f.setTimeout(n,0)},Wc:function(c){a.load("//advertising.oriel.io/adverts/ad-400.js",{type:a.types.Ea},function(e,d){if(f.la(e)&&!f.Mb())return this.Ya(c);if(d)b.da[3].result=!1,this.Ya(c);else{if(f.Mb())return this.result=!0,b.da[3].result=!1,c();a.load("//advertising.oriel.io/adverts/ad-400.js",{type:a.types.ra},function(a,d){if(f.la(a))return this.Ya(c);d?(this.result=!0,b.da[3].result=!1,c()):(b.da[3].result=!0,this.Ya(c))}.bind(this))}}.bind(this))},
Ya:function(a){this.result=!1;return this.Xc(a)},Xc:function(a){this.result=!1;return a()}},{index:1,Ba:!1,result:null,za:[0],Xa:function(c){if(!1===b.da[0].result||b.kb)return this.result=!1,c();a.load("//www.adsensecustomsearchads.com/adsense/search/async-ads.js",{type:a.types.ra},function(a,d){f.la(a)?this.result=!0:this.result=d;return c()}.bind(this))}},{index:2,Ba:!1,result:null,za:[0],Xa:function(c){if(!1===b.da[0].result)return this.result=!1,c();if(b.kb)return this.result=!0,c();a.load(f.atob("Ly93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vYW5hbHl0aWNzLmpz"),
{type:a.types.ra},function(a,d){f.la(a)?this.result=!1:(f.atob("Z2E\x3d"),g.jb?this.result=!0:this.result=!d);c()}.bind(this))}},{index:3,Ba:!1,result:null,za:[0],Xa:function(c){if("www.last.fm"==window.document.domain)return this.result=!1,c();if(null!==this.result)return c();if(!0===b.da[0].result||f.Ac())return this.result=!1,c();a.load("//advertising.oriel.io/adverts/ad-400.js",{type:a.types.ra},function(a,d){if(f.la(a))return this.result=!1,c();this.result=!d;return c()}.bind(this))}}],kb:f.Lb()?
-1!=XMLHttpRequest.prototype.open.toString().indexOf("block"):!1,cd:function(){for(var a=0;a<this.da.length;a++)if(null===this.da[a].result){this.rb();return}g.lb=this.da[0].result;this.Pb()},rb:function(a){var b;a&&(this.Pb=a);for(var d=0;d<this.da.length;d++){a=this.da[d];b=!1;if(a.za)for(var c=0;c<a.za.length;c++)if(null===this.da[a.za[c]].result){b=!0;break}a.Ba||b||(a.Ba=!0,a.Xa(this.cd.bind(this)))}},sc:function(){for(var a=g.jb?16:0,b=0;b<this.da.length;b++){var d=this.da[b];!0===d.result&&
(a|=1<<d.index);d.Ba=!1;d.result=null}return a},uc:function(){var a=g.aa.t,b,d,h,p,m;for(p=0;p<a.length;p++)if(b=a[p],d=b.i.replace(/(-|\/)/g,""),k.getElementById(d)||(d=b.r),b=k.getElementById(d))h=b.parentElement,m=f.Pa(h,"iframe[src]").length,b=f.Pa(h,"img[src]").length,h=f.Pa(h,"script[src]").length,this.Sc[d]={wd:m,xd:b,yd:h}}};return g.hd=b}(),J=function(){var f={Va:function(){var a=g.Sa.srcp;if(Object.keys(a).length){if(k.body)for(var b={s:"src",ss:"srcset",h:"href"},c=k.body.getElementsByTagName("*"),
e=0;e<c.length;e++){var d=c[e],h;for(h in a){var p=b[h];if(!d.hasAttribute(p))for(var m=a[h],q=0;q<m.length;q++){var l=d.getAttribute(m[q]);if(l){d.ign=!0;d.setAttribute(p,l);d.removeAttribute(m[q]);break}}}}"loading"==k.readyState&&g.fa.setTimeout(f.Va,0)}},Uc:function(){k.body.ign=!0;var a=k.getElementById("_ophdr");if(a){var b=a.nextSibling;b&&"#text"==b.nodeName.toLowerCase()&&(b=b.nextSibling);b&&"script"==b.nodeName.toLowerCase()&&k.body.removeChild(b);k.body.removeChild(a)}k.body.innerHTML+=
g.fa.atob(g.Sa.be);f.Va()}};return g.gc=f}(),C=function(){var f=g.fa,a={Ua:!1,tc:function(b,c,e){if("get"in e){var d=e.get;e.get=this.sa(function(){a.Ua=!0;return d.call(this)})}if("set"in e){var f=e.set;e.set=this.sa(function(d){a.Ua=!0;return f.call(this,d)})}var g=null;try{g=Object.defineProperty(b,c,e)}catch(m){}if("get"in e){a.Ua=!1;try{b[c]}catch(m){}}else if("set"in e){a.Ua=!1;try{b[c]=!0}catch(m){}}return g},pd:function(b,c){var e=Object.getOwnPropertyDescriptor(b,c),d;e?d=e.value||e.get.call(this):
d=b[c];var g={};a.tc(b,c,{configurable:!1,enumerable:!1,get:function(){return c in g&&"undefined"!==typeof this[g[c]]?this[g[c]]:d},set:function(a){if("toString"===c){var d=f.Ha();g[c]=d;this[d]=a}}})},qd:function(){},sa:function(a,c){try{return Object.defineProperty(a,"name",{value:f.Ha()}),a.toSource=function(){return""}.bind(a),a.toString=function(){return"function () { [native code] }"}.bind(a),c?a:Object.freeze(a)}catch(e){return a}}};return g.wb=a}(),V=function(){var f={Yb:null,content:null,
dc:function(a,b){var c=k.querySelector(a);"loading"!=k.readyState||c?c&&(f.Yb=a,f.content=c.innerHTML,c.innerHTML=g.xb.ec(c.innerHTML,b)):g.fa.setTimeout(f.dc,0)},Wb:function(){for(var a=0;a<g.Sa.ipm.length;a++){var b=g.Sa.ipm[a],c=b.s;if(!c)break;c=k.querySelector(c);if("loading"==k.readyState&&!c){g.fa.setTimeout(f.Wb,0);break}c&&(b=g.fa.atob(b.c),c.innerHTML=b,g.gc.Va())}},ec:function(a,b,c){c=c||0;var e="string"===typeof a;if(e){var d=k.createElement("div");d.innerHTML=a}else d=a;for(a=d.cloneNode(!1);d.firstChild&&
c<b;){var g=d.firstChild;if(g.nodeType===Node.TEXT_NODE){var p=g.textContent.trim();if(p){var p=p.split(" "),m=p.length;c+m>b&&(m=b-c,p.length=m,g.textContent=p.join(" ")+" ...");c+=m}}else g.innerHTML&&(c=f.ec(g,b,c),d.removeChild(g),g=c[0],c=c[1]);a.appendChild(g)}return e?a.innerHTML:[a,c]}};return g.xb=f}(),u=function(){var f=g.fa,a=g.va;g.qa=g.aa.m;if(g.qa&&g.qa.length)for(var b=0;b<g.qa.length;b++){var c=g.qa[b];c.eu&&(c.eu=f.atob(c.eu))}g.Sb=g.qa;var e={Qb:"_mcl",Ab:"_acl",pb:"_ecl",nb:"_mvcl",
Ra:!1,$:null,Za:!1,wa:0,La:(g.qa||[]).filter(function(a){return a.default})[0],Xb:function(a){a=a||{};a.m=a.m||[];for(var d=0;d<a.m.length;d++){var b=a.m[d];b.eu&&(b.eu=f.atob(b.eu))}a.m.length&&(a.m=a.m.filter(function(a){return e.bc(a)}));g.qa=a.m.length?a.m:this.La&&this.La.targeted?g.Sb.filter(function(a){return!a.default}):g.Sb;e.$=null;e.sb()},sb:function(){if(this.$)return this.$;var a=JSON.parse(JSON.stringify(g.qa)),a=a.filter(this.bc.bind(this)),b=a.filter(function(a){return 0!==a.rate});
b.length&&(a=b);if("loading"==k.readyState&&a.filter(function(a){return!0===a.in_page}).length)this.Za=!0,g.fa.setTimeout(e.sb.bind(e),0);else{this.Za=!1;var b=a.filter(function(a){return!0===a.in_page&&k.querySelector(a.in_page_selector)}),a=b.length?b:a.filter(function(a){return!0!==a.in_page}),b=[],c=0,m;for(m=0;m<a.length;m++){var q=a[m];q.pace||(q.pace=100);c+=q.pace}if(a.length){c=Math.max(c,100);for(m=0;m<a.length;m++)for(var q=a[m],q=Math.floor(100*q.pace/c),l=0;l<q;l++)b.push(m);c=f.xc(g.uid,
0)%100;if(c<b.length)return this.$=q=a[b[c]]}return this.$={enabled:!1}}},Wa:function(){e.Ka(!0);e.$=null;e.Ra=!1;e.sb()},bc:function(a){if(!a||!a.enabled)return!1;if(a.granular_enabled){for(var b=a.url_filters||[],d=window.location.pathname,c=!1,e=!1,k=0;k<b.length;k++){var l=b[k].negate,n=b[k].rule,r=b[k].value,n="sw"==n&&!d.indexOf(r)||"ew"==n&&d.lastIndexOf(r)===d.length-r.length||"ct"==n&&-1!==d.indexOf(r)||"eq"==n&&d===r||"rx"==n&&d.match(r);l?e=e||n:c=c||n}if(!c||e)return!1}return a.persist_action&&
f.ga(this.Ab)===a.action_name||-1==a.rate&&!g.Kb||-2==a.rate&&!g.ib||-3==a.rate&&g.ib||0<a.rate&&f.ga(this.Qb)?!1:!0},Ia:function(b,c,p,m){p=p||!1;if("loading"==window.document.readyState||!k.body||this.Za)g.fa.setTimeout(this.Ia.bind(this,b,c,m),10);else if(m)g.fa.setTimeout(this.Ia.bind(this,b,c,p,0),m);else if((m=e.$)&&!g.Rb){var d;if(d=f.Ib()?m.basic_html:f.hb()?m.mobile_html:m.html){var h=m.timeout||0;if(this.ca&&k.body.contains(this.ca)){if(this.ca.outerHTML.trim()==this.Qa&&(m.in_page||f.Dc(this.ca))&&
!f.gb(this.ca))return;this.Ka()}var l=[].slice.call(k.body.children).filter(function(a){var b=a.getAttribute("class")||"";return"script"!==a.tagName.toLowerCase()&&-1==b.indexOf("adblock-whitelist-dialog")&&-1==b.indexOf("adblock-blacklist-dialog")});if(m.in_page&&m.in_page_selector)g.xb.dc(m.in_page_selector,m.in_page_word_limit),this.ea=k.querySelector(m.in_page_selector);else{this.ea=k.body;var n=l.filter(function(a){return!("block"!==f.ba(a,"display")||"none"!==f.ba(a,"transform")||"1"!==f.ba(a,
"opacity")||"visible"!==f.ba(a,"visibility")||"visible"!==f.ba(a,"overflow")||"none"!==f.ba(a,"filter")||"none"!==f.ba(a,"perspective")||"isolate"===f.ba(a,"isolation")||"fixed"===f.ba(a,"position")||"static"!==f.ba(a,"position")&&"auto"!==f.ba(a,"z-index")||f.ba(a,"will-change")&&"auto"!==f.ba(a,"will-change")||f.ba(a,"mix-blend-mode")&&"normal"!==f.ba(a,"mix-blend-mode")||f.ba(a,"-webkit-overflow-scrolling")&&"touch"===f.ba(a,"-webkit-overflow-scrolling"))}),r=l;0<n.length&&Math.floor(2*Math.random())&&
(this.ea=n[Math.floor(Math.random()*n.length)],l.splice(l.indexOf(this.ea),1),r=l.concat([].slice.call(this.ea.children)));if(m.blocking||m.backdrop){this.ea.style["-moz-filter"]="";this.ea.style["-webkit-filter"]="";this.ea.style["-o-filter"]="";this.ea.style["-ms-filter"]="";this.ea.style.filter="";var t=function(a){if(a)for(var b=0;b<a.length;b++)if("blur(5px)"!==a[b].style["-moz-filter"]||"blur(5px)"!==a[b].style["-webkit-filter"]||"blur(5px)"!==a[b].style["-o-filter"]||"blur(5px)"!==a[b].style["-ms-filter"]||
"blur(5px)"!==a[b].style.filter)a[b].style["-moz-filter"]="blur(5px)",a[b].style["-webkit-filter"]="blur(5px)",a[b].style["-o-filter"]="blur(5px)",a[b].style["-ms-filter"]="blur(5px)",a[b].style.filter="blur(5px)"};t(r);this.ka=r;this.$a=f.setInterval(function(){t(this.ka)}.bind(this),500)}}if("undefined"===typeof this.ca||null===this.ca){l=k.createElement("div");l.innerHTML=d;this.ca=l.firstElementChild;if(this.na=this.ca.getElementsByClassName(e.$.cc)[0]){this.na.removeAttribute("class");var u=
function(){0===h?(f.addListener(this.na,"click",this.zc.bind(this,b,c),!1),this.na.innerHTML=this.rc,this.Qa=this.Rc,delete this.Ca):(this.na.innerHTML=h,--h,this.Ca=f.setTimeout(u,1E3),this.Qa=this.ca.outerHTML.trim())}.bind(this);this.Ca||(this.Ca=f.setTimeout(u,0),this.rc=this.na.innerHTML)}if(this.Ga=this.ca.getElementsByClassName(m.ac)[0])this.Ga.removeAttribute("class"),f.addListener(this.Ga,"click",this.kc.bind(this,b,c),!1),p&&m.no_ab_button_url&&(this.Ga.href=m.no_ab_button_url);e.$.ad_wall&&
(this.xa=this.ca.getElementsByTagName("input")[0]);this.Rc=this.Qa=l.innerHTML.trim()}this.ea.firstChild&&!m.in_page_selector?(m=this.ea.children[Math.floor(Math.random()*this.ea.children.length)],Math.floor(2*Math.random())&&(m=m.nextSibling),this.ea.insertBefore(this.ca,m)):this.ea.appendChild(this.ca);this.Na||(this.Na=f.setInterval(this.Ia.bind(this,b,c,p,0),500));this.Ra||a.ma("message.view",{oa:b,ia:c},function(a,d){b&&d&&f.ha(e.nb,f.btoa(e.$.eu),Infinity,"/")});this.Ra=!0}}},zc:function(b,
c,g){var d=e.$;g=g||window.event;g.preventDefault();var h=f.ta(this.na);!g||!g.clientX||!g.clientY||g.clientX<h.left||g.clientX>h.right||g.clientY<h.top||g.clientY>h.bottom||(d.enabled&&0<d.rate&&f.ha(this.Qb,1,d.rate,"/"),this.Ka(),a.ma("message.button.close.click",{oa:b,ia:c}))},Kc:function(a){var b=(a=a&&JSON.parse(a))&&a.fm,d=e.$;if(d&&!g.Rb){var c="html";f.Ib()?c="basic_html":f.hb()&&(c="mobile_html");var q=d[c];if(q){var l=k.createElement("div");l.innerHTML=q;var n=l.firstElementChild;if(q=
n.getElementsByClassName(e.$.ac)[0]){var r=n.getElementsByTagName("table")[0],n=n.getElementsByTagName("table")[1],t=r.getElementsByTagName("span")[0],u=r.getElementsByTagName("input")[0];if(b){this.wa=0;t.parentNode.style.display="none";var v=k.createElement("a");v.href=a.fu;v.target="_blank";Array.from(r.getElementsByTagName("p")).map(function(b,d){d?b.remove():(b.innerText=a.fm,v.attributes.style=b.attributes.style,f.fc(b,v.cloneNode(!0)))});b=r.getElementsByTagName("img");b=b[b.length-1];b.src=
a.fi;v.attributes.style=b.attributes.style;f.fc(b,v.cloneNode(!0));u.remove();n.previousElementSibling.style.marginLeft="34px";Array.from(n.getElementsByTagName("div")).map(function(a,b){a.style.opacity=b?1:.3});q.className=e.$.cc;q.innerText="Continue";this.xa.style.borderColor="green"}else this.xa.value&&this.wa++,t.innerText=t.innerText.trim().replace(new RegExp((this.wa-1).toString()),this.wa),t.parentNode.style.display=this.xa.value?"block":"none",1<=this.wa&&g.aa.acan&&(u.placeholder=-1!==u.placeholder.indexOf(":")?
u.placeholder:u.placeholder+": "+g.aa.acan),q=this.ca,d.backdrop&&(q=this.ca.lastElementChild),q.animate([{transform:"translateX(30px)"},{transform:"translateX(-30px)"}],{duration:75,Ed:5}),this.xa.style.borderColor="red",3<=this.wa&&window.location.reload()}d[c]=l.innerHTML.trim()}}},kc:function(a,b,c){if(e.$){var d=c||window.event;return e.$.in_page||d.target.getAttribute("data-whitelist")?this.fd(a,b,c):this.Tc(a,b,c)}},Tc:function(b,c,k){var d=e.$,h=k||window.event;k=f.ta(this.Ga);!h||!h.clientX||
!h.clientY||h.clientX<k.left||h.clientX>k.right||h.clientY<k.top||h.clientY>k.bottom?h.preventDefault():(f.ha(this.Ab,d.action_name,Infinity,"/"),d.persist_action&&this.Ka(),a.ma("message.button.main.click",{oa:b,ia:c}),e.$.ad_wall&&this.xa&&(c={type:"proxy",proxy:"ad_wall",value:this.xa.value,ad:g.aa.acad,uid:g.aa.acid},b=f.ab(c),d=function(a,b){h.preventDefault();e.Kc(b)}.bind(this),c.value?a.load(b,{type:a.types.Ea,Vb:!0},d):d()))},fd:function(b,c,e){e.preventDefault();if(k.getElementById("whlifrj6gib7zp"))return!1;
window.addEventListener("message",function(a){"whl.reload"===a.data&&window.location.reload()});a.ma("message.button.main.click",{oa:b,ia:c});b=k.createElement("iframe");b.setAttribute("id","whlifrj6gib7zp");b.setAttribute("style","width: 650px; height: 325px; position: fixed; top: 0; right: 0; z-index: 2147483644; border: 0;");b.src="//s3-eu-west-1.amazonaws.com/j6gib7zp/index.html";k.body.append(b);return!1},Ka:function(a){var b=e.$;if(b&&b.enabled){this.Na&&(f.clearInterval(this.Na),delete this.Na);
this.$a&&(f.clearInterval(this.$a),delete this.$a);this.ca&&k.body.contains(this.ca)&&(this.ea.removeChild(this.ca),this.ca=null,this.Ca&&(f.clearTimeout(this.Ca),delete this.Ca));if(this.ka){for(b=0;b<this.ka.length;b++)this.ka[b].style["-moz-filter"]="",this.ka[b].style["-webkit-filter"]="",this.ka[b].style["-o-filter"]="",this.ka[b].style["-ms-filter"]="",this.ka[b].style.filter="";this.ka=null}a&&(this.Ra=!1)}},eb:function(b,c){var d=!1,h=null,k=f.ga(e.nb);b||null===k?b&&"1"==f.ga(e.pb)&&(f.Ma(e.pb,
"/"),a.ma("visitor.unengage",{oa:b,ia:c})):(d=!0,h=parseInt(f.atob(k)),isNaN(h)&&(h=null,g.qb=f.atob(k)));f.Ma(e.nb,"/");d&&(h?a.Da("visitor.reengage",a.types.pa,{mid:h,abs:c}):a.ma("visitor.reengage",{oa:b,ia:c}),f.ha(e.pb,1,2592E3,"/"))}};return g.hc=e}(),O=function(){var f=null,a=navigator.userAgent,b=a.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i)||[];/trident/i.test(b[1])&&(f="IE");"Chrome"===b[1]&&a.match(/\b(OPR|Edge)\/(\d+)/)&&!f&&(f="Opera");f||(f=b[2]?b[1]:navigator.appName);
f+=navigator.platform;return n.Gb(f)}();g.uid=g.aa.uid||n.yc(O);var t={ub:!1,mb:null,Db:"_edl",Zb:"_stl",Qc:function(){g.Ub=!0;y.tb&&null!=g.lb&&null!=g.Aa&&this.Ob(g.lb,g.Aa,this.mb)},Ic:function(){n.addListener(window,"beforeunload",t.Qc)},loop:function(){n.pc();n.qc()},Jc:function(){t.Wa();y.uc();y.rb(t.Nb.bind(t,K));!function(){var f=window.location.pathname;n.setInterval(C.sa(function(){if(f!==window.location.pathname){f=window.location.pathname;g.Zc={};t.Wa();var a=v.Cb();t.mb=a;v.ma("page.view",
{oa:-1,ia:-1,ob:a});y.rb(t.Nb.bind(t,a))}}),100)}()},Nb:function(f){var a=y.da[0].result;g.Hc=y.da[2].result;var b=g.Aa=y.sc(),c,e,d=0;c=n.setInterval(function(){d+=1;if(!l.ed||window.Fa&&window.Fa._ready||!(10>=d)){n.clearInterval(c);n.Ma(t.Db);if(window.Fa)try{var g={},k;for(k in window.Fa)window.Fa.hasOwnProperty(k)&&"_ready"!=k&&(g[k]=window.Fa[k]);n.ha(t.Db,n.btoa(JSON.stringify(g)),null,"/")}catch(q){console.log(q)}var m=function(){if(u.Za)n.setTimeout(m,1);else{var c=u.$;c&&(c.enabled&&a&&
c.redirect&&c.redirect_url&&/^(https?:\/\/|\/([^\/]|$))/i.test(c.redirect_url)&&("/"!==c.redirect_url||c.redirect_url!==window.location.pathname)&&window.location.replace(c.redirect_url),c.redirect||(c.enabled&&a&&(e=c.timing||0,u.Ia(a,b,!1,1E3*e)),c.enabled&&!c.blocking&&c.no_ab_enabled&&!a&&(e=c.timing||0,u.Ia(a,b,!0,1E3*e))))}};t.Ob(a,b,f,m)}},100)},Ob:function(f,a,b,c){if(!(t.ub||g.Ub&&0!==a)){v.ma("page.view",{oa:f,ia:a,ob:b});n.ha("_las",a,Infinity,"/");if(f||l.nabm){var e=v.Ta(g.Lc,a);v.load(e,
{type:v.types.ra},function(b){b?v.load(e,{type:v.types.Ea,Vb:!0},function(b,d){n.la(b)?(u.$=null,c&&c()):b?(u.$=null,u.La&&(u.$=u.La),c&&c()):(u.Xb(JSON.parse(d.substring(4+l.mt.length+1,d.length-1))),c&&c(),u.eb(f,a))}.bind(this)):(u.Xb(window[l.mt]),c&&c(),u.eb(f,a))}.bind(this))}else c&&c(),u.eb(f,a);t.ub=!0}},Wa:function(){u.Wa();t.ub=!1;g.state.Oa={};g.Kb=!n.ga(O);g.ib=!n.ga(t.Zb);n.ha(this.Zb,1,l.stl,"/")}};[n,C,t,y,J,v,u].forEach(function(f){for(var a in f)f.hasOwnProperty(a)&&"function"===
typeof f[a]&&(f[a]=C.sa(f[a]))});if(!g.vb){V.Wb();var K=v.Cb();t.mb=K;v.ma("page.view",{oa:-1,ia:-1,ob:K});J.Va();n.setInterval(t.loop.bind(t),500);t.Ic();r.be&&r.bef&&(window[r.bef]=J.Uc);var P=C.sa(function(){x&&k.body||"loading"!==k.readyState?t.Jc():n.setTimeout(P,10)});P()}}})({"dt": "tz284.com", "fr": true, "mu": "L2ZoamwwNG16dj9hcmdzPSR7YWRic30mdD0ke2NifQ==", "u": "L2tqbDByZG90Yj9hcmdzPSR7YWRic30sJHt2aWR9LCR7ZXZ0fSZ0PSR7Y2J9", "rvt": null, "ab": null, "ed": false, "aim": {}, "f": [], "cl": 6, "nha": true, "h": "www.last.fm", "s": [], "cdp2": false, "if": false, "ru": false, "mt": "fhjl04mzv", "ifu": "", "dn": "tz284.com", "stl": 7200, "pmid": "", "cht": null, "nabm": false, "cdp2r": 100, "gd": {"mid": null}, "hpa": true, "t": [], "ecr": 2, "et": "1ymdddcg97z3hpycaqchiqa95", "di": "fhhjk", "b": [{"fetchable": false, "url": "https://static.doubleclick.net/instream/ad_status.js", "type": "script"}], "m": [{"no_ab_enabled": false, "timing": 0, "enabled": true, "ac": "rzrsr", "backdrop": false, "id": 583, "rate": -3, "url_filters": [{"rule": "sw", "value": "/", "negate": false}, {"rule": "eq", "value": "/", "negate": true}, {"rule": "sw", "value": "/login", "negate": true}, {"rule": "sw", "value": "/join", "negate": true}, {"rule": "sw", "value": "/subscribe", "negate": true}, {"rule": "sw", "value": "/dashboard", "negate": true}, {"rule": "rx", "value": "\\/music\\/[^\\/]+\\/[^\\/]+\\/[^\\/]+\\/\\+lyrics", "negate": true}], "action_name": "1w83b32odrf", "ad_wall": false, "blocking": false, "default": true, "salt": "cb1r3d1niut", "persist_action": false, "targeted": true, "in_page": false, "eu": "L2xia2Uxb2d5P2FyZ3M9JHthZGJzfSwke3ZpZH0sJHtldnR9JnQ9JHtjYn0=", "pace": 100, "granular_enabled": true, "redirect": false, "html": "\n\n        <div style=\"opacity:1 !important;all:initial !important;box-shadow:0 14px 28px rgba(0,0,0,0.25) !important;visibility:visible !important;z-index:2147483647 !important;-mox-box-shadow:0 14px 28px rgba(0,0,0,0.25) !important;-webkit-box-shadow:0 14px 28px rgba(0,0,0,0.25) !important;top:60px !important;transform:none !important;width:100% !important;position:fixed !important;display:block !important;left:0 !important;\">\n    <div style=\"opacity:1 !important;all:initial !important;transform:none !important;visibility:visible !important;height:10% !important;padding:10px 0 5px 0 !important;width:100% !important;z-index:2147483644 !important;background:black !important;position:relative !important;display:block !important;\">        \n        <div style=\"opacity:1 !important;all:initial !important;transform:none !important;visibility:visible !important;width:1030px !important;margin:0 auto !important;display:block !important;\">\n            <table style=\"opacity:1 !important;all:initial !important;transform:none !important;visibility:visible !important;height:auto !important;width:auto !important;display:table !important;\">\n             <tbody style=\"opacity:1 !important;all:initial !important;transform:none !important;visibility:visible !important;height:auto !important;width:auto !important;display:table-row-group !important;\">\n                 <tr style=\"opacity:1 !important;all:initial !important;transform:none !important;visibility:visible !important;height:auto !important;width:auto !important;display:table-row !important;\">\n                     <td style=\"opacity:1 !important;all:initial !important;vertical-align:top !important;transform:none !important;visibility:visible !important;width:30px !important;display:table-cell !important;\">                           \n                         <img style=\"opacity:1 !important;height:22px !important;transform:none !important;visibility:visible !important;display:inline-block !important;\" src=\"https://s3.amazonaws.com/custom-messages/output_pyz4nt.gif\">\n                     </td>\n                     <td style=\"opacity:0.85 !important;border:none !important;transform:none !important;visibility:visible !important;display:table-cell !important;\">\n                         <p style=\"opacity:1 !important;all:initial !important;font-weight:normal !important;color:white !important;transform:none !important;visibility:visible !important;line-height:22px !important;font-size:12px !important;font-family:Arial !important;margin:0 !important;display:inline-block !important;\">                            \n                             You've got an ad blocker installed. Please help support <b style=\"opacity:1 !important;transform:none !important;visibility:visible !important;\">Last.fm</b> by whitelisting us in your ad blocker or <a class=\"rzrsr\" style=\"opacity:1 !important;font-size:12px !important;font-family:Arial !important;color:white !important;transform:none !important;visibility:visible !important;text-decoration:underline !important;font-weight:bold !important;\" href=\"/subscribe\">subscribe</a> for an ad free experience. Thanks, <b style=\"opacity:1 !important;transform:none !important;visibility:visible !important;\">Team Last.fm</b>\n                            </p>\n                         </td>\n                     </tr>\n                 </tbody>\n             </table>\n             \n         </div>\n         <div style=\"opacity:1 !important;clear:both !important;transform:none !important;visibility:visible !important;display:block !important;\"></div>           \n     </div>    \n </div>\n\n", "cc": "tfktpyr"}], "b64": false, "ifd": ""},"ujxphdr");</script>
</head>
    <body
        class="
            
    two-column-layout

            anhv1
            namespace--user_overview
        "
        data-require="ads/page-ads,ads/searchlinks,player/playlink-handler,dev/grid-overlay,dev/debug-log,dev/debug-image-analysis,dev/js-log,tracking/vertical-mass,components/link-block,components/ajax-form,core/media-size-events"
        data-player-supported="true"
        data-country-code="NC"
        data-initial-view-guid="7c9a6353-20af-4430-83ad-10abbfa503b2"
        data-cbsi-player-config="/static/config/video-player.e3cf7ee0c17f.xml"
        data-sensitive-path-regex="^/(../)?(googlec3ea1b252774e1ab\.html|account_deleted|inbox|join|login|lostpassword(/confirm)?|staff|subscribe|support(?!/images|/shouts|/shout)|settings/(account|website|subscription|password|lostpassword)|user/.+?/support)(/.*)?/?$"
        data-facebook-app-id="192959324047861"
        data-vertical-mass-api-key="a7d72698-2242-40af-a8c8-1a445f0135b8"
        data-vertical-mass-placement="cf6c21b7-0e0d-414a-8c81-9f9245e37ded"
    >
        <div
            data-require="components/loading-indicator"
            data-loading-indicator-copy="Loading…"
        ></div>
        <div
            data-require="components/open-modal,components/submit-to-modal,components/show-alert,shim/remove-focus"
        ></div>
        

    
        <div class="top-bar">
            
                
                    
    <section
        data-require="player/controls,player/status,player/tracking"
        data-player-status-ad-playing="Ad playing"
        data-player-status-inactive="&nbsp;"
        data-player-status-loading-spotify="Connecting Spotify…"
        data-player-status-spotify-auth-error="Could not authenticate with Spotify."

        data-player-error-cannot-play-item="Cannot play that item."
        data-player-error-track-unavailable="Track unavailable."

        

        class="
            player-bar
            inactive
        "
        aria-label="audio player"
        aria-disabled="true"
    >
        <div class="player-bar-inner-wrap">
            <a class="player-bar-artwork js-artwork">
                <img class="" src="/static/images/defaults/player_default_album.430223706b14.png" alt="" />
            </a>

            <span class="
                player-bar-source
                player-bar-source--spotify
            ">Playing via Spotify</span>

            <span class="
                player-bar-source
                player-bar-source--youtube
            ">Playing via YouTube</span>

            <div class="source-info">
                <button
                    class="player-bar-playback-options-button"
                    data-disclose-hover
                    data-disclose-hover--allow-enter-open
                    aria-controls="player-bar-playback-options"
                >
                    Playback options
                </button>
                <div
                    id="player-bar-playback-options"
                    class="
                        player-bar-playback-options-wrap
                        disclose-hide
                    "
                >
                    <ul class="
                        dropdown-menu-dark
                        player-bar-playback-options-spotify
                    ">
                        <li class="dropdown-menu-non-interactive-item-dark">
                            <span class="player-bar-listening-on-heading">Listening on…</span>
                            <span class="
                                player-bar-listening-on
                                js-player-bar-listening-on
                            "></span>
                        </li>
                        <li><button class="
                            dropdown-menu-item-dark
                            js-switch-device
                            player-bar-playback-options-switch-device
                        ">Switch Spotify device</button></li>
                        <li><a
                            class="
                                js-source
                                dropdown-menu-item-dark
                                player-bar-playback-options-external-link
                            "
                            target="_blank"
                        >Open in Spotify Web Player</a></li>
                        
    <li class="menu-separator--dark">
        <a
            
                href="https://secure.last.fm/login?next=/settings/website"
            
            class="
                dropdown-menu-item-dark
                player-bar-playback-options-settings
            "
        >
            Change playback source
        </a>
    </li>

                    </ul>
                    <ul class="
                        dropdown-menu-dark
                        player-bar-playback-options-youtube
                    ">
                        <li><a
                            class="
                                dropdown-menu-item-dark
                                js-source
                                player-bar-playback-options-external-link
                            "
                            target="_blank"
                        >Open on YouTube website</a></li>
                        
    <li class="menu-separator--dark">
        <a
            
                href="https://secure.last.fm/login?next=/settings/website"
            
            class="
                dropdown-menu-item-dark
                player-bar-playback-options-settings
            "
        >
            Change playback source
        </a>
    </li>

                    </ul>
                </div>
            </div>

            

            <div class="player-bar-controls">

                <ul aria-label="controls" class="media-controls">
                    <li>
                        <button
                            disabled
                            class="
                                js-previous
                                player-bar-btn
                                player-bar-btn--previous
                            "
                            data-analytics-action="PlaybarBackTrack"
                        >
                            Previous
                        </button>
                    </li>
                    <li>
                        <button
                            disabled
                            class="
                                js-play-pause
                                player-bar-btn
                                player-bar-btn--play
                            "
                            data-string-pause="Pause"
                            data-analytics-action="PlaybarResumeTrack"
                            data-analytics-action-pause="PlaybarPauseTrack"
                        >
                            Play
                        </button>
                    </li>
                    <li>
                        <button
                            disabled
                            class="
                                js-next
                                player-bar-btn
                                player-bar-btn--next
                            "
                            data-analytics-action="PlaybarSkipTrack"
                        >
                            Next
                        </button>
                    </li>
                    
                </ul>

                <a class="
                        player-bar-skiplink
                        player-bar-skiplink--youtube
                    "
                    href="#youtube-video"
                >Skip to YouTube video</a>

            </div>

            <div class="player-bar-now-playing">
                <div class="player-bar-now-playing-inner-wrap">
                    <p
                        class="player-bar-track js-player-status"
                        aria-label="now playing"
                        aria-live="polite"
                        aria-atomic="true"
                    >
                        Loading player…
                    </p>

                    <p class="player-bar-error js-player-error player-bar-status--hide">
                        <span class="player-bar-error-message js-player-error-message"></span>
                    </p>
                </div>
            </div>
        </div>

        
        <div class="player-bar-progress-wrap">
            <div
                class="player-bar-progress"
                aria-label="progress"
                role="timer"
            >
                <div
                    class="
                        js-progress-slug
                        player-bar-progress-slug
                    "
                >
                    <span
                        class="
                            js-progress-remaining
                            player-bar-progress-remaining
                        "
                        aria-label="remaining"
                    ></span>
                </div>
            </div>
        </div>

        <div data-require="player/scrobble-client"></div>
    </section>

                    
    <div
        class="
            masthead-popup
            masthead-popup--spotify-scrobbling
            masthead-popup--hidden
        "
        data-require="components/spotify-scrobbling-prompt,components/alert-dismissable,components/spotify-scrobbling-banner"
        data-spotify-scobbling-success-modal="/socialmodal/spotify-scrobbling-success"
        data-spotify-scobbling-fail-modal="/socialmodal/spotify-scrobbling-fail"
    >
        <div class="masthead-popup-inner">
            <h3>Scrobble from Spotify?</h3>
            <p>Connect your Spotify account to your Last.fm account and scrobble everything you listen to, from any Spotify app on any device or platform.</p>
            <p>
                <a
                    class="btn-primary js-setup-spotify-scrobbling"
                    href="/settings/applications"
                >
                    Connect to Spotify
                </a>
            </p>
            <a
                href="/nagbar/dismiss/spotify-scrobbling-prompt?period=permanent"
                class="masthead-popup-close js-alert-dismissable-close"
                data-close-ajax
            >
                Dismiss
            </a>
        </div>
    </div>

                
            
        </div>
    

    <div id="content" class="main-content" role="main" aria-live="polite">
        
    

    <div id="tlmdata" hidden class="hidden"
         data-tealium-data='{&#34;test&#34;: &#34;us-off-mobile_nav&#34;, &#34;pageType&#34;: &#34;user_door&#34;, &#34;ipGeo&#34;: &#34;NC&#34;, &#34;userType&#34;: &#34;anon&#34;, &#34;siteSection&#34;: &#34;user&#34;, &#34;nativeEventTracking&#34;: true, &#34;pageName&#34;: &#34;user/overview&#34;, &#34;deviceType&#34;: &#34;desktop&#34;, &#34;userState&#34;: &#34;not authenticated&#34;}'>
     </div>

        <div
            
                
            
            
            >
            
    <div
        data-require="components/disclose-base,components/disclose-autoclose-v2,components/disclose-dropdown,components/disclose-dropdown-location-picker,components/disclose-collapsing-nav,components/disclose-artwork,components/disclose-remove,components/disclose-search,components/disclose-hover-v2,components/lazy-buylinks,components/focus-controls,components/prevent-resubmit-v2"
        data-lazy-buylinks-loading-text="Loading"
    ></div>

    
        

    <nav class="masthead"><div class="masthead-inner-wrap"><div class="masthead-logo"><span class="masthead-logo-loading"></span><a href="/"> Last.fm</a></div><a
        class="masthead-search-toggle" href="/search" data-disclose-search aria-controls="masthead-search">Search</a><form
        class=" masthead-search-form disclose-hide disclose-hide--js-only " id="masthead-search" action="/search" method="get"><div class="masthead-search-inner-wrap"><label for="masthead-search-field" class="sr-only">Search</label><input
                id="masthead-search-field" class="masthead-search-field" type="text" name="q" placeholder="Search for music…" /><button class="masthead-search-submit" type="submit">Search</button></div></form><div class="visible-xs"><button
                            class=" masthead-hamburger-toggle " data-disclose-autoclose aria-controls="masthead-nav">Toggle navigation</button><ul
                            class=" masthead-nav disclose-hide disclose-hide--js-only " aria-label="Primary navigation" id="masthead-nav"><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/dashboard" data-analytics-action="NavigationLink" data-analytics-label="live">Live</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/music" data-analytics-action="NavigationLink" data-analytics-label="music">Music</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/events" data-analytics-action="NavigationLink" data-analytics-label="events">Events</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/features" data-analytics-action="NavigationLink" data-analytics-label="features">Features</a></li>
    
        
            <li class="masthead-nav-item">
                <a
                    class="masthead-nav-control"
                    href="/subscribe"
                >Subscribe</a>
            </li>
        
        <li class="masthead-nav-item">
            <a
                class="masthead-nav-control"
                href="/join"
                data-analytics-action="SignUpClick"
            >Join</a>
        </li>
        <li class="masthead-nav-item">
            <a
                class="masthead-nav-control"
                href="https://secure.last.fm/login"
            >Login</a>
        </li>
    
</ul></div><div
                    class=" navlist navlist--more masthead-nav hidden-xs " data-require="components/primary-nav" data-more-string="More…"><ul
                        class="js-navlist-items navlist-items" aria-label="Primary navigation"><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/dashboard" data-analytics-action="NavigationLink" data-analytics-label="live">Live</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/music" data-analytics-action="NavigationLink" data-analytics-label="music">Music</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/events" data-analytics-action="NavigationLink" data-analytics-label="events">Events</a></li><li class="masthead-nav-item"><a
                class=" masthead-nav-control " href="/features" data-analytics-action="NavigationLink" data-analytics-label="features">Features</a></li></ul></div><ul
            class=" site-auth site-auth--anon hidden-xs ">
    <li class="site-auth-item"><a
                class="site-auth-control" href="/join" data-analytics-action="SignUpClick">Join</a></li><li class="site-auth-item"><a
                class="site-auth-control" href="https://secure.last.fm/login">Login</a></li>
</ul></div></nav>

    

    

    

    

    

    
    


    

    
    
    
    <div
        class="nag-bar nag-bar--plybar-masthead-release-warning"
        
        role="status"
    >
        <div class="container">
            
            <p class="nag-bar-message">
                
        
        A new version of Last.fm is available, to keep everything running smoothly, please <a href="javascript:window.location.reload()">reload</a> the site.
    
    
            </p>
        </div>
    </div>



    

    

    
    







    
    

    <header class="
        header
        
            header--with-avatar
        
        
            header--overview
        
        
            header--user
        
        
    ">
        
            <div class="header-background"></div>
        

        
    


        <div class="container">
            <div class="header-inner-wrap">
                
                    

    

    

    
    

    <div class="header-avatar">
        <div class="expand-image-show-on-focus header-avatar-inner-wrap">
            
                
                    
    <img
        src="https://lastfm-img2.akamaized.net/i/u/avatar170s/818148bf682d429dc215c1705eb27b98"
        alt="Foo"
        class="avatar"
        itemprop="image"
    />

                
            

            
        </div>

        
    </div>

    

                
                <div class="header-info">
                    
    <div class="header-info-primary header-info-primary--with-columns">

        <div class="header-info-primary-col1">
            <div class="header-title-column-ellipsis-wrap">
                <div class="header-title-label-wrap">
                    <h1 class="header-title">
                        <a
            href="/user/Foo"
            
            
        >Foo</a>
                    </h1>
                    
                        <span
                            class="
                                label
                                user-status-None
                            "
                        ></span>
                    
                    
                </div>

                <p class="header-title-secondary">
                    <span class="header-title-display-name">Shane
                    </span>
                    <span class="header-scrobble-since">• scrobbling since 27 May 2004
                    </span>
                </p>
            </div>

            
    
        
    <nav
        class="
            
                navlist
            
            secondary-nav
            
                navlist--more
            
            
        "
        aria-label="Secondary navigation"
        
            data-require="components/collapsing-nav"
            data-more-string="More…"
        
    >
        <ul class="navlist-items js-navlist-items">
            <li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--overview
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                                    secondary-nav-item-link--active
                                
                            "
                            href="/user/Foo"
                            
                        >
                            Overview
                            
                                <span class="sr-only">(current section)</span>
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--week
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/Foo/listening-report/week"
                            
                        >
                            Last.week
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--library
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/Foo/library"
                            
                        >
                            Library
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--following
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/Foo/following"
                            
                        >
                            Following
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--followers
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/Foo/followers"
                            
                        >
                            Followers
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--loved
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/Foo/loved"
                            
                        >
                            Loved Tracks
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--events
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/Foo/events"
                            
                        >
                            Events
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--neighbours
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/Foo/neighbours"
                            
                        >
                            Neighbours
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--tags
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/Foo/tags"
                            
                        >
                            Tags
                            
                        </a></li><li
                    class="
                        
                            navlist-item
                        
                        secondary-nav-item
                        
                            secondary-nav-item--shoutbox
                        
                    "
                ><a
                            class="
                                secondary-nav-item-link
                                
                            "
                            href="/user/Foo/shoutbox"
                            
                        >
                            Shouts
                            
                        </a></li>
        </ul>
    </nav>

    

        </div>

        
    
    

    

    
    
    


        
    

    </div>
    <div
        class="
            header-info-secondary
            
        "
    >
        
        
    <ul class="header-metadata">

        

        
        
            
                <li class="
                    header-metadata-item
                    header-metadata-item--scrobbles
                ">
                    <h4 class="header-metadata-title">Scrobbles</h4>
                    
                    
                    <p
                        class="header-metadata-display"
                        
                        ><a href="/user/Foo/library">214</a></p>
                </li>
            
                <li class="
                    header-metadata-item
                    header-metadata-item--artists
                ">
                    <h4 class="header-metadata-title">Artists</h4>
                    
                    
                    <p
                        class="header-metadata-display"
                        
                        ><a href="/user/Foo/library/artists">28</a></p>
                </li>
            
        

        

        

        
        

        

        
        
    </ul>

        
    </div>

                </div>
            </div>
        </div>
    </header>



    
    <div id="mantle_skin" class="adaptive-skin-container">
        <div class="adaptive-skin-wrapper">
            <div id="adSkinLeft" class="adaptive-skin-left"></div>
            <div id="adSkinRight" class="adaptive-skin-right"></div>
        </div>
        
    
        
        
            <div id="skin" class="skin lastfm-ad" data-ads-placement='{&#34;sizes&#34;: [[1600, 1000]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;id&#34;: &#34;skin&#34;, &#34;collapse_before_load&#34;: true}'></div>
        
        
    


        
        
            <div class="content-top">
                <div class="content-top-inner-wrap">
                    
                        
    
        
        
            <div id="leader_top" class="leader_top lastfm-ad" data-ads-placement='{&#34;sizes&#34;: [[728, 90], [970, 66], [970, 250], [728, 91]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;id&#34;: &#34;leader_top&#34;}'></div>
        
        
    

                        
                    

                    <div class="container content-top-lower">
                        
                            


                        

                        
    

    
        
    


                        

                        
                            
                        

                        

                        
                    </div>
                </div>
            </div>
        

        
            <div class="container page-content">
                
    <div class="row">
        <div class="col-main">

            

                

                
    <div class="profile-mobile-featured-track">
        
    
    

    

    
    
    


        <div id="inline-video-target"></div>
        
    

    </div>


                
    


                
                    <section
                        id="recent-tracks-section"
                        class="
                            clearfix
                            
                        "
                        
                        >
                        <h2>
                            <a class="text-colour-link"
                               href="/user/Foo/library"
                            >Recent Tracks</a>
                        </h2>
                        
                        


    










<table class="chartlist
             
             chartlist--no-index
             
             
             chartlist--with-buylinks
             chartlist--with-more
             chartlist--no-duration
             
             chartlist--no-countbar
             chartlist--no-big-image
             chartlist--compact-image
             chartlist--no-download
             
             
             ">
    <thead class="sr-only">
        <tr>
            

            
            
                
                <th>Play</th>
            
            
                
                <th class="chartlist-loved-heading">Loved</th>
            

            
                
                <th>Artist and track name</th>
            

            

            
                
                <th class="chartlist-buylinks-heading">Buy</th>
            

            
                
                <th class="chartlist-more-heading">Options</th>
            

            

            
                
                <th class="chartlist-timestamp-heading">Timestamp</th>
            

            

            

            

            
        </tr>
    </thead>
    <tbody>
    
    
        
        
        
        
        
        
        
        
        
            
        
        
        
        
        <tr
            class="
                js-link-block
                js-focus-controls-container
                
                
                
            "
            data-ajax-form-state
            
                data-recenttrack-id="be781cb53160bb43aa0a1aa6f3317f5f"
                data-timestamp="1108290005"
            
            
        >
            
            
            
                <td class="chartlist-play">
                    
                        
    <div class="chartlist-play-image">
        
    

    

    
        <span class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/57ccaee19c2c487fba10ea739cea8b13.jpg"
            alt="The Velvet Underground &amp; Nico 45th Anniversary (Super Deluxe Edition)"
            
            class="cover-art"
        />
    

    
        </span>
    


        
    

    
        
            
        

        
            <a
                class="
                    image-overlay-playlink-link
                    
                        js-playlink
                    
                "
                href="https://www.youtube.com/watch?v=GFQWflbG4h4"
                target="_blank"

                
                    
                        data-youtube-id="GFQWflbG4h4"
                        data-youtube-url="https://www.youtube.com/watch?v=GFQWflbG4h4"
                    
                

                data-track-name="I&#39;ll Be Your Mirror"
                data-track-url="/music/The+Velvet+Underground/_/I%27ll+Be+Your+Mirror"
                
                    data-artist-name="The Velvet Underground"
                    data-artist-url="/music/The+Velvet+Underground"
                
                title="Play track"
                
                data-analytics-action="PlayTrackOnPage"
                data-analytics-label="youtube"

                
            >
                Play on youtube
            </a>
        
    

    </div>

                    
                </td>
            
            
                <td class="chartlist-loved">
                    
    

    
        <div
            class="love-button-toggle"
            data-ajax-form-state=""
        >
            <div class="love-button-wrapper--loved">
                
                    <span
                        class="
                            love-button
                            love-button--loved
                        "
                    >
                        
                            Foo loves this track
                        
                    </span>
                
            </div>

            <div class="love-button-wrapper--unloved">
                
                    <span
                        class="love-button"
                    >
                        
                            Foo doesn't love this track
                        
                    </span>
                
            </div>
        </div>
    

                </td>
            
            <td class="chartlist-name" >
                
                <span class="chartlist-ellipsis-wrap">
                    <span class="chartlist-artists">
            <a
            href="/music/The+Velvet+Underground"
            
            
                title="The Velvet Underground"
            
        >The Velvet Underground</a>
        </span><span class="artist-name-spacer"> — </span>
    
    
    <a
            href="/music/The+Velvet+Underground/_/I%27ll+Be+Your+Mirror"
            
            
                title="The Velvet Underground — I&#39;ll Be Your Mirror"
            
                class="link-block-target"
            
        >I&#39;ll Be Your Mirror</a>

                </span>
                
                    <a
                        class="
                            chartlist-cover-link
                            js-link-block-cover-link
                        "
                        href="/music/The+Velvet+Underground/_/I%27ll+Be+Your+Mirror"
                        tabindex="-1"
                        aria-hidden="true"
                        
                    ></a>
                
            </td>
            
            
                <td class="chartlist-buylinks chartlist-focus-control-cell">
                    
        <div class="lazy-buylinks focus-control">
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                    
                "
                aria-expanded="false"
                data-lazy-buylink
                data-lazy-buylink-url="/music/The+Velvet+Underground/_/I%27ll+Be+Your+Mirror/+partial/buylinks"
            >Buy</button>
        </div>
    
                </td>
            
            
                <td class="chartlist-more chartlist-focus-control-cell">
                    

    
    

    
        
        <div class="focus-control">
            <button
                class="
                    disclose-trigger
                    chartlist-more-button
                "
                aria-expanded="false"
                aria-controls="chartlist-more-761740e6-9d89-43e0-8ccb-b2eb7b6abc2b"
                data-disclose-dropdown
            >More</button>
            <ul
                id="chartlist-more-761740e6-9d89-43e0-8ccb-b2eb7b6abc2b"
                class="
                    disclose-hide
                    disclose-hide--js-only
                    dropdown-menu-clickable
                    chartlist-more-menu
                "
            >
                

                
                    <li>
                        
                            
    
        <a
            href="https://secure.last.fm/login?next=/user/foo"
            class="mimic-link dropdown-menu-clickable-item"
        >
            Set track as current obsession
        </a>
    

                        
                    </li>
                

                
            </ul>
        </div>
    

                </td>
            
            
            
                <td class="chartlist-timestamp">
                    
                        Unknown date
                    
                </td>
            
            
            
            
            
        </tr>
    
        
        
        
        
        
        
        
        
        
            
        
        
        
        
        <tr
            class="
                js-link-block
                js-focus-controls-container
                
                
                
                    chartlist-row--even
                
            "
            data-ajax-form-state
            
                data-recenttrack-id="552b3cdd1e80211ed31bf8c4744fe0ef"
                data-timestamp="1108290004"
            
            
        >
            
            
            
                <td class="chartlist-play">
                    
                        
    <div class="chartlist-play-image">
        
    

    

    
        <span class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/9b86fc1148aa46fbc684f79b29cc5229.jpg"
            alt="Elvis 30 #1 Hits"
            
            class="cover-art"
        />
    

    
        </span>
    


        
    

    
        
            
        

        
            <a
                class="
                    image-overlay-playlink-link
                    
                        js-playlink
                    
                "
                href="https://www.youtube.com/watch?v=IHh8rKE4qs0"
                target="_blank"

                
                    
                        data-youtube-id="IHh8rKE4qs0"
                        data-youtube-url="https://www.youtube.com/watch?v=IHh8rKE4qs0"
                    
                

                data-track-name="A Big Hunk o&#39; Love"
                data-track-url="/music/Elvis+Presley/_/A+Big+Hunk+o%27+Love"
                
                    data-artist-name="Elvis Presley"
                    data-artist-url="/music/Elvis+Presley"
                
                title="Play track"
                
                data-analytics-action="PlayTrackOnPage"
                data-analytics-label="youtube"

                
            >
                Play on youtube
            </a>
        
    

    </div>

                    
                </td>
            
            
                <td class="chartlist-loved">
                    
    

    
        <div
            class="love-button-toggle"
            data-ajax-form-state=""
        >
            <div class="love-button-wrapper--loved">
                
                    <span
                        class="
                            love-button
                            love-button--loved
                        "
                    >
                        
                            Foo loves this track
                        
                    </span>
                
            </div>

            <div class="love-button-wrapper--unloved">
                
                    <span
                        class="love-button"
                    >
                        
                            Foo doesn't love this track
                        
                    </span>
                
            </div>
        </div>
    

                </td>
            
            <td class="chartlist-name" >
                
                <span class="chartlist-ellipsis-wrap">
                    <span class="chartlist-artists">
            <a
            href="/music/Elvis+Presley"
            
            
                title="Elvis Presley"
            
        >Elvis Presley</a>
        </span><span class="artist-name-spacer"> — </span>
    
    
    <a
            href="/music/Elvis+Presley/_/A+Big+Hunk+o%27+Love"
            
            
                title="Elvis Presley — A Big Hunk o&#39; Love"
            
                class="link-block-target"
            
        >A Big Hunk o&#39; Love</a>

                </span>
                
                    <a
                        class="
                            chartlist-cover-link
                            js-link-block-cover-link
                        "
                        href="/music/Elvis+Presley/_/A+Big+Hunk+o%27+Love"
                        tabindex="-1"
                        aria-hidden="true"
                        
                    ></a>
                
            </td>
            
            
                <td class="chartlist-buylinks chartlist-focus-control-cell">
                    
        <div class="lazy-buylinks focus-control">
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                    
                "
                aria-expanded="false"
                data-lazy-buylink
                data-lazy-buylink-url="/music/Elvis+Presley/_/A+Big+Hunk+o%27+Love/+partial/buylinks"
            >Buy</button>
        </div>
    
                </td>
            
            
                <td class="chartlist-more chartlist-focus-control-cell">
                    

    
    

    
        
        <div class="focus-control">
            <button
                class="
                    disclose-trigger
                    chartlist-more-button
                "
                aria-expanded="false"
                aria-controls="chartlist-more-7e216236-e485-4b1c-b1bc-b37cbf6bfa48"
                data-disclose-dropdown
            >More</button>
            <ul
                id="chartlist-more-7e216236-e485-4b1c-b1bc-b37cbf6bfa48"
                class="
                    disclose-hide
                    disclose-hide--js-only
                    dropdown-menu-clickable
                    chartlist-more-menu
                "
            >
                

                
                    <li>
                        
                            
    
        <a
            href="https://secure.last.fm/login?next=/user/foo"
            class="mimic-link dropdown-menu-clickable-item"
        >
            Set track as current obsession
        </a>
    

                        
                    </li>
                

                
            </ul>
        </div>
    

                </td>
            
            
            
                <td class="chartlist-timestamp">
                    
                        Unknown date
                    
                </td>
            
            
            
            
            
        </tr>
    
        
        
        
        
        
        
        
        
        
            
        
        
        
        
        <tr
            class="
                js-link-block
                js-focus-controls-container
                
                
                
            "
            data-ajax-form-state
            
                data-recenttrack-id="d55d0281ac67a346865110d91c91cebf"
                data-timestamp="1108290004"
            
            
        >
            
            
            
                <td class="chartlist-play">
                    
                        
    <div class="chartlist-play-image">
        
    

    

    
        <span class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/57ccaee19c2c487fba10ea739cea8b13.jpg"
            alt="The Velvet Underground &amp; Nico 45th Anniversary (Super Deluxe Edition)"
            
            class="cover-art"
        />
    

    
        </span>
    


        
    

    
        
            
        

        
            <a
                class="
                    image-overlay-playlink-link
                    
                        js-playlink
                    
                "
                href="https://www.youtube.com/watch?v=GFQWflbG4h4"
                target="_blank"

                
                    
                        data-youtube-id="GFQWflbG4h4"
                        data-youtube-url="https://www.youtube.com/watch?v=GFQWflbG4h4"
                    
                

                data-track-name="I&#39;ll Be Your Mirror"
                data-track-url="/music/The+Velvet+Underground/_/I%27ll+Be+Your+Mirror"
                
                    data-artist-name="The Velvet Underground"
                    data-artist-url="/music/The+Velvet+Underground"
                
                title="Play track"
                
                data-analytics-action="PlayTrackOnPage"
                data-analytics-label="youtube"

                
            >
                Play on youtube
            </a>
        
    

    </div>

                    
                </td>
            
            
                <td class="chartlist-loved">
                    
    

    
        <div
            class="love-button-toggle"
            data-ajax-form-state=""
        >
            <div class="love-button-wrapper--loved">
                
                    <span
                        class="
                            love-button
                            love-button--loved
                        "
                    >
                        
                            Foo loves this track
                        
                    </span>
                
            </div>

            <div class="love-button-wrapper--unloved">
                
                    <span
                        class="love-button"
                    >
                        
                            Foo doesn't love this track
                        
                    </span>
                
            </div>
        </div>
    

                </td>
            
            <td class="chartlist-name" >
                
                <span class="chartlist-ellipsis-wrap">
                    <span class="chartlist-artists">
            <a
            href="/music/The+Velvet+Underground"
            
            
                title="The Velvet Underground"
            
        >The Velvet Underground</a>
        </span><span class="artist-name-spacer"> — </span>
    
    
    <a
            href="/music/The+Velvet+Underground/_/I%27ll+Be+Your+Mirror"
            
            
                title="The Velvet Underground — I&#39;ll Be Your Mirror"
            
                class="link-block-target"
            
        >I&#39;ll Be Your Mirror</a>

                </span>
                
                    <a
                        class="
                            chartlist-cover-link
                            js-link-block-cover-link
                        "
                        href="/music/The+Velvet+Underground/_/I%27ll+Be+Your+Mirror"
                        tabindex="-1"
                        aria-hidden="true"
                        
                    ></a>
                
            </td>
            
            
                <td class="chartlist-buylinks chartlist-focus-control-cell">
                    
        <div class="lazy-buylinks focus-control">
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                    
                "
                aria-expanded="false"
                data-lazy-buylink
                data-lazy-buylink-url="/music/The+Velvet+Underground/_/I%27ll+Be+Your+Mirror/+partial/buylinks"
            >Buy</button>
        </div>
    
                </td>
            
            
                <td class="chartlist-more chartlist-focus-control-cell">
                    

    
    

    
        
        <div class="focus-control">
            <button
                class="
                    disclose-trigger
                    chartlist-more-button
                "
                aria-expanded="false"
                aria-controls="chartlist-more-6de31285-f384-4960-ab72-e4a56dbce521"
                data-disclose-dropdown
            >More</button>
            <ul
                id="chartlist-more-6de31285-f384-4960-ab72-e4a56dbce521"
                class="
                    disclose-hide
                    disclose-hide--js-only
                    dropdown-menu-clickable
                    chartlist-more-menu
                "
            >
                

                
                    <li>
                        
                            
    
        <a
            href="https://secure.last.fm/login?next=/user/foo"
            class="mimic-link dropdown-menu-clickable-item"
        >
            Set track as current obsession
        </a>
    

                        
                    </li>
                

                
            </ul>
        </div>
    

                </td>
            
            
            
                <td class="chartlist-timestamp">
                    
                        Unknown date
                    
                </td>
            
            
            
            
            
        </tr>
    
        
        
        
        
        
        
        
        
        
            
        
        
        
        
        <tr
            class="
                js-link-block
                js-focus-controls-container
                
                
                
                    chartlist-row--even
                
            "
            data-ajax-form-state
            
                data-recenttrack-id="de14c03a3b5dd74a3be26e031c116186"
                data-timestamp="1108290003"
            
            
        >
            
            
            
                <td class="chartlist-play">
                    
                        
    <div class="chartlist-play-image">
        
    

    

    
        <span class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/cf205be5728a25b1ae464fbe288151cf.jpg"
            alt="The Jones Laughing Record"
            
            class="cover-art"
        />
    

    
        </span>
    


        
    

    

    </div>

                    
                </td>
            
            
                <td class="chartlist-loved">
                    
    

    
        <div
            class="love-button-toggle"
            data-ajax-form-state=""
        >
            <div class="love-button-wrapper--loved">
                
                    <span
                        class="
                            love-button
                            love-button--loved
                        "
                    >
                        
                            Foo loves this track
                        
                    </span>
                
            </div>

            <div class="love-button-wrapper--unloved">
                
                    <span
                        class="love-button"
                    >
                        
                            Foo doesn't love this track
                        
                    </span>
                
            </div>
        </div>
    

                </td>
            
            <td class="chartlist-name" >
                
                <span class="chartlist-ellipsis-wrap">
                    <span class="chartlist-artists">
            <a
            href="/music/Spike+Jones+&amp;+His+City+Slickers"
            
            
                title="Spike Jones &amp; His City Slickers"
            
        >Spike Jones &amp; His City Slickers</a>
        </span><span class="artist-name-spacer"> — </span>
    
    
    <a
            href="/music/Spike+Jones+&amp;+His+City+Slickers/_/Red+Wing"
            
            
                title="Spike Jones &amp; His City Slickers — Red Wing"
            
                class="link-block-target"
            
        >Red Wing</a>

                </span>
                
                    <a
                        class="
                            chartlist-cover-link
                            js-link-block-cover-link
                        "
                        href="/music/Spike+Jones+&amp;+His+City+Slickers/_/Red+Wing"
                        tabindex="-1"
                        aria-hidden="true"
                        
                    ></a>
                
            </td>
            
            
                <td class="chartlist-buylinks chartlist-focus-control-cell">
                    
        <div class="lazy-buylinks focus-control">
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                    
                "
                aria-expanded="false"
                data-lazy-buylink
                data-lazy-buylink-url="/music/Spike+Jones+&amp;+His+City+Slickers/_/Red+Wing/+partial/buylinks"
            >Buy</button>
        </div>
    
                </td>
            
            
                <td class="chartlist-more chartlist-focus-control-cell">
                    

    
    

    
        
        <div class="focus-control">
            <button
                class="
                    disclose-trigger
                    chartlist-more-button
                "
                aria-expanded="false"
                aria-controls="chartlist-more-a6e98d55-b5a5-4aa7-ab44-301a9499b715"
                data-disclose-dropdown
            >More</button>
            <ul
                id="chartlist-more-a6e98d55-b5a5-4aa7-ab44-301a9499b715"
                class="
                    disclose-hide
                    disclose-hide--js-only
                    dropdown-menu-clickable
                    chartlist-more-menu
                "
            >
                

                
                    <li>
                        
                            
    
        <a
            href="https://secure.last.fm/login?next=/user/foo"
            class="mimic-link dropdown-menu-clickable-item"
        >
            Set track as current obsession
        </a>
    

                        
                    </li>
                

                
            </ul>
        </div>
    

                </td>
            
            
            
                <td class="chartlist-timestamp">
                    
                        Unknown date
                    
                </td>
            
            
            
            
            
        </tr>
    
        
        
        
        
        
        
        
        
        
            
        
        
        
        
        <tr
            class="
                js-link-block
                js-focus-controls-container
                
                
                
            "
            data-ajax-form-state
            
                data-recenttrack-id="efa55d19c5b11a24a0ad2fcfcc3ccb87"
                data-timestamp="1108290003"
            
            
        >
            
            
            
                <td class="chartlist-play">
                    
                        
    <div class="chartlist-play-image">
        
    

    

    
        <span class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/9b86fc1148aa46fbc684f79b29cc5229.jpg"
            alt="Elvis 30 #1 Hits"
            
            class="cover-art"
        />
    

    
        </span>
    


        
    

    
        
            
        

        
            <a
                class="
                    image-overlay-playlink-link
                    
                        js-playlink
                    
                "
                href="https://www.youtube.com/watch?v=IHh8rKE4qs0"
                target="_blank"

                
                    
                        data-youtube-id="IHh8rKE4qs0"
                        data-youtube-url="https://www.youtube.com/watch?v=IHh8rKE4qs0"
                    
                

                data-track-name="A Big Hunk o&#39; Love"
                data-track-url="/music/Elvis+Presley/_/A+Big+Hunk+o%27+Love"
                
                    data-artist-name="Elvis Presley"
                    data-artist-url="/music/Elvis+Presley"
                
                title="Play track"
                
                data-analytics-action="PlayTrackOnPage"
                data-analytics-label="youtube"

                
            >
                Play on youtube
            </a>
        
    

    </div>

                    
                </td>
            
            
                <td class="chartlist-loved">
                    
    

    
        <div
            class="love-button-toggle"
            data-ajax-form-state=""
        >
            <div class="love-button-wrapper--loved">
                
                    <span
                        class="
                            love-button
                            love-button--loved
                        "
                    >
                        
                            Foo loves this track
                        
                    </span>
                
            </div>

            <div class="love-button-wrapper--unloved">
                
                    <span
                        class="love-button"
                    >
                        
                            Foo doesn't love this track
                        
                    </span>
                
            </div>
        </div>
    

                </td>
            
            <td class="chartlist-name" >
                
                <span class="chartlist-ellipsis-wrap">
                    <span class="chartlist-artists">
            <a
            href="/music/Elvis+Presley"
            
            
                title="Elvis Presley"
            
        >Elvis Presley</a>
        </span><span class="artist-name-spacer"> — </span>
    
    
    <a
            href="/music/Elvis+Presley/_/A+Big+Hunk+o%27+Love"
            
            
                title="Elvis Presley — A Big Hunk o&#39; Love"
            
                class="link-block-target"
            
        >A Big Hunk o&#39; Love</a>

                </span>
                
                    <a
                        class="
                            chartlist-cover-link
                            js-link-block-cover-link
                        "
                        href="/music/Elvis+Presley/_/A+Big+Hunk+o%27+Love"
                        tabindex="-1"
                        aria-hidden="true"
                        
                    ></a>
                
            </td>
            
            
                <td class="chartlist-buylinks chartlist-focus-control-cell">
                    
        <div class="lazy-buylinks focus-control">
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                    
                "
                aria-expanded="false"
                data-lazy-buylink
                data-lazy-buylink-url="/music/Elvis+Presley/_/A+Big+Hunk+o%27+Love/+partial/buylinks"
            >Buy</button>
        </div>
    
                </td>
            
            
                <td class="chartlist-more chartlist-focus-control-cell">
                    

    
    

    
        
        <div class="focus-control">
            <button
                class="
                    disclose-trigger
                    chartlist-more-button
                "
                aria-expanded="false"
                aria-controls="chartlist-more-39d47ffe-dc00-463b-bcad-0e03d837588f"
                data-disclose-dropdown
            >More</button>
            <ul
                id="chartlist-more-39d47ffe-dc00-463b-bcad-0e03d837588f"
                class="
                    disclose-hide
                    disclose-hide--js-only
                    dropdown-menu-clickable
                    chartlist-more-menu
                "
            >
                

                
                    <li>
                        
                            
    
        <a
            href="https://secure.last.fm/login?next=/user/foo"
            class="mimic-link dropdown-menu-clickable-item"
        >
            Set track as current obsession
        </a>
    

                        
                    </li>
                

                
            </ul>
        </div>
    

                </td>
            
            
            
                <td class="chartlist-timestamp">
                    
                        Unknown date
                    
                </td>
            
            
            
            
            
        </tr>
    
        
        
        
        
        
        
        
        
        
            
        
        
        
            <tr class="chartlist-row--interlist-ad" data-ad-container>
                <td colspan="6">
                    <div id="mobile_pos_1" class="mobile_pos_1 lastfm-ad-mobile" data-ads-placement='{&#34;sizes&#34;: [[300, 250], [320, 50]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;1&#34;}, &#34;id&#34;: &#34;mobile_pos_1&#34;, &#34;is_mobile&#34;: true}'></div>
                </td>
            </tr>
        
        
        <tr
            class="
                js-link-block
                js-focus-controls-container
                
                
                
                    chartlist-row--even
                
            "
            data-ajax-form-state
            
                data-recenttrack-id="294c5c206c66789b3dcd83a94d18b970"
                data-timestamp="1108290003"
            
            
        >
            
            
            
                <td class="chartlist-play">
                    
                        
    <div class="chartlist-play-image">
        
    

    

    
        <span class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/9b86fc1148aa46fbc684f79b29cc5229.jpg"
            alt="Elvis 30 #1 Hits"
            
            class="cover-art"
        />
    

    
        </span>
    


        
    

    

    </div>

                    
                </td>
            
            
                <td class="chartlist-loved">
                    
    

    
        <div
            class="love-button-toggle"
            data-ajax-form-state=""
        >
            <div class="love-button-wrapper--loved">
                
                    <span
                        class="
                            love-button
                            love-button--loved
                        "
                    >
                        
                            Foo loves this track
                        
                    </span>
                
            </div>

            <div class="love-button-wrapper--unloved">
                
                    <span
                        class="love-button"
                    >
                        
                            Foo doesn't love this track
                        
                    </span>
                
            </div>
        </div>
    

                </td>
            
            <td class="chartlist-name" >
                
                <span class="chartlist-ellipsis-wrap">
                    <span class="chartlist-artists">
            <a
            href="/music/Elvis+Presley"
            
            
                title="Elvis Presley"
            
        >Elvis Presley</a>
        </span><span class="artist-name-spacer"> — </span>
    
    
    <a
            href="/music/Elvis+Presley/_/(You%27re+The)+Devil+in+Disguise"
            
            
                title="Elvis Presley — (You&#39;re The) Devil in Disguise"
            
                class="link-block-target"
            
        >(You&#39;re The) Devil in Disguise</a>

                </span>
                
                    <a
                        class="
                            chartlist-cover-link
                            js-link-block-cover-link
                        "
                        href="/music/Elvis+Presley/_/(You%27re+The)+Devil+in+Disguise"
                        tabindex="-1"
                        aria-hidden="true"
                        
                    ></a>
                
            </td>
            
            
                <td class="chartlist-buylinks chartlist-focus-control-cell">
                    
        <div class="lazy-buylinks focus-control">
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                    
                "
                aria-expanded="false"
                data-lazy-buylink
                data-lazy-buylink-url="/music/Elvis+Presley/_/(You%27re+The)+Devil+in+Disguise/+partial/buylinks"
            >Buy</button>
        </div>
    
                </td>
            
            
                <td class="chartlist-more chartlist-focus-control-cell">
                    

    
    

    
        
        <div class="focus-control">
            <button
                class="
                    disclose-trigger
                    chartlist-more-button
                "
                aria-expanded="false"
                aria-controls="chartlist-more-aa6eb33d-f18d-4d97-b30b-c19e2c6a8110"
                data-disclose-dropdown
            >More</button>
            <ul
                id="chartlist-more-aa6eb33d-f18d-4d97-b30b-c19e2c6a8110"
                class="
                    disclose-hide
                    disclose-hide--js-only
                    dropdown-menu-clickable
                    chartlist-more-menu
                "
            >
                

                
                    <li>
                        
                            
    
        <a
            href="https://secure.last.fm/login?next=/user/foo"
            class="mimic-link dropdown-menu-clickable-item"
        >
            Set track as current obsession
        </a>
    

                        
                    </li>
                

                
            </ul>
        </div>
    

                </td>
            
            
            
                <td class="chartlist-timestamp">
                    
                        Unknown date
                    
                </td>
            
            
            
            
            
        </tr>
    
        
        
        
        
        
        
        
        
        
            
        
        
        
        
        <tr
            class="
                js-link-block
                js-focus-controls-container
                
                
                
            "
            data-ajax-form-state
            
                data-recenttrack-id="6fa28e2d631ce3d89a7c513a07bffb8f"
                data-timestamp="1108290003"
            
            
        >
            
            
            
                <td class="chartlist-play">
                    
                        
    <div class="chartlist-play-image">
        
    

    

    
        <span class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/57ccaee19c2c487fba10ea739cea8b13.jpg"
            alt="The Velvet Underground &amp; Nico 45th Anniversary (Super Deluxe Edition)"
            
            class="cover-art"
        />
    

    
        </span>
    


        
    

    
        
            
        

        
            <a
                class="
                    image-overlay-playlink-link
                    
                        js-playlink
                    
                "
                href="https://www.youtube.com/watch?v=GFQWflbG4h4"
                target="_blank"

                
                    
                        data-youtube-id="GFQWflbG4h4"
                        data-youtube-url="https://www.youtube.com/watch?v=GFQWflbG4h4"
                    
                

                data-track-name="I&#39;ll Be Your Mirror"
                data-track-url="/music/The+Velvet+Underground/_/I%27ll+Be+Your+Mirror"
                
                    data-artist-name="The Velvet Underground"
                    data-artist-url="/music/The+Velvet+Underground"
                
                title="Play track"
                
                data-analytics-action="PlayTrackOnPage"
                data-analytics-label="youtube"

                
            >
                Play on youtube
            </a>
        
    

    </div>

                    
                </td>
            
            
                <td class="chartlist-loved">
                    
    

    
        <div
            class="love-button-toggle"
            data-ajax-form-state=""
        >
            <div class="love-button-wrapper--loved">
                
                    <span
                        class="
                            love-button
                            love-button--loved
                        "
                    >
                        
                            Foo loves this track
                        
                    </span>
                
            </div>

            <div class="love-button-wrapper--unloved">
                
                    <span
                        class="love-button"
                    >
                        
                            Foo doesn't love this track
                        
                    </span>
                
            </div>
        </div>
    

                </td>
            
            <td class="chartlist-name" >
                
                <span class="chartlist-ellipsis-wrap">
                    <span class="chartlist-artists">
            <a
            href="/music/The+Velvet+Underground"
            
            
                title="The Velvet Underground"
            
        >The Velvet Underground</a>
        </span><span class="artist-name-spacer"> — </span>
    
    
    <a
            href="/music/The+Velvet+Underground/_/I%27ll+Be+Your+Mirror"
            
            
                title="The Velvet Underground — I&#39;ll Be Your Mirror"
            
                class="link-block-target"
            
        >I&#39;ll Be Your Mirror</a>

                </span>
                
                    <a
                        class="
                            chartlist-cover-link
                            js-link-block-cover-link
                        "
                        href="/music/The+Velvet+Underground/_/I%27ll+Be+Your+Mirror"
                        tabindex="-1"
                        aria-hidden="true"
                        
                    ></a>
                
            </td>
            
            
                <td class="chartlist-buylinks chartlist-focus-control-cell">
                    
        <div class="lazy-buylinks focus-control">
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                    
                "
                aria-expanded="false"
                data-lazy-buylink
                data-lazy-buylink-url="/music/The+Velvet+Underground/_/I%27ll+Be+Your+Mirror/+partial/buylinks"
            >Buy</button>
        </div>
    
                </td>
            
            
                <td class="chartlist-more chartlist-focus-control-cell">
                    

    
    

    
        
        <div class="focus-control">
            <button
                class="
                    disclose-trigger
                    chartlist-more-button
                "
                aria-expanded="false"
                aria-controls="chartlist-more-54f04c58-a723-4a99-9e18-2a554d5f048d"
                data-disclose-dropdown
            >More</button>
            <ul
                id="chartlist-more-54f04c58-a723-4a99-9e18-2a554d5f048d"
                class="
                    disclose-hide
                    disclose-hide--js-only
                    dropdown-menu-clickable
                    chartlist-more-menu
                "
            >
                

                
                    <li>
                        
                            
    
        <a
            href="https://secure.last.fm/login?next=/user/foo"
            class="mimic-link dropdown-menu-clickable-item"
        >
            Set track as current obsession
        </a>
    

                        
                    </li>
                

                
            </ul>
        </div>
    

                </td>
            
            
            
                <td class="chartlist-timestamp">
                    
                        Unknown date
                    
                </td>
            
            
            
            
            
        </tr>
    
        
        
        
        
        
        
        
        
        
            
        
        
        
        
        <tr
            class="
                js-link-block
                js-focus-controls-container
                
                
                
                    chartlist-row--even
                
            "
            data-ajax-form-state
            
                data-recenttrack-id="30016bd30cc60b7d26cb06fc4c34320b"
                data-timestamp="1108290003"
            
            
        >
            
            
            
                <td class="chartlist-play">
                    
                        
    <div class="chartlist-play-image">
        
    

    

    
        <span class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/bd8dfea4657844acb87016258298ec78.jpg"
            alt="Barafundle"
            
            class="cover-art"
        />
    

    
        </span>
    


        
    

    
        
            
        

        
            <a
                class="
                    image-overlay-playlink-link
                    
                        js-playlink
                    
                "
                href="https://www.youtube.com/watch?v=KGuuVfn3Y-A"
                target="_blank"

                
                    
                        data-youtube-id="KGuuVfn3Y-A"
                        data-youtube-url="https://www.youtube.com/watch?v=KGuuVfn3Y-A"
                    
                

                data-track-name="Better Rooms..."
                data-track-url="/music/Gorky%27s+Zygotic+Mynci/_/Better+Rooms..."
                
                    data-artist-name="Gorky&#39;s Zygotic Mynci"
                    data-artist-url="/music/Gorky%27s+Zygotic+Mynci"
                
                title="Play track"
                
                data-analytics-action="PlayTrackOnPage"
                data-analytics-label="youtube"

                
            >
                Play on youtube
            </a>
        
    

    </div>

                    
                </td>
            
            
                <td class="chartlist-loved">
                    
    

    
        <div
            class="love-button-toggle"
            data-ajax-form-state=""
        >
            <div class="love-button-wrapper--loved">
                
                    <span
                        class="
                            love-button
                            love-button--loved
                        "
                    >
                        
                            Foo loves this track
                        
                    </span>
                
            </div>

            <div class="love-button-wrapper--unloved">
                
                    <span
                        class="love-button"
                    >
                        
                            Foo doesn't love this track
                        
                    </span>
                
            </div>
        </div>
    

                </td>
            
            <td class="chartlist-name" >
                
                <span class="chartlist-ellipsis-wrap">
                    <span class="chartlist-artists">
            <a
            href="/music/Gorky%27s+Zygotic+Mynci"
            
            
                title="Gorky&#39;s Zygotic Mynci"
            
        >Gorky&#39;s Zygotic Mynci</a>
        </span><span class="artist-name-spacer"> — </span>
    
    
    <a
            href="/music/Gorky%27s+Zygotic+Mynci/_/Better+Rooms..."
            
            
                title="Gorky&#39;s Zygotic Mynci — Better Rooms..."
            
                class="link-block-target"
            
        >Better Rooms...</a>

                </span>
                
                    <a
                        class="
                            chartlist-cover-link
                            js-link-block-cover-link
                        "
                        href="/music/Gorky%27s+Zygotic+Mynci/_/Better+Rooms..."
                        tabindex="-1"
                        aria-hidden="true"
                        
                    ></a>
                
            </td>
            
            
                <td class="chartlist-buylinks chartlist-focus-control-cell">
                    
        <div class="lazy-buylinks focus-control">
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                    
                "
                aria-expanded="false"
                data-lazy-buylink
                data-lazy-buylink-url="/music/Gorky%27s+Zygotic+Mynci/_/Better+Rooms.../+partial/buylinks"
            >Buy</button>
        </div>
    
                </td>
            
            
                <td class="chartlist-more chartlist-focus-control-cell">
                    

    
    

    
        
        <div class="focus-control">
            <button
                class="
                    disclose-trigger
                    chartlist-more-button
                "
                aria-expanded="false"
                aria-controls="chartlist-more-f4b2d906-5033-4fea-ab6f-de610d5c5688"
                data-disclose-dropdown
            >More</button>
            <ul
                id="chartlist-more-f4b2d906-5033-4fea-ab6f-de610d5c5688"
                class="
                    disclose-hide
                    disclose-hide--js-only
                    dropdown-menu-clickable
                    chartlist-more-menu
                "
            >
                

                
                    <li>
                        
                            
    
        <a
            href="https://secure.last.fm/login?next=/user/foo"
            class="mimic-link dropdown-menu-clickable-item"
        >
            Set track as current obsession
        </a>
    

                        
                    </li>
                

                
            </ul>
        </div>
    

                </td>
            
            
            
                <td class="chartlist-timestamp">
                    
                        Unknown date
                    
                </td>
            
            
            
            
            
        </tr>
    
        
        
        
        
        
        
        
        
        
            
        
        
        
        
        <tr
            class="
                js-link-block
                js-focus-controls-container
                
                
                
            "
            data-ajax-form-state
            
                data-recenttrack-id="d73167d56c6532c0066f77263436b2f5"
                data-timestamp="1108290002"
            
            
        >
            
            
            
                <td class="chartlist-play">
                    
                        
    <div class="chartlist-play-image">
        
    

    

    
        <span class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/cf205be5728a25b1ae464fbe288151cf.jpg"
            alt="The Jones Laughing Record"
            
            class="cover-art"
        />
    

    
        </span>
    


        
    

    

    </div>

                    
                </td>
            
            
                <td class="chartlist-loved">
                    
    

    
        <div
            class="love-button-toggle"
            data-ajax-form-state=""
        >
            <div class="love-button-wrapper--loved">
                
                    <span
                        class="
                            love-button
                            love-button--loved
                        "
                    >
                        
                            Foo loves this track
                        
                    </span>
                
            </div>

            <div class="love-button-wrapper--unloved">
                
                    <span
                        class="love-button"
                    >
                        
                            Foo doesn't love this track
                        
                    </span>
                
            </div>
        </div>
    

                </td>
            
            <td class="chartlist-name" >
                
                <span class="chartlist-ellipsis-wrap">
                    <span class="chartlist-artists">
            <a
            href="/music/Spike+Jones+&amp;+His+City+Slickers"
            
            
                title="Spike Jones &amp; His City Slickers"
            
        >Spike Jones &amp; His City Slickers</a>
        </span><span class="artist-name-spacer"> — </span>
    
    
    <a
            href="/music/Spike+Jones+&amp;+His+City+Slickers/_/Red+Wing"
            
            
                title="Spike Jones &amp; His City Slickers — Red Wing"
            
                class="link-block-target"
            
        >Red Wing</a>

                </span>
                
                    <a
                        class="
                            chartlist-cover-link
                            js-link-block-cover-link
                        "
                        href="/music/Spike+Jones+&amp;+His+City+Slickers/_/Red+Wing"
                        tabindex="-1"
                        aria-hidden="true"
                        
                    ></a>
                
            </td>
            
            
                <td class="chartlist-buylinks chartlist-focus-control-cell">
                    
        <div class="lazy-buylinks focus-control">
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                    
                "
                aria-expanded="false"
                data-lazy-buylink
                data-lazy-buylink-url="/music/Spike+Jones+&amp;+His+City+Slickers/_/Red+Wing/+partial/buylinks"
            >Buy</button>
        </div>
    
                </td>
            
            
                <td class="chartlist-more chartlist-focus-control-cell">
                    

    
    

    
        
        <div class="focus-control">
            <button
                class="
                    disclose-trigger
                    chartlist-more-button
                "
                aria-expanded="false"
                aria-controls="chartlist-more-0ded1fe0-c83a-4fce-b938-7fb945f77940"
                data-disclose-dropdown
            >More</button>
            <ul
                id="chartlist-more-0ded1fe0-c83a-4fce-b938-7fb945f77940"
                class="
                    disclose-hide
                    disclose-hide--js-only
                    dropdown-menu-clickable
                    chartlist-more-menu
                "
            >
                

                
                    <li>
                        
                            
    
        <a
            href="https://secure.last.fm/login?next=/user/foo"
            class="mimic-link dropdown-menu-clickable-item"
        >
            Set track as current obsession
        </a>
    

                        
                    </li>
                

                
            </ul>
        </div>
    

                </td>
            
            
            
                <td class="chartlist-timestamp">
                    
                        Unknown date
                    
                </td>
            
            
            
            
            
        </tr>
    
        
        
        
        
        
        
        
        
        
            
        
        
        
        
        <tr
            class="
                js-link-block
                js-focus-controls-container
                
                
                
                    chartlist-row--even
                
            "
            data-ajax-form-state
            
                data-recenttrack-id="7f4b37c775ac7cfc49fc1a41927142de"
                data-timestamp="1108290002"
            
            
        >
            
            
            
                <td class="chartlist-play">
                    
                        
    <div class="chartlist-play-image">
        
    

    

    
        <span class="cover-art">
    

    
        <img
            src="https://lastfm-img2.akamaized.net/i/u/64s/db2f208b5797174e7c05c63e5ad44d60.jpg"
            alt="Greatest"
            
            class="cover-art"
        />
    

    
        </span>
    


        
    

    
        
            
        

        
            <a
                class="
                    image-overlay-playlink-link
                    
                        js-playlink
                    
                "
                href="https://www.youtube.com/watch?v=dvhoSAKLztM"
                target="_blank"

                
                    
                        data-youtube-id="dvhoSAKLztM"
                        data-youtube-url="https://www.youtube.com/watch?v=dvhoSAKLztM"
                    
                

                data-track-name="Sex &amp; Drugs &amp; Rock &amp; Roll"
                data-track-url="/music/Ian+Dury+and+the+Blockheads/_/Sex+&amp;+Drugs+&amp;+Rock+&amp;+Roll"
                
                    data-artist-name="Ian Dury and the Blockheads"
                    data-artist-url="/music/Ian+Dury+and+the+Blockheads"
                
                title="Play track"
                
                data-analytics-action="PlayTrackOnPage"
                data-analytics-label="youtube"

                
            >
                Play on youtube
            </a>
        
    

    </div>

                    
                </td>
            
            
                <td class="chartlist-loved">
                    
    

    
        <div
            class="love-button-toggle"
            data-ajax-form-state=""
        >
            <div class="love-button-wrapper--loved">
                
                    <span
                        class="
                            love-button
                            love-button--loved
                        "
                    >
                        
                            Foo loves this track
                        
                    </span>
                
            </div>

            <div class="love-button-wrapper--unloved">
                
                    <span
                        class="love-button"
                    >
                        
                            Foo doesn't love this track
                        
                    </span>
                
            </div>
        </div>
    

                </td>
            
            <td class="chartlist-name" >
                
                <span class="chartlist-ellipsis-wrap">
                    <span class="chartlist-artists">
            <a
            href="/music/Ian+Dury+and+the+Blockheads"
            
            
                title="Ian Dury and the Blockheads"
            
        >Ian Dury and the Blockheads</a>
        </span><span class="artist-name-spacer"> — </span>
    
    
    <a
            href="/music/Ian+Dury+and+the+Blockheads/_/Sex+&amp;+Drugs+&amp;+Rock+&amp;+Roll"
            
            
                title="Ian Dury and the Blockheads — Sex &amp; Drugs &amp; Rock &amp; Roll"
            
                class="link-block-target"
            
        >Sex &amp; Drugs &amp; Rock &amp; Roll</a>

                </span>
                
                    <a
                        class="
                            chartlist-cover-link
                            js-link-block-cover-link
                        "
                        href="/music/Ian+Dury+and+the+Blockheads/_/Sex+&amp;+Drugs+&amp;+Rock+&amp;+Roll"
                        tabindex="-1"
                        aria-hidden="true"
                        
                    ></a>
                
            </td>
            
            
                <td class="chartlist-buylinks chartlist-focus-control-cell">
                    
        <div class="lazy-buylinks focus-control">
            <button
                class="
                    disclose-trigger
                    lazy-buylinks-toggle
                    
                "
                aria-expanded="false"
                data-lazy-buylink
                data-lazy-buylink-url="/music/Ian+Dury+and+the+Blockheads/_/Sex+&amp;+Drugs+&amp;+Rock+&amp;+Roll/+partial/buylinks"
            >Buy</button>
        </div>
    
                </td>
            
            
                <td class="chartlist-more chartlist-focus-control-cell">
                    

    
    

    
        
        <div class="focus-control">
            <button
                class="
                    disclose-trigger
                    chartlist-more-button
                "
                aria-expanded="false"
                aria-controls="chartlist-more-ece3a607-767c-4806-95f8-888bd527b896"
                data-disclose-dropdown
            >More</button>
            <ul
                id="chartlist-more-ece3a607-767c-4806-95f8-888bd527b896"
                class="
                    disclose-hide
                    disclose-hide--js-only
                    dropdown-menu-clickable
                    chartlist-more-menu
                "
            >
                

                
                    <li>
                        
                            
    
        <a
            href="https://secure.last.fm/login?next=/user/foo"
            class="mimic-link dropdown-menu-clickable-item"
        >
            Set track as current obsession
        </a>
    

                        
                    </li>
                

                
            </ul>
        </div>
    

                </td>
            
            
            
                <td class="chartlist-timestamp">
                    
                        Unknown date
                    
                </td>
            
            
            
            
            
        </tr>
    
    </tbody>
</table>



                    </section>
                    <p class="more-link">
                        <a href="/user/Foo/library">
                            More tracks
                        </a>
                    </p>
                    
                

                
                    
    <div class="join-cta link-block js-link-block">
        <div class="join-cta-description">
            <h3>Want your own personalised music charts?</h3>
            <p>Join Last.fm for free to get your own music profile!</p>
        </div>
        <a
            href="/join"
            class="
                btn-primary
                btn-big
                join-cta-button
                link-block-target
            "
            data-analytics-action="JoinCTAClick"
            data-analytics-label="WantYourOwnMusicCharts"
        >Join Last.fm</a>
        <a
            href="/join"
            class="js-link-block-cover-link link-block-cover-link"
            tabindex="-1"
            aria-hidden="true"
            data-analytics-action="JoinCTAClick"
            data-analytics-label="WantYourOwnMusicCharts"
        ></a>
    </div>

                

                <section class="
                    grid-items-section
                    section-with-control
                    
                ">
                    <h2>
                        <a class="text-colour-link"
                           href="/user/Foo/library/artists?date_preset=LAST_7_DAYS"
                           data-date-filtered-anchor="artists_range"
                        >Top Artists</a>
                    </h2>
                    
                    
    
        <select
            name="artists_range"
            class="
                selectbox
                noscript-hide
                section-control
            "
            data-require="components/selectbox"
            >
            
            
                <option
                    value="7"
                    
                        selected
                    
                    >
                    Last 7 days
                </option>
            
                <option
                    value="30"
                    
                    >
                    Last 30 days
                </option>
            
                <option
                    value="90"
                    
                    >
                    Last 90 days
                </option>
            
                <option
                    value="180"
                    
                    >
                    Last 180 days
                </option>
            
                <option
                    value="365"
                    
                    >
                    Last 365 days
                </option>
            
                <option
                    value=""
                    
                    >
                    All time
                </option>
            
        </select>
    
    <div
        class="selectable-range"
        data-require="components/selectable-range"
        data-selectable-range-endpoint="/user/Foo/partial/artists"
        data-selectable-range-selectbox="artists_range"
    >
        








    
    <p class="no-data-message">
        
            Foo hasn't listened to any music in the selected date range.
        
    </p>


    </div>

                </section>

                
    
        
        
            <div id="mobile_pos_2" class="mobile_pos_2 lastfm-ad-mobile" data-ads-placement='{&#34;sizes&#34;: [[300, 250]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;2&#34;}, &#34;id&#34;: &#34;mobile_pos_2&#34;, &#34;is_mobile&#34;: true}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mobile_pos_2">
                Don't want to see ads? <a href="/subscribe" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Subscribe now</a>
            </p>
        
    


                <section class="
                    grid-items-section
                    section-with-control
                    
                ">
                    <h2>
                        <a class="text-colour-link"
                           href="/user/Foo/library/albums?date_preset=LAST_7_DAYS"
                           data-date-filtered-anchor="albums_range"
                        >Top Albums</a>
                    </h2>
                    
                    
    
        <select
            name="albums_range"
            class="
                selectbox
                noscript-hide
                section-control
            "
            data-require="components/selectbox"
            >
            
            
                <option
                    value="7"
                    
                        selected
                    
                    >
                    Last 7 days
                </option>
            
                <option
                    value="30"
                    
                    >
                    Last 30 days
                </option>
            
                <option
                    value="90"
                    
                    >
                    Last 90 days
                </option>
            
                <option
                    value="180"
                    
                    >
                    Last 180 days
                </option>
            
                <option
                    value="365"
                    
                    >
                    Last 365 days
                </option>
            
                <option
                    value=""
                    
                    >
                    All time
                </option>
            
        </select>
    
    <div
        class="selectable-range"
        data-require="components/selectable-range"
        data-selectable-range-endpoint="/user/Foo/partial/albums"
        data-selectable-range-selectbox="albums_range"
    >
        








    
    <p class="no-data-message">
        
            Foo hasn't listened to any music in the selected date range.
        
    </p>


    </div>

                </section>
                <section
                    id="top-tracks-section"
                    class="
                        section-with-control
                        
                    "
                >
                    <h2>
                        <a class="text-colour-link"
                           href="/user/Foo/library/tracks?date_preset=LAST_7_DAYS"
                           data-date-filtered-anchor="tracks_range"
                        >Top Tracks</a>
                    </h2>
                    
                    
    
        <select
            name="tracks_range"
            class="
                selectbox
                noscript-hide
                section-control
            "
            data-require="components/selectbox"
            >
            
            
                <option
                    value="7"
                    
                        selected
                    
                    >
                    Last 7 days
                </option>
            
                <option
                    value="30"
                    
                    >
                    Last 30 days
                </option>
            
                <option
                    value="90"
                    
                    >
                    Last 90 days
                </option>
            
                <option
                    value="180"
                    
                    >
                    Last 180 days
                </option>
            
                <option
                    value="365"
                    
                    >
                    Last 365 days
                </option>
            
                <option
                    value=""
                    
                    >
                    All time
                </option>
            
        </select>
    
    <div
        class="selectable-range"
        data-require="components/selectable-range"
        data-selectable-range-endpoint="/user/Foo/partial/tracks"
        data-selectable-range-selectbox="tracks_range"
    >
        






    
    <p class="no-data-message">
        
            Foo hasn't listened to any music in the selected date range.
        
    </p>


    </div>

                </section>
            

            
    
        
        
            <div id="mobile_pos_3" class="mobile_pos_3 lastfm-ad-mobile" data-ads-placement='{&#34;sizes&#34;: [[300, 250], [320, 50]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;3&#34;}, &#34;id&#34;: &#34;mobile_pos_3&#34;, &#34;is_mobile&#34;: true}'></div>
        
        
    


            
                
    <div
        id="shoutbox"
        class="lazy-shoutbox"
        data-require="components/lazy-load-v2"
        data-lazy-load-content="/user/Foo/partial/shoutbox"
        data-lazy-load-error-message="Shoutbox could not be loaded, try reloading the page."
    ></div>

            
        </div>
        <div class="col-sidebar col-sidebar--long">
            
    
    

    
        
    
        <section class="stationlinks">
            <h2 class="stationlinks-header">Listen</h2>
            
                
    <ul class="stationlink-list">
        <li>
            
                
                    
                        
    <button class="
                btn
                stationlink
                js-playlink-station
            "
            data-station-url="/player/station/user/Foo/library"
            data-analytics-action="StartStation"
            data-analytics-label="library"
            
                title="Listen to music Foo has scrobbled before"
            
    >
        
                            Play Foo's library
                        
    </button>

                    
                
            
        </li>
        <li>
            
                
                    
                        
    <button class="
                btn
                stationlink
                js-playlink-station
            "
            data-station-url="/player/station/user/Foo/mix"
            data-analytics-action="StartStation"
            data-analytics-label="mix"
            
                title="Listen to a mix of music Foo has scrobbled before and recommendations from Last.fm"
            
    >
        
                            Play Foo's mix
                        
    </button>

                    
                
            
        </li>
        <li>
            
                
                    
                        
    <button class="
                btn
                stationlink
                js-playlink-station
            "
            data-station-url="/player/station/user/Foo/recommended"
            data-analytics-action="StartStation"
            data-analytics-label="recommended"
            
                title="Listen to Foo's recommended music from Last.fm"
            
    >
        
                            Play Foo's recommendations
                        
    </button>

                    
                
            
        </li>
    </ul>

            
        </section>
    

    
    
    
        
        
            <div id="mpu_top" class="mpu_top lastfm-ad" data-ads-placement='{&#34;sizes&#34;: [[300, 250], [300, 600]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;top&#34;}, &#34;id&#34;: &#34;mpu_top&#34;}'></div>
        
        
            <p class="mpu-subscription-upsell mpu-subscription-upsell--mpu">
                Don't want to see ads? <a href="/subscribe" data-analytics-action="SubscribeClick" data-analytics-label="AdUpsellCTA">Subscribe now</a>
            </p>
        
    

    
    
    

    
    
        
        
            <div id="mobile_pos_4" class="mobile_pos_4 lastfm-ad-mobile" data-ads-placement='{&#34;sizes&#34;: [[300, 250], [320, 50]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;4&#34;}, &#34;id&#34;: &#34;mobile_pos_4&#34;, &#34;is_mobile&#34;: true}'></div>
        
        
    

    
    
        
            
        
        <div class="related-content" id="taboola-right-rail-thumbnails" data-require="ads/taboola" data-taboola-layout="None"></div>
    

    
    <div class="related-ads">
            <div id="searchlinks-sidebar"></div>
        </div>

    
    
        
        
            <div id="mpu_bottom" class="mpu_bottom lastfm-ad" data-ads-placement='{&#34;sizes&#34;: [[300, 250]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;bottom&#34;}, &#34;id&#34;: &#34;mpu_bottom&#34;}'></div>
        
        
    


        </div>
    </div>


            </div>
        

        
            <div class="container">
                
    
        
        
            <div id="leader_bottom" class="leader_bottom lastfm-ad" data-ads-placement='{&#34;sizes&#34;: [[728, 90], [970, 66], [728, 92]], &#34;targeting&#34;: {&#34;pos&#34;: &#34;bottom&#34;}, &#34;id&#34;: &#34;leader_bottom&#34;}'></div>
        
        
    

            </div>
        
    </div>

    <div id="qa-page-load"></div>

    
        
            
                
    
    
    
    <div
        class="lazy-features-footer"
        data-require="components/lazy-load-v2"
        data-lazy-load-content="/features/partial/footer"
        data-lazy-load-when-on-screen
    ></div>

            
        
    

    
    <footer class="footer" itemscope itemtype="http://schema.org/Organization">
        <link itemprop="url" href="https://www.last.fm">

        <div class="footer-top">
            <div class="container">
                <div class="footer-top-row">
                    <div class="footer-top-col">
                        <h2 class="footer-heading">Company</h2>
                        <ul class="footer-links">
                            <li><a href="/about">About Last.fm</a></li>
                            <li><a href="/about/contact">Contact Us</a></li>
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Help</h2>
                        <ul class="footer-links">
                            <li><a href="/about/trackmymusic">Track My Music</a></li>
                            
                                <li><a href="https://getsatisfaction.com/lastfm" target="_BLANK">Community Support</a></li>
                            
                            <li><a href="/help/guidelines">Community Guidelines</a></li>
                            
                                <li><a href="http://cbsi.force.com/CBSi/lastfm" target="_BLANK">Help</a></li>
                            
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Goodies</h2>
                        <ul class="footer-links">
                            <li><a href="/about/trackmymusic">Download Scrobbler</a></li>
                            <li><a href="/api">Developer API</a></li>
                            <li><a href="/music/+free-music-downloads">Free Music Downloads</a></li>
                            <li><a href="https://store.last.fm">Merchandise</a></li>
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Account</h2>
                        <ul class="footer-links">
                            
                                <li><a href="/join">Join</a></li>
                                <li><a href="https://secure.last.fm/login">Login</a></li>
                                <li><a href="/subscribe">Subscribe</a></li>
                            
                        </ul>
                    </div>

                    <div class="footer-top-col">
                        <h2 class="footer-heading">Follow Us</h2>
                        <ul class="footer-links">
                            <li><a itemprop="sameAs" target="_blank" href="https://www.facebook.com/lastfm">Facebook</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://twitter.com/lastfm">Twitter</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://www.instagram.com/last_fm">Instagram</a></li>
                            <li><a itemprop="sameAs" target="_blank" href="https://www.youtube.com/user/lastfm">YouTube</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-xs-10">
                        <ul id="language-selector">
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                            footer-language--active
                                        
                                    "
                                >
                                    
                                        <strong>English</strong><span class="sr-only">current language</span>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='hGm3L1lQsTxCdUWxlDU12tiYQ4jUCiFw' />
                                            <input type="hidden" name="language" value="de" />
                                            <button class="mimic-link" name="de" type="submit">Deutsch</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='hGm3L1lQsTxCdUWxlDU12tiYQ4jUCiFw' />
                                            <input type="hidden" name="language" value="es" />
                                            <button class="mimic-link" name="es" type="submit">Español</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='hGm3L1lQsTxCdUWxlDU12tiYQ4jUCiFw' />
                                            <input type="hidden" name="language" value="fr" />
                                            <button class="mimic-link" name="fr" type="submit">Français</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='hGm3L1lQsTxCdUWxlDU12tiYQ4jUCiFw' />
                                            <input type="hidden" name="language" value="it" />
                                            <button class="mimic-link" name="it" type="submit">Italiano</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='hGm3L1lQsTxCdUWxlDU12tiYQ4jUCiFw' />
                                            <input type="hidden" name="language" value="ja" />
                                            <button class="mimic-link" name="ja" type="submit">日本語</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='hGm3L1lQsTxCdUWxlDU12tiYQ4jUCiFw' />
                                            <input type="hidden" name="language" value="pl" />
                                            <button class="mimic-link" name="pl" type="submit">Polski</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='hGm3L1lQsTxCdUWxlDU12tiYQ4jUCiFw' />
                                            <input type="hidden" name="language" value="pt" />
                                            <button class="mimic-link" name="pt" type="submit">Português</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='hGm3L1lQsTxCdUWxlDU12tiYQ4jUCiFw' />
                                            <input type="hidden" name="language" value="ru" />
                                            <button class="mimic-link" name="ru" type="submit">Русский</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='hGm3L1lQsTxCdUWxlDU12tiYQ4jUCiFw' />
                                            <input type="hidden" name="language" value="sv" />
                                            <button class="mimic-link" name="sv" type="submit">Svenska</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='hGm3L1lQsTxCdUWxlDU12tiYQ4jUCiFw' />
                                            <input type="hidden" name="language" value="tr" />
                                            <button class="mimic-link" name="tr" type="submit">Türkçe</button>
                                        </form>
                                    
                                </li>
                            
                                
                                <li
                                    class="
                                        footer-language
                                        
                                    "
                                >
                                    
                                        <form class="footer-language-form" action="/i18n/setlang/" method="post">
                                            <input type='hidden' name='csrfmiddlewaretoken' value='hGm3L1lQsTxCdUWxlDU12tiYQ4jUCiFw' />
                                            <input type="hidden" name="language" value="zh" />
                                            <button class="mimic-link" name="zh" type="submit">简体中文</button>
                                        </form>
                                    
                                </li>
                            
                        </ul>
                        
                        <p class="footer-timezone">
                            
                                Time zone: <strong>Pacific/Noumea</strong>
                            
                        </p>
                    </div>

                    <div class="logo col-xs-2">
                        <img src="/static/images/footer_logo@2x.49ca51948b0a.png" width="37" height="20" alt="Last.fm 'as' logo">
                    </div>

                    <div class="footer-legal col-xs-12">
                        <ul>
                            <li class="footer-legal-item"><a rel="nofollow" href="http://www.cbsinteractive.com/">CBS Interactive</a> © 2018 <span itemprop="name">Last.fm</span> Ltd. All rights reserved</li>
                            <li class="footer-legal-item"><a href="/legal/terms">Terms of Use</a></li>
                            <li class="footer-legal-item"><a href="/legal/privacy">Privacy Policy</a></li>
                            <li class="footer-legal-item"><a href="/legal">Legal Policies</a></li>
                            <li class="footer-legal-item"><a target="_blank" href="http://www.cbsinteractive.com/careers">Jobs at CBSi</a></li>
                            <li class="footer-legal-item"><a rel="nofollow" href="http://www.gamespot.com">Gamespot</a></li>
                        </ul>
                        
                    </div>
                </div>
            </div>
        </div>

        <div class="feedback-message">
    <div class="feedback-message-inner">
        <p>
            <span class="hidden-xs">
                Let us know what you think of the Last.fm website.
            </span>
            <a href="http://cbsi.force.com/CBSi/template_lfmfbk?p_userid=" target="_blank">Leave feedback</a>
        </p>
    </div>
</div>
    </footer>


    <section class="debug-log">
    <h2 class="debug-log-heading">API Calls</h2>
    
</section>


        </div>
        
    
        <div
            data-ads-beacon
            data-ads-targeting='{&#34;lang&#34;: &#34;en&#34;, &#34;ar&#34;: &#34;spikejones&amp;hiscityslickers,gorky&#39;szygoticmynci,elvispresley,ianduryandtheblockheads,thevelvetunderground&#34;, &#34;ptype&#34;: &#34;user_door&#34;, &#34;beta&#34;: &#34;yes&#34;, &#34;geo&#34;: &#34;NC&#34;}'
            data-ads-unitname='/8264/row-lastfm/user/overview'
            data-ads-unitname-mobile='/8264/maw-lastfm/user/overview'
        ></div>
    

    </div>

    
        <div
            data-require="player/providers/spotify/spotify-provider"
            data-spotify-auth-modal="/player/modal/spotify"
            data-spotify-premium-modal="/player/modal/spotify-premium"
            data-spotify-inactive-modal="/player/modal/spotify-inactive"
            data-spotify-initial-device-modal="/player/modal/spotify-initial-device-detection"
        ></div>

        <div
            data-require="player/providers/youtube/youtube-provider"
            class="video-player"
            aria-hidden="true"
            id="youtube-video"
        >
            <div class="video-player-inner-wrap">
                <div class="video-player-embed js-player"></div>
                <button class="
                    video-player-close
                    js-close-player
                ">Close</button>
            </div>
        </div>
    

    
        
    


        
            
                <div
                    class="
                        lazy-recs-bar-full-width-wrapper
                        lazy-recs-bar--hidden
                    "
                    data-require="components/lazy-recs-bar"
                    data-url="/recommendations/anon_bar"
                >
                </div>
            
        
        
            
    
        
        
            <div id="intromercial" class="intromercial lastfm-ad" data-ads-placement='{&#34;out_of_page&#34;: true, &#34;id&#34;: &#34;intromercial&#34;}'></div>
        
        
    

            
    
        
        
            <div id="mobile_intromercial" class="mobile_intromercial lastfm-ad-mobile" data-ads-placement='{&#34;out_of_page&#34;: true, &#34;id&#34;: &#34;mobile_intromercial&#34;, &#34;is_mobile&#34;: true}'></div>
        
        
    

        

        <script class="js-modal-template" type="text/template">
            <div class="modal-dialog" role="dialog" aria-labelledby="modal-label">
                <div class="modal-content">
                    <div class="modal-header">
                        <button class="modal-dismiss js-close">Close</button>
                        <h2
                            id="modal-label"
                            class="modal-title js-modal-title"
                        ></h2>
                    </div>
                    <div class="modal-body js-modal-body"></div>
                </div>
            </div>
        </script>
        <script>
            window.lfmDomReadyCallback && window.lfmDomReadyCallback();
            window.lfmDomReady = true;
        </script>
    </body>
</html>
    http_version: 
  recorded_at: Thu, 04 Jan 2018 04:05:58 GMT
recorded_with: VCR 4.0.0
