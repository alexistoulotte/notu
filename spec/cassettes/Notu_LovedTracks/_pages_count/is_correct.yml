---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/user/alexistoulotte
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/user/alexistoulotte
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      X-Served-By:
      - ws339
      Vary:
      - Accept-Encoding
      - User-Agent
      - cookie
      Expires:
      - Fri, 12 Jul 2019 08:29:57 GMT
      Cache-Control:
      - max-age=0, no-cache, no-store
      Pragma:
      - no-cache
      Date:
      - Fri, 12 Jul 2019 08:29:57 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Set-Cookie:
      - csrftoken=03QuiF1fTJ9ig8FhGvYA49zusyA20zIT; expires=Fri, 10-Jul-2020 08:29:57
        GMT; Max-Age=31449600; Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=.eJwNy0EKwjAQAMC_7NlAbVLa9OwP6kEQCWt2YwK1SjfRivh3cx2YLzgsOboivLqIEmEE4oBlzrADYZH0WFyiyr7VGPprUKz7QZkOjbKWteoMDnbfYOOJ6-HNz4WYHG9PXtOdlywwnmt_vxTb6XiYqER1iq71nxtcfn8xpysu:1hlqwH:2zN0PiXMj-1zX0X7v61iIFKb1KM;
        Domain=.last.fm; expires=Sat, 11-Jul-2020 08:29:57 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 12 Jul 2019 08:29:57 GMT
- request:
    method: get
    uri: https://www.last.fm/user/alexistoulotte/loved
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/user/alexistoulotte/loved
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      X-Served-By:
      - ws344
      Vary:
      - Accept-Encoding
      - User-Agent
      - cookie
      Expires:
      - Fri, 12 Jul 2019 08:29:59 GMT
      Cache-Control:
      - max-age=0, no-cache, no-store
      Pragma:
      - no-cache
      Date:
      - Fri, 12 Jul 2019 08:29:59 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Set-Cookie:
      - csrftoken=kXenOxvsjoGIMfcsoVwA7lWk2U0uNqkL; expires=Fri, 10-Jul-2020 08:29:59
        GMT; Max-Age=31449600; Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=.eJwNy0sKwjAQANC7zNqBNKRouvYGdSGIDPlMTKBW6SRaEe9utw_eF8i1mqkJL5SdZBggcnJtqrADYZHymKnEjXulk2dl0CSl0Shl0XXGIQcf2Or-0O39dngNU4scidcnL-XOcxUYLhD0-4Vsx9NxjC3jOZMOnxtcf38Yairk:1hlqwJ:8Us-gcbvAXDizp-rGp7HckyeTEU;
        Domain=.last.fm; expires=Sat, 11-Jul-2020 08:29:59 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        CgoKCgoKPCFkb2N0eXBlIGh0bWw+CjxodG1sCiAgICBsYW5nPSJlbiIKICAgIGNsYXNzPSIKICAgICAgICBuby1qcwogICAgICAgIHBsYXliYXItbWFzdGhlYWQtcmVsZWFzZS1zaGltCiAgICAgICAgeW91dHViZS1wcm92aWRlci1ub3QtcmVhZHkKICAgICIKPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPih3aW5kb3cuTlJFVU18fChOUkVVTT17fSkpLmxvYWRlcl9jb25maWc9e3hwaWQ6IlV3WVBWMTVRR3dZRlhGbFhEZ1U9In07d2luZG93Lk5SRVVNfHwoTlJFVU09e30pLF9fbnJfcmVxdWlyZT1mdW5jdGlvbih0LG4sZSl7ZnVuY3Rpb24gcihlKXtpZighbltlXSl7dmFyIG89bltlXT17ZXhwb3J0czp7fX07dFtlXVswXS5jYWxsKG8uZXhwb3J0cyxmdW5jdGlvbihuKXt2YXIgbz10W2VdWzFdW25dO3JldHVybiByKG98fG4pfSxvLG8uZXhwb3J0cyl9cmV0dXJuIG5bZV0uZXhwb3J0c31pZigiZnVuY3Rpb24iPT10eXBlb2YgX19ucl9yZXF1aXJlKXJldHVybiBfX25yX3JlcXVpcmU7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspcihlW29dKTtyZXR1cm4gcn0oezE6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQpe3RyeXtzLmNvbnNvbGUmJmNvbnNvbGUubG9nKHQpfWNhdGNoKG4pe319dmFyIG8saT10KCJlZSIpLGE9dCgxOCkscz17fTt0cnl7bz1sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiX19ucl9mbGFncyIpLnNwbGl0KCIsIiksY29uc29sZSYmImZ1bmN0aW9uIj09dHlwZW9mIGNvbnNvbGUubG9nJiYocy5jb25zb2xlPSEwLG8uaW5kZXhPZigiZGV2IikhPT0tMSYmKHMuZGV2PSEwKSxvLmluZGV4T2YoIm5yX2RldiIpIT09LTEmJihzLm5yRGV2PSEwKSl9Y2F0Y2goYyl7fXMubnJEZXYmJmkub24oImludGVybmFsLWVycm9yIixmdW5jdGlvbih0KXtyKHQuc3RhY2spfSkscy5kZXYmJmkub24oImZuLWVyciIsZnVuY3Rpb24odCxuLGUpe3IoZS5zdGFjayl9KSxzLmRldiYmKHIoIk5SIEFHRU5UIElOIERFVkVMT1BNRU5UIE1PREUiKSxyKCJmbGFnczogIithKHMsZnVuY3Rpb24odCxuKXtyZXR1cm4gdH0pLmpvaW4oIiwgIikpKX0se31dLDI6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbixlLHIscyl7dHJ5e3A/cC09MTpvKHN8fG5ldyBVbmNhdWdodEV4Y2VwdGlvbih0LG4sZSksITApfWNhdGNoKGYpe3RyeXtpKCJpZXJyIixbZixjLm5vdygpLCEwXSl9Y2F0Y2goZCl7fX1yZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgdSYmdS5hcHBseSh0aGlzLGEoYXJndW1lbnRzKSl9ZnVuY3Rpb24gVW5jYXVnaHRFeGNlcHRpb24odCxuLGUpe3RoaXMubWVzc2FnZT10fHwiVW5jYXVnaHQgZXJyb3Igd2l0aCBubyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIix0aGlzLnNvdXJjZVVSTD1uLHRoaXMubGluZT1lfWZ1bmN0aW9uIG8odCxuKXt2YXIgZT1uP251bGw6Yy5ub3coKTtpKCJlcnIiLFt0LGVdKX12YXIgaT10KCJoYW5kbGUiKSxhPXQoMTkpLHM9dCgiZWUiKSxjPXQoImxvYWRlciIpLGY9dCgiZ29zIiksdT13aW5kb3cub25lcnJvcixkPSExLGw9Im5yQHNlZW5FcnJvciIscD0wO2MuZmVhdHVyZXMuZXJyPSEwLHQoMSksd2luZG93Lm9uZXJyb3I9cjt0cnl7dGhyb3cgbmV3IEVycm9yfWNhdGNoKGgpeyJzdGFjayJpbiBoJiYodCg4KSx0KDcpLCJhZGRFdmVudExpc3RlbmVyImluIHdpbmRvdyYmdCg1KSxjLnhocldyYXBwYWJsZSYmdCg5KSxkPSEwKX1zLm9uKCJmbi1zdGFydCIsZnVuY3Rpb24odCxuLGUpe2QmJihwKz0xKX0pLHMub24oImZuLWVyciIsZnVuY3Rpb24odCxuLGUpe2QmJiFlW2xdJiYoZihlLGwsZnVuY3Rpb24oKXtyZXR1cm4hMH0pLHRoaXMudGhyb3duPSEwLG8oZSkpfSkscy5vbigiZm4tZW5kIixmdW5jdGlvbigpe2QmJiF0aGlzLnRocm93biYmcD4wJiYocC09MSl9KSxzLm9uKCJpbnRlcm5hbC1lcnJvciIsZnVuY3Rpb24odCl7aSgiaWVyciIsW3QsYy5ub3coKSwhMF0pfSl9LHt9XSwzOltmdW5jdGlvbih0LG4sZSl7dCgibG9hZGVyIikuZmVhdHVyZXMuaW5zPSEwfSx7fV0sNDpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCl7fWlmKHdpbmRvdy5wZXJmb3JtYW5jZSYmd2luZG93LnBlcmZvcm1hbmNlLnRpbWluZyYmd2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUpe3ZhciBvPXQoImVlIiksaT10KCJoYW5kbGUiKSxhPXQoOCkscz10KDcpLGM9ImxlYXJSZXNvdXJjZVRpbWluZ3MiLGY9ImFkZEV2ZW50TGlzdGVuZXIiLHU9InJlc291cmNldGltaW5nYnVmZmVyZnVsbCIsZD0iYnN0UmVzb3VyY2UiLGw9InJlc291cmNlIixwPSItc3RhcnQiLGg9Ii1lbmQiLG09ImZuIitwLHc9ImZuIitoLHY9ImJzdFRpbWVyIix5PSJwdXNoU3RhdGUiLGc9dCgibG9hZGVyIik7Zy5mZWF0dXJlcy5zdG49ITAsdCg2KTt2YXIgeD1OUkVVTS5vLkVWO28ub24obSxmdW5jdGlvbih0LG4pe3ZhciBlPXRbMF07ZSBpbnN0YW5jZW9mIHgmJih0aGlzLmJzdFN0YXJ0PWcubm93KCkpfSksby5vbih3LGZ1bmN0aW9uKHQsbil7dmFyIGU9dFswXTtlIGluc3RhbmNlb2YgeCYmaSgiYnN0IixbZSxuLHRoaXMuYnN0U3RhcnQsZy5ub3coKV0pfSksYS5vbihtLGZ1bmN0aW9uKHQsbixlKXt0aGlzLmJzdFN0YXJ0PWcubm93KCksdGhpcy5ic3RUeXBlPWV9KSxhLm9uKHcsZnVuY3Rpb24odCxuKXtpKHYsW24sdGhpcy5ic3RTdGFydCxnLm5vdygpLHRoaXMuYnN0VHlwZV0pfSkscy5vbihtLGZ1bmN0aW9uKCl7dGhpcy5ic3RTdGFydD1nLm5vdygpfSkscy5vbih3LGZ1bmN0aW9uKHQsbil7aSh2LFtuLHRoaXMuYnN0U3RhcnQsZy5ub3coKSwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIl0pfSksby5vbih5K3AsZnVuY3Rpb24odCl7dGhpcy50aW1lPWcubm93KCksdGhpcy5zdGFydFBhdGg9bG9jYXRpb24ucGF0aG5hbWUrbG9jYXRpb24uaGFzaH0pLG8ub24oeStoLGZ1bmN0aW9uKHQpe2koImJzdEhpc3QiLFtsb2NhdGlvbi5wYXRobmFtZStsb2NhdGlvbi5oYXNoLHRoaXMuc3RhcnRQYXRoLHRoaXMudGltZV0pfSksZiBpbiB3aW5kb3cucGVyZm9ybWFuY2UmJih3aW5kb3cucGVyZm9ybWFuY2VbImMiK2NdP3dpbmRvdy5wZXJmb3JtYW5jZVtmXSh1LGZ1bmN0aW9uKHQpe2koZCxbd2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUobCldKSx3aW5kb3cucGVyZm9ybWFuY2VbImMiK2NdKCl9LCExKTp3aW5kb3cucGVyZm9ybWFuY2VbZl0oIndlYmtpdCIrdSxmdW5jdGlvbih0KXtpKGQsW3dpbmRvdy5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKGwpXSksd2luZG93LnBlcmZvcm1hbmNlWyJ3ZWJraXRDIitjXSgpfSwhMSkpLGRvY3VtZW50W2ZdKCJzY3JvbGwiLHIse3Bhc3NpdmU6ITB9KSxkb2N1bWVudFtmXSgia2V5cHJlc3MiLHIsITEpLGRvY3VtZW50W2ZdKCJjbGljayIsciwhMSl9fSx7fV0sNTpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCl7Zm9yKHZhciBuPXQ7biYmIW4uaGFzT3duUHJvcGVydHkodSk7KW49T2JqZWN0LmdldFByb3RvdHlwZU9mKG4pO24mJm8obil9ZnVuY3Rpb24gbyh0KXtzLmluUGxhY2UodCxbdSxkXSwiLSIsaSl9ZnVuY3Rpb24gaSh0LG4pe3JldHVybiB0WzFdfXZhciBhPXQoImVlIikuZ2V0KCJldmVudHMiKSxzPXQoMjEpKGEsITApLGM9dCgiZ29zIiksZj1YTUxIdHRwUmVxdWVzdCx1PSJhZGRFdmVudExpc3RlbmVyIixkPSJyZW1vdmVFdmVudExpc3RlbmVyIjtuLmV4cG9ydHM9YSwiZ2V0UHJvdG90eXBlT2YiaW4gT2JqZWN0PyhyKGRvY3VtZW50KSxyKHdpbmRvdykscihmLnByb3RvdHlwZSkpOmYucHJvdG90eXBlLmhhc093blByb3BlcnR5KHUpJiYobyh3aW5kb3cpLG8oZi5wcm90b3R5cGUpKSxhLm9uKHUrIi1zdGFydCIsZnVuY3Rpb24odCxuKXt2YXIgZT10WzFdLHI9YyhlLCJuckB3cmFwcGVkIixmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtpZigiZnVuY3Rpb24iPT10eXBlb2YgZS5oYW5kbGVFdmVudClyZXR1cm4gZS5oYW5kbGVFdmVudC5hcHBseShlLGFyZ3VtZW50cyl9dmFyIG49e29iamVjdDp0LCJmdW5jdGlvbiI6ZX1bdHlwZW9mIGVdO3JldHVybiBuP3MobiwiZm4tIixudWxsLG4ubmFtZXx8ImFub255bW91cyIpOmV9KTt0aGlzLndyYXBwZWQ9dFsxXT1yfSksYS5vbihkKyItc3RhcnQiLGZ1bmN0aW9uKHQpe3RbMV09dGhpcy53cmFwcGVkfHx0WzFdfSl9LHt9XSw2OltmdW5jdGlvbih0LG4sZSl7dmFyIHI9dCgiZWUiKS5nZXQoImhpc3RvcnkiKSxvPXQoMjEpKHIpO24uZXhwb3J0cz1yLG8uaW5QbGFjZSh3aW5kb3cuaGlzdG9yeSxbInB1c2hTdGF0ZSIsInJlcGxhY2VTdGF0ZSJdLCItIil9LHt9XSw3OltmdW5jdGlvbih0LG4sZSl7dmFyIHI9dCgiZWUiKS5nZXQoInJhZiIpLG89dCgyMSkociksaT0iZXF1ZXN0QW5pbWF0aW9uRnJhbWUiO24uZXhwb3J0cz1yLG8uaW5QbGFjZSh3aW5kb3csWyJyIitpLCJtb3pSIitpLCJ3ZWJraXRSIitpLCJtc1IiK2ldLCJyYWYtIiksci5vbigicmFmLXN0YXJ0IixmdW5jdGlvbih0KXt0WzBdPW8odFswXSwiZm4tIil9KX0se31dLDg6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbixlKXt0WzBdPWEodFswXSwiZm4tIixudWxsLGUpfWZ1bmN0aW9uIG8odCxuLGUpe3RoaXMubWV0aG9kPWUsdGhpcy50aW1lckR1cmF0aW9uPWlzTmFOKHRbMV0pPzA6K3RbMV0sdFswXT1hKHRbMF0sImZuLSIsdGhpcyxlKX12YXIgaT10KCJlZSIpLmdldCgidGltZXIiKSxhPXQoMjEpKGkpLHM9InNldFRpbWVvdXQiLGM9InNldEludGVydmFsIixmPSJjbGVhclRpbWVvdXQiLHU9Ii1zdGFydCIsZD0iLSI7bi5leHBvcnRzPWksYS5pblBsYWNlKHdpbmRvdyxbcywic2V0SW1tZWRpYXRlIl0scytkKSxhLmluUGxhY2Uod2luZG93LFtjXSxjK2QpLGEuaW5QbGFjZSh3aW5kb3csW2YsImNsZWFySW1tZWRpYXRlIl0sZitkKSxpLm9uKGMrdSxyKSxpLm9uKHMrdSxvKX0se31dLDk6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbil7ZC5pblBsYWNlKG4sWyJvbnJlYWR5c3RhdGVjaGFuZ2UiXSwiZm4tIixzKX1mdW5jdGlvbiBvKCl7dmFyIHQ9dGhpcyxuPXUuY29udGV4dCh0KTt0LnJlYWR5U3RhdGU+MyYmIW4ucmVzb2x2ZWQmJihuLnJlc29sdmVkPSEwLHUuZW1pdCgieGhyLXJlc29sdmVkIixbXSx0KSksZC5pblBsYWNlKHQseSwiZm4tIixzKX1mdW5jdGlvbiBpKHQpe2cucHVzaCh0KSxoJiYoYj9iLnRoZW4oYSk6dz93KGEpOihFPS1FLFIuZGF0YT1FKSl9ZnVuY3Rpb24gYSgpe2Zvcih2YXIgdD0wO3Q8Zy5sZW5ndGg7dCsrKXIoW10sZ1t0XSk7Zy5sZW5ndGgmJihnPVtdKX1mdW5jdGlvbiBzKHQsbil7cmV0dXJuIG59ZnVuY3Rpb24gYyh0LG4pe2Zvcih2YXIgZSBpbiB0KW5bZV09dFtlXTtyZXR1cm4gbn10KDUpO3ZhciBmPXQoImVlIiksdT1mLmdldCgieGhyIiksZD10KDIxKSh1KSxsPU5SRVVNLm8scD1sLlhIUixoPWwuTU8sbT1sLlBSLHc9bC5TSSx2PSJyZWFkeXN0YXRlY2hhbmdlIix5PVsib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbmxvYWRzdGFydCIsIm9ubG9hZGVuZCIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiXSxnPVtdO24uZXhwb3J0cz11O3ZhciB4PXdpbmRvdy5YTUxIdHRwUmVxdWVzdD1mdW5jdGlvbih0KXt2YXIgbj1uZXcgcCh0KTt0cnl7dS5lbWl0KCJuZXcteGhyIixbbl0sbiksbi5hZGRFdmVudExpc3RlbmVyKHYsbywhMSl9Y2F0Y2goZSl7dHJ5e3UuZW1pdCgiaW50ZXJuYWwtZXJyb3IiLFtlXSl9Y2F0Y2gocil7fX1yZXR1cm4gbn07aWYoYyhwLHgpLHgucHJvdG90eXBlPXAucHJvdG90eXBlLGQuaW5QbGFjZSh4LnByb3RvdHlwZSxbIm9wZW4iLCJzZW5kIl0sIi14aHItIixzKSx1Lm9uKCJzZW5kLXhoci1zdGFydCIsZnVuY3Rpb24odCxuKXtyKHQsbiksaShuKX0pLHUub24oIm9wZW4teGhyLXN0YXJ0IixyKSxoKXt2YXIgYj1tJiZtLnJlc29sdmUoKTtpZighdyYmIW0pe3ZhciBFPTEsUj1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShFKTtuZXcgaChhKS5vYnNlcnZlKFIse2NoYXJhY3RlckRhdGE6ITB9KX19ZWxzZSBmLm9uKCJmbi1lbmQiLGZ1bmN0aW9uKHQpe3RbMF0mJnRbMF0udHlwZT09PXZ8fGEoKX0pfSx7fV0sMTA6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKCl7dmFyIHQ9d2luZG93Lk5SRVVNLG49dC5pbmZvLmFjY291bnRJRHx8bnVsbCxlPXQuaW5mby5hZ2VudElEfHxudWxsLHI9dC5pbmZvLnRydXN0S2V5fHxudWxsLGk9ImJ0b2EiaW4gd2luZG93JiYiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93LmJ0b2E7aWYoIW58fCFlfHwhaSlyZXR1cm4gbnVsbDt2YXIgYT17djpbMCwxXSxkOnt0eToiQnJvd3NlciIsYWM6bixhcDplLGlkOm8uZ2VuZXJhdGVDYXRJZCgpLHRyOm8uZ2VuZXJhdGVDYXRJZCgpLHRpOkRhdGUubm93KCl9fTtyZXR1cm4gciYmbiE9PXImJihhLmQudGs9ciksYnRvYShKU09OLnN0cmluZ2lmeShhKSl9dmFyIG89dCgxNik7bi5leHBvcnRzPXtnZW5lcmF0ZVRyYWNlSGVhZGVyOnJ9fSx7fV0sMTE6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQpe3ZhciBuPXRoaXMucGFyYW1zLGU9dGhpcy5tZXRyaWNzO2lmKCF0aGlzLmVuZGVkKXt0aGlzLmVuZGVkPSEwO2Zvcih2YXIgcj0wO3I8cDtyKyspdC5yZW1vdmVFdmVudExpc3RlbmVyKGxbcl0sdGhpcy5saXN0ZW5lciwhMSk7bi5hYm9ydGVkfHwoZS5kdXJhdGlvbj1zLm5vdygpLXRoaXMuc3RhcnRUaW1lLHRoaXMubG9hZENhcHR1cmVDYWxsZWR8fDQhPT10LnJlYWR5U3RhdGU/bnVsbD09bi5zdGF0dXMmJihuLnN0YXR1cz0wKTphKHRoaXMsdCksZS5jYlRpbWU9dGhpcy5jYlRpbWUsZC5lbWl0KCJ4aHItZG9uZSIsW3RdLHQpLGMoInhociIsW24sZSx0aGlzLnN0YXJ0VGltZV0pKX19ZnVuY3Rpb24gbyh0LG4pe3ZhciBlPXQucmVzcG9uc2VUeXBlO2lmKCJqc29uIj09PWUmJm51bGwhPT1uKXJldHVybiBuO3ZhciByPSJhcnJheWJ1ZmZlciI9PT1lfHwiYmxvYiI9PT1lfHwianNvbiI9PT1lP3QucmVzcG9uc2U6dC5yZXNwb25zZVRleHQ7cmV0dXJuIHcocil9ZnVuY3Rpb24gaSh0LG4pe3ZhciBlPWYobikscj10LnBhcmFtcztyLmhvc3Q9ZS5ob3N0bmFtZSsiOiIrZS5wb3J0LHIucGF0aG5hbWU9ZS5wYXRobmFtZSx0LnNhbWVPcmlnaW49ZS5zYW1lT3JpZ2lufWZ1bmN0aW9uIGEodCxuKXt0LnBhcmFtcy5zdGF0dXM9bi5zdGF0dXM7dmFyIGU9byhuLHQubGFzdFNpemUpO2lmKGUmJih0Lm1ldHJpY3MucnhTaXplPWUpLHQuc2FtZU9yaWdpbil7dmFyIHI9bi5nZXRSZXNwb25zZUhlYWRlcigiWC1OZXdSZWxpYy1BcHAtRGF0YSIpO3ImJih0LnBhcmFtcy5jYXQ9ci5zcGxpdCgiLCAiKS5wb3AoKSl9dC5sb2FkQ2FwdHVyZUNhbGxlZD0hMH12YXIgcz10KCJsb2FkZXIiKTtpZihzLnhocldyYXBwYWJsZSl7dmFyIGM9dCgiaGFuZGxlIiksZj10KDEyKSx1PXQoMTApLmdlbmVyYXRlVHJhY2VIZWFkZXIsZD10KCJlZSIpLGw9WyJsb2FkIiwiZXJyb3IiLCJhYm9ydCIsInRpbWVvdXQiXSxwPWwubGVuZ3RoLGg9dCgiaWQiKSxtPXQoMTUpLHc9dCgxNCksdj13aW5kb3cuWE1MSHR0cFJlcXVlc3Q7cy5mZWF0dXJlcy54aHI9ITAsdCg5KSxkLm9uKCJuZXcteGhyIixmdW5jdGlvbih0KXt2YXIgbj10aGlzO24udG90YWxDYnM9MCxuLmNhbGxlZD0wLG4uY2JUaW1lPTAsbi5lbmQ9cixuLmVuZGVkPSExLG4ueGhyR3VpZHM9e30sbi5sYXN0U2l6ZT1udWxsLG4ubG9hZENhcHR1cmVDYWxsZWQ9ITEsdC5hZGRFdmVudExpc3RlbmVyKCJsb2FkIixmdW5jdGlvbihlKXthKG4sdCl9LCExKSxtJiYobT4zNHx8bTwxMCl8fHdpbmRvdy5vcGVyYXx8dC5hZGRFdmVudExpc3RlbmVyKCJwcm9ncmVzcyIsZnVuY3Rpb24odCl7bi5sYXN0U2l6ZT10LmxvYWRlZH0sITEpfSksZC5vbigib3Blbi14aHItc3RhcnQiLGZ1bmN0aW9uKHQpe3RoaXMucGFyYW1zPXttZXRob2Q6dFswXX0saSh0aGlzLHRbMV0pLHRoaXMubWV0cmljcz17fX0pLGQub24oIm9wZW4teGhyLWVuZCIsZnVuY3Rpb24odCxuKXsibG9hZGVyX2NvbmZpZyJpbiBOUkVVTSYmInhwaWQiaW4gTlJFVU0ubG9hZGVyX2NvbmZpZyYmdGhpcy5zYW1lT3JpZ2luJiZuLnNldFJlcXVlc3RIZWFkZXIoIlgtTmV3UmVsaWMtSUQiLE5SRVVNLmxvYWRlcl9jb25maWcueHBpZCk7dmFyIGU9ITE7aWYoImluaXQiaW4gTlJFVU0mJiJkaXN0cmlidXRlZF90cmFjaW5nImluIE5SRVVNLmluaXQmJihlPSEhTlJFVU0uaW5pdC5kaXN0cmlidXRlZF90cmFjaW5nLmVuYWJsZWQpLGUmJnRoaXMuc2FtZU9yaWdpbil7dmFyIHI9dSgpO3ImJm4uc2V0UmVxdWVzdEhlYWRlcigibmV3cmVsaWMiLHIpfX0pLGQub24oInNlbmQteGhyLXN0YXJ0IixmdW5jdGlvbih0LG4pe3ZhciBlPXRoaXMubWV0cmljcyxyPXRbMF0sbz10aGlzO2lmKGUmJnIpe3ZhciBpPXcocik7aSYmKGUudHhTaXplPWkpfXRoaXMuc3RhcnRUaW1lPXMubm93KCksdGhpcy5saXN0ZW5lcj1mdW5jdGlvbih0KXt0cnl7ImFib3J0IiE9PXQudHlwZXx8by5sb2FkQ2FwdHVyZUNhbGxlZHx8KG8ucGFyYW1zLmFib3J0ZWQ9ITApLCgibG9hZCIhPT10LnR5cGV8fG8uY2FsbGVkPT09by50b3RhbENicyYmKG8ub25sb2FkQ2FsbGVkfHwiZnVuY3Rpb24iIT10eXBlb2Ygbi5vbmxvYWQpKSYmby5lbmQobil9Y2F0Y2goZSl7dHJ5e2QuZW1pdCgiaW50ZXJuYWwtZXJyb3IiLFtlXSl9Y2F0Y2gocil7fX19O2Zvcih2YXIgYT0wO2E8cDthKyspbi5hZGRFdmVudExpc3RlbmVyKGxbYV0sdGhpcy5saXN0ZW5lciwhMSl9KSxkLm9uKCJ4aHItY2ItdGltZSIsZnVuY3Rpb24odCxuLGUpe3RoaXMuY2JUaW1lKz10LG4/dGhpcy5vbmxvYWRDYWxsZWQ9ITA6dGhpcy5jYWxsZWQrPTEsdGhpcy5jYWxsZWQhPT10aGlzLnRvdGFsQ2JzfHwhdGhpcy5vbmxvYWRDYWxsZWQmJiJmdW5jdGlvbiI9PXR5cGVvZiBlLm9ubG9hZHx8dGhpcy5lbmQoZSl9KSxkLm9uKCJ4aHItbG9hZC1hZGRlZCIsZnVuY3Rpb24odCxuKXt2YXIgZT0iIitoKHQpKyEhbjt0aGlzLnhockd1aWRzJiYhdGhpcy54aHJHdWlkc1tlXSYmKHRoaXMueGhyR3VpZHNbZV09ITAsdGhpcy50b3RhbENicys9MSl9KSxkLm9uKCJ4aHItbG9hZC1yZW1vdmVkIixmdW5jdGlvbih0LG4pe3ZhciBlPSIiK2godCkrISFuO3RoaXMueGhyR3VpZHMmJnRoaXMueGhyR3VpZHNbZV0mJihkZWxldGUgdGhpcy54aHJHdWlkc1tlXSx0aGlzLnRvdGFsQ2JzLT0xKX0pLGQub24oImFkZEV2ZW50TGlzdGVuZXItZW5kIixmdW5jdGlvbih0LG4pe24gaW5zdGFuY2VvZiB2JiYibG9hZCI9PT10WzBdJiZkLmVtaXQoInhoci1sb2FkLWFkZGVkIixbdFsxXSx0WzJdXSxuKX0pLGQub24oInJlbW92ZUV2ZW50TGlzdGVuZXItZW5kIixmdW5jdGlvbih0LG4pe24gaW5zdGFuY2VvZiB2JiYibG9hZCI9PT10WzBdJiZkLmVtaXQoInhoci1sb2FkLXJlbW92ZWQiLFt0WzFdLHRbMl1dLG4pfSksZC5vbigiZm4tc3RhcnQiLGZ1bmN0aW9uKHQsbixlKXtuIGluc3RhbmNlb2YgdiYmKCJvbmxvYWQiPT09ZSYmKHRoaXMub25sb2FkPSEwKSwoImxvYWQiPT09KHRbMF0mJnRbMF0udHlwZSl8fHRoaXMub25sb2FkKSYmKHRoaXMueGhyQ2JTdGFydD1zLm5vdygpKSl9KSxkLm9uKCJmbi1lbmQiLGZ1bmN0aW9uKHQsbil7dGhpcy54aHJDYlN0YXJ0JiZkLmVtaXQoInhoci1jYi10aW1lIixbcy5ub3coKS10aGlzLnhockNiU3RhcnQsdGhpcy5vbmxvYWQsbl0sbil9KX19LHt9XSwxMjpbZnVuY3Rpb24odCxuLGUpe24uZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIiksZT13aW5kb3cubG9jYXRpb24scj17fTtuLmhyZWY9dCxyLnBvcnQ9bi5wb3J0O3ZhciBvPW4uaHJlZi5zcGxpdCgiOi8vIik7IXIucG9ydCYmb1sxXSYmKHIucG9ydD1vWzFdLnNwbGl0KCIvIilbMF0uc3BsaXQoIkAiKS5wb3AoKS5zcGxpdCgiOiIpWzFdKSxyLnBvcnQmJiIwIiE9PXIucG9ydHx8KHIucG9ydD0iaHR0cHMiPT09b1swXT8iNDQzIjoiODAiKSxyLmhvc3RuYW1lPW4uaG9zdG5hbWV8fGUuaG9zdG5hbWUsci5wYXRobmFtZT1uLnBhdGhuYW1lLHIucHJvdG9jb2w9b1swXSwiLyIhPT1yLnBhdGhuYW1lLmNoYXJBdCgwKSYmKHIucGF0aG5hbWU9Ii8iK3IucGF0aG5hbWUpO3ZhciBpPSFuLnByb3RvY29sfHwiOiI9PT1uLnByb3RvY29sfHxuLnByb3RvY29sPT09ZS5wcm90b2NvbCxhPW4uaG9zdG5hbWU9PT1kb2N1bWVudC5kb21haW4mJm4ucG9ydD09PWUucG9ydDtyZXR1cm4gci5zYW1lT3JpZ2luPWkmJighbi5ob3N0bmFtZXx8YSkscn19LHt9XSwxMzpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIoKXt9ZnVuY3Rpb24gbyh0LG4sZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGkodCxbZi5ub3coKV0uY29uY2F0KHMoYXJndW1lbnRzKSksbj9udWxsOnRoaXMsZSksbj92b2lkIDA6dGhpc319dmFyIGk9dCgiaGFuZGxlIiksYT10KDE4KSxzPXQoMTkpLGM9dCgiZWUiKS5nZXQoInRyYWNlciIpLGY9dCgibG9hZGVyIiksdT1OUkVVTTsidW5kZWZpbmVkIj09dHlwZW9mIHdpbmRvdy5uZXdyZWxpYyYmKG5ld3JlbGljPXUpO3ZhciBkPVsic2V0UGFnZVZpZXdOYW1lIiwic2V0Q3VzdG9tQXR0cmlidXRlIiwic2V0RXJyb3JIYW5kbGVyIiwiZmluaXNoZWQiLCJhZGRUb1RyYWNlIiwiaW5saW5lSGl0IiwiYWRkUmVsZWFzZSJdLGw9ImFwaS0iLHA9bCsiaXhuLSI7YShkLGZ1bmN0aW9uKHQsbil7dVtuXT1vKGwrbiwhMCwiYXBpIil9KSx1LmFkZFBhZ2VBY3Rpb249byhsKyJhZGRQYWdlQWN0aW9uIiwhMCksdS5zZXRDdXJyZW50Um91dGVOYW1lPW8obCsicm91dGVOYW1lIiwhMCksbi5leHBvcnRzPW5ld3JlbGljLHUuaW50ZXJhY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHIpLmdldCgpfTt2YXIgaD1yLnByb3RvdHlwZT17Y3JlYXRlVHJhY2VyOmZ1bmN0aW9uKHQsbil7dmFyIGU9e30scj10aGlzLG89ImZ1bmN0aW9uIj09dHlwZW9mIG47cmV0dXJuIGkocCsidHJhY2VyIixbZi5ub3coKSx0LGVdLHIpLGZ1bmN0aW9uKCl7aWYoYy5lbWl0KChvPyIiOiJuby0iKSsiZm4tc3RhcnQiLFtmLm5vdygpLHIsb10sZSksbyl0cnl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKHQpe3Rocm93IGMuZW1pdCgiZm4tZXJyIixbYXJndW1lbnRzLHRoaXMsdF0sZSksdH1maW5hbGx5e2MuZW1pdCgiZm4tZW5kIixbZi5ub3coKV0sZSl9fX19O2EoImFjdGlvblRleHQsc2V0TmFtZSxzZXRBdHRyaWJ1dGUsc2F2ZSxpZ25vcmUsb25FbmQsZ2V0Q29udGV4dCxlbmQsZ2V0Ii5zcGxpdCgiLCIpLGZ1bmN0aW9uKHQsbil7aFtuXT1vKHArbil9KSxuZXdyZWxpYy5ub3RpY2VFcnJvcj1mdW5jdGlvbih0LG4peyJzdHJpbmciPT10eXBlb2YgdCYmKHQ9bmV3IEVycm9yKHQpKSxpKCJlcnIiLFt0LGYubm93KCksITEsbl0pfX0se31dLDE0OltmdW5jdGlvbih0LG4sZSl7bi5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKCJzdHJpbmciPT10eXBlb2YgdCYmdC5sZW5ndGgpcmV0dXJuIHQubGVuZ3RoO2lmKCJvYmplY3QiPT10eXBlb2YgdCl7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiZ0LmJ5dGVMZW5ndGgpcmV0dXJuIHQuYnl0ZUxlbmd0aDtpZigidW5kZWZpbmVkIiE9dHlwZW9mIEJsb2ImJnQgaW5zdGFuY2VvZiBCbG9iJiZ0LnNpemUpcmV0dXJuIHQuc2l6ZTtpZighKCJ1bmRlZmluZWQiIT10eXBlb2YgRm9ybURhdGEmJnQgaW5zdGFuY2VvZiBGb3JtRGF0YSkpdHJ5e3JldHVybiBKU09OLnN0cmluZ2lmeSh0KS5sZW5ndGh9Y2F0Y2gobil7cmV0dXJufX19fSx7fV0sMTU6W2Z1bmN0aW9uKHQsbixlKXt2YXIgcj0wLG89bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRmlyZWZveFtcL1xzXShcZCtcLlxkKykvKTtvJiYocj0rb1sxXSksbi5leHBvcnRzPXJ9LHt9XSwxNjpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIoKXtmdW5jdGlvbiB0KCl7cmV0dXJuIG4/MTUmbltlKytdOjE2Kk1hdGgucmFuZG9tKCl8MH12YXIgbj1udWxsLGU9MCxyPXdpbmRvdy5jcnlwdG98fHdpbmRvdy5tc0NyeXB0bztyJiZyLmdldFJhbmRvbVZhbHVlcyYmKG49ci5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMzEpKSk7Zm9yKHZhciBvLGk9Inh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCIsYT0iIixzPTA7czxpLmxlbmd0aDtzKyspbz1pW3NdLCJ4Ij09PW8/YSs9dCgpLnRvU3RyaW5nKDE2KToieSI9PT1vPyhvPTMmdCgpfDgsYSs9by50b1N0cmluZygxNikpOmErPW87cmV0dXJuIGF9ZnVuY3Rpb24gbygpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gbj8xNSZuW2UrK106MTYqTWF0aC5yYW5kb20oKXwwfXZhciBuPW51bGwsZT0wLHI9d2luZG93LmNyeXB0b3x8d2luZG93Lm1zQ3J5cHRvO3ImJnIuZ2V0UmFuZG9tVmFsdWVzJiZVaW50OEFycmF5JiYobj1yLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgzMSkpKTtmb3IodmFyIG89W10saT0wO2k8MTY7aSsrKW8ucHVzaCh0KCkudG9TdHJpbmcoMTYpKTtyZXR1cm4gby5qb2luKCIiKX1uLmV4cG9ydHM9e2dlbmVyYXRlVXVpZDpyLGdlbmVyYXRlQ2F0SWQ6b319LHt9XSwxNzpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCxuKXtpZighbylyZXR1cm4hMTtpZih0IT09bylyZXR1cm4hMTtpZighbilyZXR1cm4hMDtpZighaSlyZXR1cm4hMTtmb3IodmFyIGU9aS5zcGxpdCgiLiIpLHI9bi5zcGxpdCgiLiIpLGE9MDthPHIubGVuZ3RoO2ErKylpZihyW2FdIT09ZVthXSlyZXR1cm4hMTtyZXR1cm4hMH12YXIgbz1udWxsLGk9bnVsbCxhPS9WZXJzaW9uXC8oXFMrKVxzK1NhZmFyaS87aWYobmF2aWdhdG9yLnVzZXJBZ2VudCl7dmFyIHM9bmF2aWdhdG9yLnVzZXJBZ2VudCxjPXMubWF0Y2goYSk7YyYmcy5pbmRleE9mKCJDaHJvbWUiKT09PS0xJiZzLmluZGV4T2YoIkNocm9taXVtIik9PT0tMSYmKG89IlNhZmFyaSIsaT1jWzFdKX1uLmV4cG9ydHM9e2FnZW50Om8sdmVyc2lvbjppLG1hdGNoOnJ9fSx7fV0sMTg6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbil7dmFyIGU9W10scj0iIixpPTA7Zm9yKHIgaW4gdClvLmNhbGwodCxyKSYmKGVbaV09bihyLHRbcl0pLGkrPTEpO3JldHVybiBlfXZhciBvPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7bi5leHBvcnRzPXJ9LHt9XSwxOTpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCxuLGUpe258fChuPTApLCJ1bmRlZmluZWQiPT10eXBlb2YgZSYmKGU9dD90Lmxlbmd0aDowKTtmb3IodmFyIHI9LTEsbz1lLW58fDAsaT1BcnJheShvPDA/MDpvKTsrK3I8bzspaVtyXT10W24rcl07cmV0dXJuIGl9bi5leHBvcnRzPXJ9LHt9XSwyMDpbZnVuY3Rpb24odCxuLGUpe24uZXhwb3J0cz17ZXhpc3RzOiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93LnBlcmZvcm1hbmNlJiZ3aW5kb3cucGVyZm9ybWFuY2UudGltaW5nJiYidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0fX0se31dLDIxOltmdW5jdGlvbih0LG4sZSl7ZnVuY3Rpb24gcih0KXtyZXR1cm4hKHQmJnQgaW5zdGFuY2VvZiBGdW5jdGlvbiYmdC5hcHBseSYmIXRbYV0pfXZhciBvPXQoImVlIiksaT10KDE5KSxhPSJuckBvcmlnaW5hbCIscz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGM9ITE7bi5leHBvcnRzPWZ1bmN0aW9uKHQsbil7ZnVuY3Rpb24gZSh0LG4sZSxvKXtmdW5jdGlvbiBucldyYXBwZXIoKXt2YXIgcixhLHMsYzt0cnl7YT10aGlzLHI9aShhcmd1bWVudHMpLHM9ImZ1bmN0aW9uIj09dHlwZW9mIGU/ZShyLGEpOmV8fHt9fWNhdGNoKGYpe2woW2YsIiIsW3IsYSxvXSxzXSl9dShuKyJzdGFydCIsW3IsYSxvXSxzKTt0cnl7cmV0dXJuIGM9dC5hcHBseShhLHIpfWNhdGNoKGQpe3Rocm93IHUobisiZXJyIixbcixhLGRdLHMpLGR9ZmluYWxseXt1KG4rImVuZCIsW3IsYSxjXSxzKX19cmV0dXJuIHIodCk/dDoobnx8KG49IiIpLG5yV3JhcHBlclthXT10LGQodCxucldyYXBwZXIpLG5yV3JhcHBlcil9ZnVuY3Rpb24gZih0LG4sbyxpKXtvfHwobz0iIik7dmFyIGEscyxjLGY9Ii0iPT09by5jaGFyQXQoMCk7Zm9yKGM9MDtjPG4ubGVuZ3RoO2MrKylzPW5bY10sYT10W3NdLHIoYSl8fCh0W3NdPWUoYSxmP3MrbzpvLGkscykpfWZ1bmN0aW9uIHUoZSxyLG8pe2lmKCFjfHxuKXt2YXIgaT1jO2M9ITA7dHJ5e3QuZW1pdChlLHIsbyxuKX1jYXRjaChhKXtsKFthLGUscixvXSl9Yz1pfX1mdW5jdGlvbiBkKHQsbil7aWYoT2JqZWN0LmRlZmluZVByb3BlcnR5JiZPYmplY3Qua2V5cyl0cnl7dmFyIGU9T2JqZWN0LmtleXModCk7cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkobixlLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtlXX0sc2V0OmZ1bmN0aW9uKG4pe3JldHVybiB0W2VdPW4sbn19KX0pLG59Y2F0Y2gocil7bChbcl0pfWZvcih2YXIgbyBpbiB0KXMuY2FsbCh0LG8pJiYobltvXT10W29dKTtyZXR1cm4gbn1mdW5jdGlvbiBsKG4pe3RyeXt0LmVtaXQoImludGVybmFsLWVycm9yIixuKX1jYXRjaChlKXt9fXJldHVybiB0fHwodD1vKSxlLmluUGxhY2U9ZixlLmZsYWc9YSxlfX0se31dLGVlOltmdW5jdGlvbih0LG4sZSl7ZnVuY3Rpb24gcigpe31mdW5jdGlvbiBvKHQpe2Z1bmN0aW9uIG4odCl7cmV0dXJuIHQmJnQgaW5zdGFuY2VvZiByP3Q6dD9jKHQscyxpKTppKCl9ZnVuY3Rpb24gZShlLHIsbyxpKXtpZighbC5hYm9ydGVkfHxpKXt0JiZ0KGUscixvKTtmb3IodmFyIGE9bihvKSxzPW0oZSksYz1zLmxlbmd0aCxmPTA7ZjxjO2YrKylzW2ZdLmFwcGx5KGEscik7dmFyIGQ9dVtnW2VdXTtyZXR1cm4gZCYmZC5wdXNoKFt4LGUscixhXSksYX19ZnVuY3Rpb24gcCh0LG4pe3lbdF09bSh0KS5jb25jYXQobil9ZnVuY3Rpb24gaCh0LG4pe3ZhciBlPXlbdF07aWYoZSlmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyllW3JdPT09biYmZS5zcGxpY2UociwxKX1mdW5jdGlvbiBtKHQpe3JldHVybiB5W3RdfHxbXX1mdW5jdGlvbiB3KHQpe3JldHVybiBkW3RdPWRbdF18fG8oZSl9ZnVuY3Rpb24gdih0LG4pe2YodCxmdW5jdGlvbih0LGUpe249bnx8ImZlYXR1cmUiLGdbZV09bixuIGluIHV8fCh1W25dPVtdKX0pfXZhciB5PXt9LGc9e30seD17b246cCxhZGRFdmVudExpc3RlbmVyOnAscmVtb3ZlRXZlbnRMaXN0ZW5lcjpoLGVtaXQ6ZSxnZXQ6dyxsaXN0ZW5lcnM6bSxjb250ZXh0Om4sYnVmZmVyOnYsYWJvcnQ6YSxhYm9ydGVkOiExfTtyZXR1cm4geH1mdW5jdGlvbiBpKCl7cmV0dXJuIG5ldyByfWZ1bmN0aW9uIGEoKXsodS5hcGl8fHUuZmVhdHVyZSkmJihsLmFib3J0ZWQ9ITAsdT1sLmJhY2tsb2c9e30pfXZhciBzPSJuckBjb250ZXh0IixjPXQoImdvcyIpLGY9dCgxOCksdT17fSxkPXt9LGw9bi5leHBvcnRzPW8oKTtsLmJhY2tsb2c9dX0se31dLGdvczpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCxuLGUpe2lmKG8uY2FsbCh0LG4pKXJldHVybiB0W25dO3ZhciByPWUoKTtpZihPYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5rZXlzKXRyeXtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbix7dmFsdWU6cix3cml0YWJsZTohMCxlbnVtZXJhYmxlOiExfSkscn1jYXRjaChpKXt9cmV0dXJuIHRbbl09cixyfXZhciBvPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7bi5leHBvcnRzPXJ9LHt9XSxoYW5kbGU6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbixlLHIpe28uYnVmZmVyKFt0XSxyKSxvLmVtaXQodCxuLGUpfXZhciBvPXQoImVlIikuZ2V0KCJoYW5kbGUiKTtuLmV4cG9ydHM9cixyLmVlPW99LHt9XSxpZDpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCl7dmFyIG49dHlwZW9mIHQ7cmV0dXJuIXR8fCJvYmplY3QiIT09biYmImZ1bmN0aW9uIiE9PW4/LTE6dD09PXdpbmRvdz8wOmEodCxpLGZ1bmN0aW9uKCl7cmV0dXJuIG8rK30pfXZhciBvPTEsaT0ibnJAaWQiLGE9dCgiZ29zIik7bi5leHBvcnRzPXJ9LHt9XSxsb2FkZXI6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKCl7aWYoIUUrKyl7dmFyIHQ9Yi5pbmZvPU5SRVVNLmluZm8sbj1wLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKVswXTtpZihzZXRUaW1lb3V0KHUuYWJvcnQsM2U0KSwhKHQmJnQubGljZW5zZUtleSYmdC5hcHBsaWNhdGlvbklEJiZuKSlyZXR1cm4gdS5hYm9ydCgpO2YoZyxmdW5jdGlvbihuLGUpe3Rbbl18fCh0W25dPWUpfSksYygibWFyayIsWyJvbmxvYWQiLGEoKStiLm9mZnNldF0sbnVsbCwiYXBpIik7dmFyIGU9cC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTtlLnNyYz0iaHR0cHM6Ly8iK3QuYWdlbnQsbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLG4pfX1mdW5jdGlvbiBvKCl7ImNvbXBsZXRlIj09PXAucmVhZHlTdGF0ZSYmaSgpfWZ1bmN0aW9uIGkoKXtjKCJtYXJrIixbImRvbUNvbnRlbnQiLGEoKStiLm9mZnNldF0sbnVsbCwiYXBpIil9ZnVuY3Rpb24gYSgpe3JldHVybiBSLmV4aXN0cyYmcGVyZm9ybWFuY2Uubm93P01hdGgucm91bmQocGVyZm9ybWFuY2Uubm93KCkpOihzPU1hdGgubWF4KChuZXcgRGF0ZSkuZ2V0VGltZSgpLHMpKS1iLm9mZnNldH12YXIgcz0obmV3IERhdGUpLmdldFRpbWUoKSxjPXQoImhhbmRsZSIpLGY9dCgxOCksdT10KCJlZSIpLGQ9dCgxNyksbD13aW5kb3cscD1sLmRvY3VtZW50LGg9ImFkZEV2ZW50TGlzdGVuZXIiLG09ImF0dGFjaEV2ZW50Iix3PWwuWE1MSHR0cFJlcXVlc3Qsdj13JiZ3LnByb3RvdHlwZTtOUkVVTS5vPXtTVDpzZXRUaW1lb3V0LFNJOmwuc2V0SW1tZWRpYXRlLENUOmNsZWFyVGltZW91dCxYSFI6dyxSRVE6bC5SZXF1ZXN0LEVWOmwuRXZlbnQsUFI6bC5Qcm9taXNlLE1POmwuTXV0YXRpb25PYnNlcnZlcn07dmFyIHk9IiIrbG9jYXRpb24sZz17YmVhY29uOiJiYW0ubnItZGF0YS5uZXQiLGVycm9yQmVhY29uOiJiYW0ubnItZGF0YS5uZXQiLGFnZW50OiJqcy1hZ2VudC5uZXdyZWxpYy5jb20vbnItMTEyMy5taW4uanMifSx4PXcmJnYmJnZbaF0mJiEvQ3JpT1MvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksYj1uLmV4cG9ydHM9e29mZnNldDpzLG5vdzphLG9yaWdpbjp5LGZlYXR1cmVzOnt9LHhocldyYXBwYWJsZTp4LHVzZXJBZ2VudDpkfTt0KDEzKSxwW2hdPyhwW2hdKCJET01Db250ZW50TG9hZGVkIixpLCExKSxsW2hdKCJsb2FkIixyLCExKSk6KHBbbV0oIm9ucmVhZHlzdGF0ZWNoYW5nZSIsbyksbFttXSgib25sb2FkIixyKSksYygibWFyayIsWyJmaXJzdGJ5dGUiLHNdLG51bGwsImFwaSIpO3ZhciBFPTAsUj10KDIwKX0se31dfSx7fSxbImxvYWRlciIsMiwxMSw0LDNdKTs8L3NjcmlwdD48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+d2luZG93Lk5SRVVNfHwoTlJFVU09e30pO05SRVVNLmluZm89eyJiZWFjb24iOiJiYW0ubnItZGF0YS5uZXQiLCJlcnJvckJlYWNvbiI6ImJhbS5uci1kYXRhLm5ldCIsImxpY2Vuc2VLZXkiOiIwZWQwY2U1MGIwIiwiYXBwbGljYXRpb25JRCI6IjU1ODg1OTQiLCJ0cmFuc2FjdGlvbk5hbWUiOiJZMUJSYlVVRldrTUVXeFlNVjFvYWRVeFpCMEJaQ2xaTkNWNVpHMFJjVlVwRFJ4SVdBeFZJUnh0R1NsSVdHa1lNWFJVV0ZsbFVXbGNOQ0Z0R0FGdz0iLCJxdWV1ZVRpbWUiOjAsImFwcGxpY2F0aW9uVGltZSI6ODg1LCJhZ2VudCI6IiJ9PC9zY3JpcHQ+CiAgICAgICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIj4KCiAgICAgICAgPHRpdGxlIGFyaWEtbGl2ZT0iYXNzZXJ0aXZlIj5hbGV4aXN0b3Vsb3R0ZSdzIGxvdmVkIHRyYWNrcyB8IExhc3QuZm08L3RpdGxlPgoKICAgICAgICAKICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0iZW4iIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJkZSIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS9kZS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImVzIiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL2VzL3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0iZnIiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vZnIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJpdCIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS9pdC91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImphIiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL2phL3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0icGwiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vcGwvdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJwdCIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS9wdC91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9InJ1IiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL3J1L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0ic3YiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vc3YvdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJ0ciIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS90ci91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9InpoIiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL3poL3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJ4LWRlZmF1bHQiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgoKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9Ikxpc3RlbiB0byBtdXNpYyBmcm9tIGFsZXhpc3RvdWxvdHRl4oCZcyBsaWJyYXJ5ICg4OCw1MjQgdHJhY2tzIHBsYXllZCkuIEdldCB5b3VyIG93biBtdXNpYyBwcm9maWxlIGF0IExhc3QuZm0sIHRoZSB3b3JsZOKAmXMgbGFyZ2VzdCBzb2NpYWwgbXVzaWMgcGxhdGZvcm0uIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgoKICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgICAgICAgICAgIGNvbnRlbnQ9ImFsZXhpc3RvdWxvdHRlJiMzOTtzIGxvdmVkIHRyYWNrcyB8IExhc3QuZm0iIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6ZGVzY3JpcHRpb24iICAgICBjb250ZW50PSJMaXN0ZW4gdG8gbXVzaWMgZnJvbSBhbGV4aXN0b3Vsb3R0ZeKAmXMgbGlicmFyeSAoODgsNTI0IHRyYWNrcyBwbGF5ZWQpLiBHZXQgeW91ciBvd24gbXVzaWMgcHJvZmlsZSBhdCBMYXN0LmZtLCB0aGUgd29ybGTigJlzIGxhcmdlc3Qgc29jaWFsIG11c2ljIHBsYXRmb3JtLiIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiAgICAgICAgICAgIGNvbnRlbnQ9IndlYnNpdGUiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6c2l0ZV9uYW1lIiAgICAgICBjb250ZW50PSJMYXN0LmZtIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnVybCIgICAgICAgICAgICAgY29udGVudD0iaHR0cHM6Ly93d3cubGFzdC5mbS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiICAgICAgICAgICBjb250ZW50PSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91L2FyMC8wMGI0OGMzYjBhYjg0NGZlYzQ4ZGE3NTk5Nzk4MjM0Zi5wbmciIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6d2lkdGgiICAgICBjb250ZW50PSIxMjAwIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOmhlaWdodCIgICAgY29udGVudD0iNjMwIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgogICAgPG1ldGEgcHJvcGVydHk9ImZiOmFwcF9pZCIgICAgICAgICAgY29udGVudD0iMTkyOTU5MzI0MDQ3ODYxIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjp0aXRsZSIgICAgICAgICAgY29udGVudD0iYWxleGlzdG91bG90dGUmIzM5O3MgbG92ZWQgdHJhY2tzIHwgTGFzdC5mbSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZz4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6ZGVzY3JpcHRpb24iICAgIGNvbnRlbnQ9Ikxpc3RlbiB0byBtdXNpYyBmcm9tIGFsZXhpc3RvdWxvdHRl4oCZcyBsaWJyYXJ5ICg4OCw1MjQgdHJhY2tzIHBsYXllZCkuIEdldCB5b3VyIG93biBtdXNpYyBwcm9maWxlIGF0IExhc3QuZm0sIHRoZSB3b3JsZOKAmXMgbGFyZ2VzdCBzb2NpYWwgbXVzaWMgcGxhdGZvcm0uIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjppbWFnZSIgICAgICAgICAgY29udGVudD0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS9hcjAvMDBiNDhjM2IwYWI4NDRmZWM0OGRhNzU5OTc5ODIzNGYucG5nIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpjYXJkIiAgICAgICAgICAgY29udGVudD0ic3VtbWFyeSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZz4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6c2l0ZSIgICAgICAgICAgIGNvbnRlbnQ9IkBsYXN0Zm0iIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CgogICAgCgogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCgogICAgICAgIDxzY3JpcHQ+KGZ1bmN0aW9uKGUpIHsgZS5jbGFzc05hbWUgPSBlLmNsYXNzTmFtZS5yZXBsYWNlKC9cYm5vLWpzXGIvLCdqcycpOyB9KShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpPC9zY3JpcHQ+CgogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCjxzY3JpcHQgaWQ9ImluaXRpYWwtdGVhbGl1bS1kYXRhIiBkYXRhLXRlYWxpdW0tZGF0YT0ieyYjMzQ7c2l0ZVNlY3Rpb24mIzM0OzogJiMzNDt1c2VyJiMzNDssICYjMzQ7cGFnZVR5cGUmIzM0OzogJiMzNDt1c2VyX2xvdmVkJiMzNDssICYjMzQ7cGFnZU5hbWUmIzM0OzogJiMzNDt1c2VyL2xvdmVkJiMzNDssICYjMzQ7bmF0aXZlRXZlbnRUcmFja2luZyYjMzQ7OiB0cnVlLCAmIzM0O3VzZXJTdGF0ZSYjMzQ7OiAmIzM0O25vdCBhdXRoZW50aWNhdGVkJiMzNDssICYjMzQ7dXNlclR5cGUmIzM0OzogJiMzNDthbm9uJiMzNDssICYjMzQ7ZGV2aWNlVHlwZSYjMzQ7OiAmIzM0O2Rlc2t0b3AmIzM0OywgJiMzNDtpcEdlbyYjMzQ7OiAmIzM0O05DJiMzNDssICYjMzQ7cGFnZVZpZXdHdWlkJiMzNDs6ICYjMzQ7NmI4YjJhZmQtYjI1Mi00NDNkLTkzNDQtNTZlYjIzMTA4NGM2JiMzNDt9Ij48L3NjcmlwdD4KPHNjcmlwdD4KICAgIHZhciBpbml0aWFsVGVhbGl1bUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5pdGlhbC10ZWFsaXVtLWRhdGEnKTsKICAgIHdpbmRvdy51dGFnX2RhdGEgPSBKU09OLnBhcnNlKGluaXRpYWxUZWFsaXVtRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGVhbGl1bS1kYXRhJykpOwo8L3NjcmlwdD4KCjxzY3JpcHQgYXN5bmMgc3JjPSJodHRwczovL3RhZ3MudGlxY2RuLmNvbS91dGFnL2Nic2kvbGFzdGZtc2l0ZS9wcm9kL3V0YWcuanMiPjwvc2NyaXB0PgogICAgICAgIAoKICAgICAgICA8bGluayByZWw9Imljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2Zhdmljb24uNzAyYjIzOWI2MTk0LmljbyI+CgogICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL3N0YXRpYy9zdHlsZXMvYnVpbGQvNjU1OWY5MmNiZS42NTU5ZjkyY2JlZGUuY3NzIiBkYXRhLXN0eWxlc2hlZXQtbmFtZT0iZGVmYXVsdHMiIGNoYXJzZXQ9InV0Zi04Ij4KCiAgICAgICAgCiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL3N0YXRpYy9zdHlsZXMvYnVpbGQvY2Q3NDZkYjdhNS5jZDc0NmRiN2E1Y2QuY3NzIiBkYXRhLXN0eWxlc2hlZXQtbmFtZT0iYXBwIiBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgCgogICAgICAgIAogICAgCiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc3RhdGljL3N0eWxlcy9idWlsZC8yYjU2OWMxMDMwLjJiNTY5YzEwMzA1NC5jc3MiIGNoYXJzZXQ9InV0Zi04Ij4KICAgIAoKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgICAKICAgICAgICA8c2NyaXB0IGFzeW5jIGRhdGEtbWFpbj0iL3N0YXRpYy9qcy1idWlsZC9pbml0LjY1OWRhYzBlMWE2YiIgc3JjPSIvc3RhdGljL2pzLWJ1aWxkL2xpYi9yZXF1aXJlL3JlcXVpcmUuNTNiYzY0YzcyOWU5LmpzIj48L3NjcmlwdD4KICAgIAoKICAgICAgICAKCiAgICAgICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPgogICAgICAgIDwhLS0gV0FSTklORzogUmVzcG9uZC5qcyBkb2Vzbid0IHdvcmsgaWYgeW91IHZpZXcgdGhlIHBhZ2UgdmlhIGZpbGU6Ly8gLS0+CiAgICAgICAgPCEtLVtpZiBsdCBJRSA5XT4KICAgICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+CiAgICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0PgogICAgICAgIDwhW2VuZGlmXS0tPgogICAgPC9oZWFkPgogICAgPGJvZHkKICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgIAogICAgICAgICAgICBhbmh2MQogICAgICAgICAgICBuYW1lc3BhY2UtLXVzZXJfbG92ZWQKICAgICAgICAgICAgCiAgICAgICAgIgogICAgICAgIGRhdGEtcmVxdWlyZT0iYWRzL3BhZ2UtYWRzLGFkcy9zZWFyY2hsaW5rcyxwbGF5ZXIvcGxheWxpbmstaGFuZGxlcixkZXYvZ3JpZC1vdmVybGF5LGRldi90b2dnbGUtdmVyc2lvbixkZXYvZGVidWctbG9nLGRldi9kZWJ1Zy1pbWFnZS1hbmFseXNpcyxkZXYvanMtbG9nLGRldi9hZHMtdG9nZ2xlLGNvbXBvbmVudHMvbGluay1ibG9jayxjb21wb25lbnRzL2FqYXgtZm9ybSxjb3JlL21lZGlhLXNpemUtZXZlbnRzLXYyIgogICAgICAgIGRhdGEtcGxheWVyLXN1cHBvcnRlZD0idHJ1ZSIKICAgICAgICBkYXRhLXBlcnNpc3RlbnQtcGxheWVyLXN1cHBvcnRlZD0idHJ1ZSIKICAgICAgICBkYXRhLWNvdW50cnktY29kZT0iTkMiCiAgICAgICAgZGF0YS1pbml0aWFsLXZpZXctZ3VpZD0iNmI4YjJhZmQtYjI1Mi00NDNkLTkzNDQtNTZlYjIzMTA4NGM2IgogICAgICAgIGRhdGEtY2JzaS1wbGF5ZXItY29uZmlnPSIvc3RhdGljL2NvbmZpZy92aWRlby1wbGF5ZXIuOWFlODhhMTM3M2RhLnhtbCIKICAgICAgICBkYXRhLXNlbnNpdGl2ZS1wYXRoLXJlZ2V4PSJeLyguLi8pPyhnb29nbGVjM2VhMWIyNTI3NzRlMWFiXC5odG1sfGFjY291bnRfZGVsZXRlZHxpbmJveHxqb2lufGxvZ2lufGxvc3RwYXNzd29yZCgvY29uZmlybSk/fHN0YWZmfHN1YnNjcmliZXxzdXBwb3J0KD8hL2ltYWdlc3wvc2hvdXRzfC9zaG91dCl8c2V0dGluZ3MvKGFjY291bnR8d2Vic2l0ZXxzdWJzY3JpcHRpb258cGFzc3dvcmR8bG9zdHBhc3N3b3JkKXx1c2VyLy4rPy9zdXBwb3J0KSgvLiopPy8/JCIKICAgICAgICBkYXRhLWZhY2Vib29rLWFwcC1pZD0iMTkyOTU5MzI0MDQ3ODYxIgogICAgICAgIGRhdGEtZmFjZWJvb2stcGxhY2VtZW50LWlkPSIxOTU2MTI0NTEwMjIwODBfMjIwNTAyMTU1MTk5Nzc2IgogICAgICAgIGRhdGEtZ29vZ2xlLW1hcHMtYXBpLWtleT0iQUl6YVN5Qlg2LUlFM2x6NFBwSlVTQlZJb19kUGIwQkF5TWdpLVZFIgogICAgPgogICAgICAgIDxkaXYKICAgICAgICAgICAgZGF0YS1yZXF1aXJlPSJjb21wb25lbnRzL2xvYWRpbmctaW5kaWNhdG9yIgogICAgICAgICAgICBkYXRhLWxvYWRpbmctaW5kaWNhdG9yLWNvcHk9IkxvYWRpbmfigKYiCiAgICAgICAgPjwvZGl2PgogICAgICAgIDxkaXYKICAgICAgICAgICAgZGF0YS1yZXF1aXJlPSJjb21wb25lbnRzL29wZW4tbW9kYWwsY29tcG9uZW50cy9zdWJtaXQtdG8tbW9kYWwsY29tcG9uZW50cy9zaG93LWFsZXJ0IgogICAgICAgICAgICBkYXRhLXNob3ctYWxlcnQtb2stY29weT0iT2theSIKICAgICAgICA+PC9kaXY+CiAgICAgICAgCgogICAgCiAgICAgICAgPGRpdiBjbGFzcz0idG9wLWJhciI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICA8c2VjdGlvbgogICAgICAgIGRhdGEtcmVxdWlyZT0icGxheWVyL2NvbnRyb2xzLHBsYXllci9zdGF0dXMscGxheWVyL3RyYWNraW5nIgogICAgICAgIGRhdGEtcGxheWVyLXN0YXR1cy1hZC1wbGF5aW5nPSJBZCBwbGF5aW5nIgogICAgICAgIGRhdGEtcGxheWVyLXN0YXR1cy1pbmFjdGl2ZT0iJm5ic3A7IgogICAgICAgIGRhdGEtcGxheWVyLXN0YXR1cy1sb2FkaW5nLXNwb3RpZnk9IkNvbm5lY3RpbmcgU3BvdGlmeeKApiIKICAgICAgICBkYXRhLXBsYXllci1zdGF0dXMtc3BvdGlmeS1hdXRoLWVycm9yPSJDb3VsZCBub3QgYXV0aGVudGljYXRlIHdpdGggU3BvdGlmeS4iCgogICAgICAgIGRhdGEtcGxheWVyLWVycm9yLWNhbm5vdC1wbGF5LWl0ZW09IkNhbm5vdCBwbGF5IHRoYXQgaXRlbS4iCiAgICAgICAgZGF0YS1wbGF5ZXItZXJyb3ItdHJhY2stdW5hdmFpbGFibGU9IlRyYWNrIHVuYXZhaWxhYmxlLiIKICAgICAgICBkYXRhLXBsYXllci1tb2RhbC10aXRsZT0iUGxheSB2aWRlbyIKCiAgICAgICAgCgogICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgcGxheWVyLWJhcgogICAgICAgICAgICBpbmFjdGl2ZQogICAgICAgICIKICAgICAgICBhcmlhLWxhYmVsPSJhdWRpbyBwbGF5ZXIiCiAgICAgICAgYXJpYS1kaXNhYmxlZD0idHJ1ZSIKICAgID4KICAgICAgICA8ZGl2IGNsYXNzPSJwbGF5ZXItYmFyLWlubmVyLXdyYXAiPgogICAgICAgICAgICA8YSBjbGFzcz0icGxheWVyLWJhci1hcnR3b3JrIGpzLWFydHdvcmsiPgogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iIiBzcmM9Ii9zdGF0aWMvaW1hZ2VzL2RlZmF1bHRzL3BsYXllcl9kZWZhdWx0X2FsYnVtLjQzMDIyMzcwNmIxNC5wbmciIGFsdD0iIiAvPgogICAgICAgICAgICA8L2E+CgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iCiAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXNvdXJjZQogICAgICAgICAgICAgICAgcGxheWVyLWJhci1zb3VyY2UtLXNwb3RpZnkKICAgICAgICAgICAgIj5QbGF5aW5nIHZpYSBTcG90aWZ5PC9zcGFuPgoKICAgICAgICAgICAgPHNwYW4gY2xhc3M9IgogICAgICAgICAgICAgICAgcGxheWVyLWJhci1zb3VyY2UKICAgICAgICAgICAgICAgIHBsYXllci1iYXItc291cmNlLS15b3V0dWJlCiAgICAgICAgICAgICI+UGxheWluZyB2aWEgWW91VHViZTwvc3Bhbj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNvdXJjZS1pbmZvIj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0icGxheWVyLWJhci1wbGF5YmFjay1vcHRpb25zLWJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWhvdmVyCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0icGxheWVyLWJhci1wbGF5YmFjay1vcHRpb25zIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIFBsYXliYWNrIG9wdGlvbnMKICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGlkPSJwbGF5ZXItYmFyLXBsYXliYWNrLW9wdGlvbnMiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXBsYXliYWNrLW9wdGlvbnMtd3JhcAogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtZGFyawogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXBsYXliYWNrLW9wdGlvbnMtc3BvdGlmeQogICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24tbWVudS1ub24taW50ZXJhY3RpdmUtaXRlbS1kYXJrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwbGF5ZXItYmFyLWxpc3RlbmluZy1vbi1oZWFkaW5nIj5MaXN0ZW5pbmcgb27igKY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1saXN0ZW5pbmctb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5ZXItYmFyLWxpc3RlbmluZy1vbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YnV0dG9uIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtaXRlbS1kYXJrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1zd2l0Y2gtZGV2aWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXBsYXliYWNrLW9wdGlvbnMtc3dpdGNoLWRldmljZQogICAgICAgICAgICAgICAgICAgICAgICAiPlN3aXRjaCBTcG90aWZ5IGRldmljZTwvYnV0dG9uPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLXNvdXJjZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtaXRlbS1kYXJrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1wbGF5YmFjay1vcHRpb25zLWV4dGVybmFsLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgICA+T3BlbiBpbiBTcG90aWZ5IFdlYiBQbGF5ZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9Im1lbnUtc2VwYXJhdG9yLS1kYXJrIj4KICAgICAgICA8YQogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vc2V0dGluZ3Mvd2Vic2l0ZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtaXRlbS1kYXJrCiAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXBsYXliYWNrLW9wdGlvbnMtc2V0dGluZ3MKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgQ2hhbmdlIHBsYXliYWNrIHNvdXJjZQogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1kYXJrCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItcGxheWJhY2stb3B0aW9ucy15b3V0dWJlCiAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1pdGVtLWRhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1zb3VyY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXBsYXliYWNrLW9wdGlvbnMtZXh0ZXJuYWwtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICAgICAgICAgICAgICAgID5PcGVuIG9uIFlvdVR1YmUgd2Vic2l0ZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxsaSBjbGFzcz0ibWVudS1zZXBhcmF0b3ItLWRhcmsiPgogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS9zZXR0aW5ncy93ZWJzaXRlIgogICAgICAgICAgICAKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1pdGVtLWRhcmsKICAgICAgICAgICAgICAgIHBsYXllci1iYXItcGxheWJhY2stb3B0aW9ucy1zZXR0aW5ncwogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBDaGFuZ2UgcGxheWJhY2sgc291cmNlCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPGRpdiBjbGFzcz0icGxheWVyLWJhci1jb250cm9scyI+CgogICAgICAgICAgICAgICAgPHVsIGFyaWEtbGFiZWw9ImNvbnRyb2xzIiBjbGFzcz0ibWVkaWEtY29udHJvbHMiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1wcmV2aW91cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1idG4tLXByZXZpb3VzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXliYXJCYWNrVHJhY2siCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByZXZpb3VzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXktcGF1c2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItYnRuLS1wbGF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXN0cmluZy1wYXVzZT0iUGF1c2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXliYXJSZXN1bWVUcmFjayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbi1wYXVzZT0iUGxheWJhclBhdXNlVHJhY2siCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsYXkKICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganMtbmV4dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1idG4tLW5leHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheWJhclNraXBUcmFjayIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV4dAogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KCiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItc2tpcGxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1za2lwbGluay0teW91dHViZQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBocmVmPSIjeW91dHViZS12aWRlbyIKICAgICAgICAgICAgICAgID5Ta2lwIHRvIFlvdVR1YmUgdmlkZW88L2E+CgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBsYXllci1iYXItbm93LXBsYXlpbmciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGxheWVyLWJhci1ub3ctcGxheWluZy1pbm5lci13cmFwIj4KICAgICAgICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icGxheWVyLWJhci10cmFjayBqcy1wbGF5ZXItc3RhdHVzIgogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJub3cgcGxheWluZyIKICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtYXRvbWljPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgTG9hZGluZyBwbGF5ZXLigKYKICAgICAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwbGF5ZXItYmFyLWVycm9yIGpzLXBsYXllci1lcnJvciBwbGF5ZXItYmFyLXN0YXR1cy0taGlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwbGF5ZXItYmFyLWVycm9yLW1lc3NhZ2UganMtcGxheWVyLWVycm9yLW1lc3NhZ2UiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9InBsYXllci1iYXItcHJvZ3Jlc3Mtd3JhcCI+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJwbGF5ZXItYmFyLXByb2dyZXNzIgogICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0icHJvZ3Jlc3MiCiAgICAgICAgICAgICAgICByb2xlPSJ0aW1lciIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAganMtcHJvZ3Jlc3Mtc2x1ZwogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXByb2dyZXNzLXNsdWcKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtcHJvZ3Jlc3MtcmVtYWluaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXByb2dyZXNzLXJlbWFpbmluZwogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9InJlbWFpbmluZyIKICAgICAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGRhdGEtcmVxdWlyZT0icGxheWVyL3Njcm9iYmxlLWNsaWVudCI+PC9kaXY+CiAgICA8L3NlY3Rpb24+CgogICAgICAgICAgICAgICAgICAgIAogICAgPGRpdgogICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgbWFzdGhlYWQtcG9wdXAKICAgICAgICAgICAgbWFzdGhlYWQtcG9wdXAtLXNwb3RpZnktc2Nyb2JibGluZwogICAgICAgICAgICBtYXN0aGVhZC1wb3B1cC0taGlkZGVuCiAgICAgICAgIgogICAgICAgIGRhdGEtcmVxdWlyZT0iY29tcG9uZW50cy9zcG90aWZ5LXNjcm9iYmxpbmctcHJvbXB0LGNvbXBvbmVudHMvYWxlcnQtZGlzbWlzc2FibGUsY29tcG9uZW50cy9zcG90aWZ5LXNjcm9iYmxpbmctYmFubmVyIgogICAgICAgIGRhdGEtc3BvdGlmeS1zY29iYmxpbmctc3VjY2Vzcy1tb2RhbD0iL3NvY2lhbG1vZGFsL3Nwb3RpZnktc2Nyb2JibGluZy1zdWNjZXNzIgogICAgICAgIGRhdGEtc3BvdGlmeS1zY29iYmxpbmctZmFpbC1tb2RhbD0iL3NvY2lhbG1vZGFsL3Nwb3RpZnktc2Nyb2JibGluZy1mYWlsIgogICAgPgogICAgICAgIDxkaXYgY2xhc3M9Im1hc3RoZWFkLXBvcHVwLWlubmVyIj4KICAgICAgICAgICAgPGgzPlNjcm9iYmxlIGZyb20gU3BvdGlmeT88L2gzPgogICAgICAgICAgICA8cD5Db25uZWN0IHlvdXIgU3BvdGlmeSBhY2NvdW50IHRvIHlvdXIgTGFzdC5mbSBhY2NvdW50IGFuZCBzY3JvYmJsZSBldmVyeXRoaW5nIHlvdSBsaXN0ZW4gdG8sIGZyb20gYW55IFNwb3RpZnkgYXBwIG9uIGFueSBkZXZpY2Ugb3IgcGxhdGZvcm0uPC9wPgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0bi1wcmltYXJ5IGpzLXNldHVwLXNwb3RpZnktc2Nyb2JibGluZyIKICAgICAgICAgICAgICAgICAgICBocmVmPSIvc2V0dGluZ3MvYXBwbGljYXRpb25zIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIENvbm5lY3QgdG8gU3BvdGlmeQogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBocmVmPSIvbmFnYmFyL2Rpc21pc3Mvc3BvdGlmeS1zY3JvYmJsaW5nLXByb21wdD9wZXJpb2Q9cGVybWFuZW50IgogICAgICAgICAgICAgICAgY2xhc3M9Im1hc3RoZWFkLXBvcHVwLWNsb3NlIGpzLWFsZXJ0LWRpc21pc3NhYmxlLWNsb3NlIgogICAgICAgICAgICAgICAgZGF0YS1jbG9zZS1hamF4CiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIERpc21pc3MKICAgICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgCgogICAgPGRpdiBpZD0iY29udGVudCIgY2xhc3M9Im1haW4tY29udGVudCIgcm9sZT0ibWFpbiIgYXJpYS1saXZlPSJwb2xpdGUiPgogICAgICAgIAogICAgCgogICAgPGRpdiBpZD0idGxtZGF0YSIgaGlkZGVuIGNsYXNzPSJoaWRkZW4iCiAgICAgICAgIGRhdGEtdGVhbGl1bS1kYXRhPSd7JiMzNDtzaXRlU2VjdGlvbiYjMzQ7OiAmIzM0O3VzZXImIzM0OywgJiMzNDtwYWdlVHlwZSYjMzQ7OiAmIzM0O3VzZXJfbG92ZWQmIzM0OywgJiMzNDtwYWdlTmFtZSYjMzQ7OiAmIzM0O3VzZXIvbG92ZWQmIzM0OywgJiMzNDtuYXRpdmVFdmVudFRyYWNraW5nJiMzNDs6IHRydWUsICYjMzQ7dXNlclN0YXRlJiMzNDs6ICYjMzQ7bm90IGF1dGhlbnRpY2F0ZWQmIzM0OywgJiMzNDt1c2VyVHlwZSYjMzQ7OiAmIzM0O2Fub24mIzM0OywgJiMzNDtkZXZpY2VUeXBlJiMzNDs6ICYjMzQ7ZGVza3RvcCYjMzQ7LCAmIzM0O2lwR2VvJiMzNDs6ICYjMzQ7TkMmIzM0O30nPgogICAgIDwvZGl2PgoKICAgICAgICA8ZGl2CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAKICAgIDxkaXYKICAgICAgICBkYXRhLXJlcXVpcmU9ImNvbXBvbmVudHMvZGlzY2xvc2UtYmFzZSxjb21wb25lbnRzL2Rpc2Nsb3NlLWF1dG9jbG9zZS12Mixjb21wb25lbnRzL2Rpc2Nsb3NlLWRyb3Bkb3duLXYyLGNvbXBvbmVudHMvZGlzY2xvc2UtZHJvcGRvd24tbG9jYXRpb24tcGlja2VyLXYyLGNvbXBvbmVudHMvZGlzY2xvc2UtY29sbGFwc2luZy1uYXYtdjIsY29tcG9uZW50cy9kaXNjbG9zZS1hcnR3b3JrLGNvbXBvbmVudHMvZGlzY2xvc2UtcmVtb3ZlLGNvbXBvbmVudHMvZGlzY2xvc2Utc2VhcmNoLGNvbXBvbmVudHMvZGlzY2xvc2UtaG92ZXItdjMsY29tcG9uZW50cy9kaXNjbG9zZS1zZWxlY3QsY29tcG9uZW50cy9kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzLGNvbXBvbmVudHMvZm9jdXMtY29udHJvbHMsY29tcG9uZW50cy9wcmV2ZW50LXJlc3VibWl0LXYyLGNvbXBvbmVudHMvZWRpdC1zY3JvYmJsZSxjb21wb25lbnRzL3RvZ2dsZS1idXR0b25zLGNvbXBvbmVudHMvY2xpY2stcHJveHksY29tcG9uZW50cy9ib29rbWFyay1ub3RpZmljYXRpb24iCiAgICA+PC9kaXY+CgogICAgCiAgICAgICAgCgogICAgPG5hdiBjbGFzcz0ibWFzdGhlYWQiPjxkaXYgY2xhc3M9Im1hc3RoZWFkLWlubmVyLXdyYXAiPjxkaXYgY2xhc3M9Im1hc3RoZWFkLWxvZ28iPjxzcGFuIGNsYXNzPSJtYXN0aGVhZC1sb2dvLWxvYWRpbmciPjwvc3Bhbj48YSBocmVmPSIvIj4gTGFzdC5mbTwvYT48L2Rpdj48YQogICAgICAgIGNsYXNzPSJtYXN0aGVhZC1zZWFyY2gtdG9nZ2xlIiBocmVmPSIvc2VhcmNoIiBkYXRhLWRpc2Nsb3NlLXNlYXJjaCBhcmlhLWNvbnRyb2xzPSJtYXN0aGVhZC1zZWFyY2giPlNlYXJjaDwvYT48Zm9ybQogICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtc2VhcmNoLWZvcm0gZGlzY2xvc2UtaGlkZSBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5ICIgaWQ9Im1hc3RoZWFkLXNlYXJjaCIgYWN0aW9uPSIvc2VhcmNoIiBtZXRob2Q9ImdldCI+PGRpdiBjbGFzcz0ibWFzdGhlYWQtc2VhcmNoLWlubmVyLXdyYXAiPjxsYWJlbCBmb3I9Im1hc3RoZWFkLXNlYXJjaC1maWVsZCIgY2xhc3M9InNyLW9ubHkiPlNlYXJjaDwvbGFiZWw+PGlucHV0CiAgICAgICAgICAgICAgICBpZD0ibWFzdGhlYWQtc2VhcmNoLWZpZWxkIiBjbGFzcz0ibWFzdGhlYWQtc2VhcmNoLWZpZWxkIiB0eXBlPSJ0ZXh0IiBuYW1lPSJxIiBwbGFjZWhvbGRlcj0iU2VhcmNoIGZvciBtdXNpY+KApiIgLz48YnV0dG9uIGNsYXNzPSJtYXN0aGVhZC1zZWFyY2gtc3VibWl0IiB0eXBlPSJzdWJtaXQiPlNlYXJjaDwvYnV0dG9uPjwvZGl2PjwvZm9ybT48ZGl2IGNsYXNzPSJ2aXNpYmxlLXhzIj48YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtaGFtYnVyZ2VyLXRvZ2dsZSAiIGRhdGEtZGlzY2xvc2UtYXV0b2Nsb3NlIGFyaWEtY29udHJvbHM9Im1hc3RoZWFkLW5hdiI+VG9nZ2xlIG5hdmlnYXRpb248L2J1dHRvbj48dWwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1uYXYgZGlzY2xvc2UtaGlkZSBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5ICIgYXJpYS1sYWJlbD0iUHJpbWFyeSBuYXZpZ2F0aW9uIiBpZD0ibWFzdGhlYWQtbmF2Ij48bGkgY2xhc3M9Im1hc3RoZWFkLW5hdi1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1uYXYtY29udHJvbCAiIGhyZWY9Ii9kYXNoYm9hcmQiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJsaXZlIj5MaXZlPC9hPjwvbGk+PGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtbmF2LWNvbnRyb2wgIiBocmVmPSIvbXVzaWMiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJtdXNpYyI+TXVzaWM8L2E+PC9saT48bGkgY2xhc3M9Im1hc3RoZWFkLW5hdi1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1uYXYtY29udHJvbCAiIGhyZWY9Ii9jaGFydHMiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJjaGFydHMiPkNoYXJ0czwvYT48L2xpPjxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPjxhCiAgICAgICAgICAgICAgICBjbGFzcz0iIG1hc3RoZWFkLW5hdi1jb250cm9sICIgaHJlZj0iL2V2ZW50cyIgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJOYXZpZ2F0aW9uTGluayIgZGF0YS1hbmFseXRpY3MtbGFiZWw9ImV2ZW50cyI+RXZlbnRzPC9hPjwvbGk+PGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtbmF2LWNvbnRyb2wgIiBocmVmPSIvZmVhdHVyZXMiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJmZWF0dXJlcyI+RmVhdHVyZXM8L2E+PC9saT4KICAgIAogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9Im1hc3RoZWFkLW5hdi1pdGVtIj4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1hc3RoZWFkLW5hdi1jb250cm9sIgogICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9zdWJzY3JpYmUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InN1YnNjcmliZSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlVzZXJNZW51Q2xpY2siCiAgICAgICAgICAgICAgICA+U3Vic2NyaWJlPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgIDxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9Im1hc3RoZWFkLW5hdi1jb250cm9sIgogICAgICAgICAgICAgICAgaHJlZj0iL2pvaW4iCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlNpZ25VcENsaWNrIgogICAgICAgICAgICA+Sm9pbjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9Im1hc3RoZWFkLW5hdi1jb250cm9sIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbiIKICAgICAgICAgICAgPkxvZ2luPC9hPgogICAgICAgIDwvbGk+CiAgICAKPC91bD48L2Rpdj48ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiBuYXZsaXN0IG5hdmxpc3QtLW1vcmUgbWFzdGhlYWQtbmF2IGhpZGRlbi14cyAiIGRhdGEtcmVxdWlyZT0iY29tcG9uZW50cy9wcmltYXJ5LW5hdiIgZGF0YS1tb3JlLXN0cmluZz0iTW9yZeKApiI+PHVsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJqcy1uYXZsaXN0LWl0ZW1zIG5hdmxpc3QtaXRlbXMiIGFyaWEtbGFiZWw9IlByaW1hcnkgbmF2aWdhdGlvbiI+PGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtbmF2LWNvbnRyb2wgIiBocmVmPSIvZGFzaGJvYXJkIiBkYXRhLWFuYWx5dGljcy1hY3Rpb249Ik5hdmlnYXRpb25MaW5rIiBkYXRhLWFuYWx5dGljcy1sYWJlbD0ibGl2ZSI+TGl2ZTwvYT48L2xpPjxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPjxhCiAgICAgICAgICAgICAgICBjbGFzcz0iIG1hc3RoZWFkLW5hdi1jb250cm9sICIgaHJlZj0iL211c2ljIiBkYXRhLWFuYWx5dGljcy1hY3Rpb249Ik5hdmlnYXRpb25MaW5rIiBkYXRhLWFuYWx5dGljcy1sYWJlbD0ibXVzaWMiPk11c2ljPC9hPjwvbGk+PGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtbmF2LWNvbnRyb2wgIiBocmVmPSIvY2hhcnRzIiBkYXRhLWFuYWx5dGljcy1hY3Rpb249Ik5hdmlnYXRpb25MaW5rIiBkYXRhLWFuYWx5dGljcy1sYWJlbD0iY2hhcnRzIj5DaGFydHM8L2E+PC9saT48bGkgY2xhc3M9Im1hc3RoZWFkLW5hdi1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1uYXYtY29udHJvbCAiIGhyZWY9Ii9ldmVudHMiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJldmVudHMiPkV2ZW50czwvYT48L2xpPjxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPjxhCiAgICAgICAgICAgICAgICBjbGFzcz0iIG1hc3RoZWFkLW5hdi1jb250cm9sICIgaHJlZj0iL2ZlYXR1cmVzIiBkYXRhLWFuYWx5dGljcy1hY3Rpb249Ik5hdmlnYXRpb25MaW5rIiBkYXRhLWFuYWx5dGljcy1sYWJlbD0iZmVhdHVyZXMiPkZlYXR1cmVzPC9hPjwvbGk+PC91bD48L2Rpdj48dWwKICAgICAgICAgICAgY2xhc3M9IiBzaXRlLWF1dGggc2l0ZS1hdXRoLS1hbm9uIGhpZGRlbi14cyAiPgogICAgPGxpIGNsYXNzPSJzaXRlLWF1dGgtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSJzaXRlLWF1dGgtY29udHJvbCIgaHJlZj0iL2pvaW4iIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU2lnblVwQ2xpY2siPkpvaW48L2E+PC9saT48bGkgY2xhc3M9InNpdGUtYXV0aC1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9InNpdGUtYXV0aC1jb250cm9sIiBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luIj5Mb2dpbjwvYT48L2xpPgo8L3VsPjwvZGl2PjwvbmF2PgoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgCgoKICAgIAogICAgCgoKICAgIAoKICAgIAogICAgCiAgICAKICAgIDxkaXYKICAgICAgICBjbGFzcz0ibmFnLWJhciBuYWctYmFyLS1wbHliYXItbWFzdGhlYWQtcmVsZWFzZS13YXJuaW5nIgogICAgICAgIAogICAgICAgIHJvbGU9InN0YXR1cyIKICAgID4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAKICAgICAgICAgICAgPHAgY2xhc3M9Im5hZy1iYXItbWVzc2FnZSI+CiAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICBBIG5ldyB2ZXJzaW9uIG9mIExhc3QuZm0gaXMgYXZhaWxhYmxlLCB0byBrZWVwIGV2ZXJ5dGhpbmcgcnVubmluZyBzbW9vdGhseSwgcGxlYXNlIDxhIGhyZWY9ImphdmFzY3JpcHQ6d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpIj5yZWxvYWQ8L2E+IHRoZSBzaXRlLgogICAgCiAgICAKICAgICAgICAgICAgPC9wPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCiAgICAKCiAgICAKCiAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgCgoKICAgIAogICAgCgoKCgoKCiAgICAKICAgIAoKICAgIDxoZWFkZXIgY2xhc3M9IgogICAgICAgIGhlYWRlcgogICAgICAgIAogICAgICAgICAgICBoZWFkZXItLXdpdGgtYXZhdGFyCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIGhlYWRlci0tc3ViLXBhZ2UKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgaGVhZGVyLS11c2VyCiAgICAgICAgCiAgICAgICAgCiAgICAiPgogICAgICAgIAogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgaGVhZGVyLWJhY2tncm91bmQKICAgICAgICAgICAgICAgICAgICBoZWFkZXItYmFja2dyb3VuZC0taGFzLWltYWdlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKGh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvYXIwLzdlNzUzMWRiM2Y1YjQxMDhhNTRjMGQ0MWZhMWE0NjMxLmpwZyk7IgogICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgCgogICAgICAgIAogICAgCgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXItaW5uZXItd3JhcCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCiAgICAKCiAgICA8ZGl2IGNsYXNzPSJoZWFkZXItYXZhdGFyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJleHBhbmQtaW1hZ2Utc2hvdy1vbi1mb2N1cyBoZWFkZXItYXZhdGFyLWlubmVyLXdyYXAiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICA8c3BhbgogICAgCiAgICAgICAgY2xhc3M9IgogICAgICAgICAgICBhdmF0YXIKICAgICAgICAgICAgCiAgICAgICAgIgogICAgICAgIAogICAgPgogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91L2F2YXRhcjE3MHMvMDBiNDhjM2IwYWI4NDRmZWM0OGRhNzU5OTc5ODIzNGYucG5nIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGFsdD0iQXZhdGFyIGZvciBhbGV4aXN0b3Vsb3R0ZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgIAogICAgCiAgICAgICAgPC9zcGFuPgogICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgoKICAgICAgICAKICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLWluZm8iPgogICAgICAgICAgICAgICAgICAgIAogICAgPGRpdiBjbGFzcz0iaGVhZGVyLWluZm8tcHJpbWFyeSBoZWFkZXItaW5mby1wcmltYXJ5LS13aXRoLWNvbHVtbnMiPgogICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1pbmZvLXByaW1hcnktY29sMSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IgogICAgICAgICAgICAgICAgaGVhZGVyLXRpdGxlLWxhYmVsLXdyYXAKICAgICAgICAgICAgICAgIGhlYWRlci10aXRsZS1jb2x1bW4tZWxsaXBzaXMtd3JhcAogICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgPGgxIGNsYXNzPSJoZWFkZXItdGl0bGUiPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPmFsZXhpc3RvdWxvdHRlPC9hPgogICAgICAgICAgICAgICAgPC9oMT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIDxuYXYKICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgbmF2bGlzdAogICAgICAgICAgICAKICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIG5hdmxpc3QtLW1vcmUKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICIKICAgICAgICBhcmlhLWxhYmVsPSJTZWNvbmRhcnkgbmF2aWdhdGlvbiIKICAgICAgICAKICAgICAgICAgICAgZGF0YS1yZXF1aXJlPSJjb21wb25lbnRzL2NvbGxhcHNpbmctbmF2LXYyIgogICAgICAgICAgICBkYXRhLW1vcmUtc3RyaW5nPSJNb3Jl4oCmIgogICAgICAgIAogICAgPgogICAgICAgIDx1bCBjbGFzcz0ibmF2bGlzdC1pdGVtcyBqcy1uYXZsaXN0LWl0ZW1zIj4KICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmxpc3QtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLS1vdmVydmlldwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgT3ZlcnZpZXcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT48bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLXdlZWsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpc3RlbmluZy1yZXBvcnQvd2VlayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0ZW5pbmcgUmVwb3J0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPjxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0tbGlicmFyeQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaWJyYXJ5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvbGk+PGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmxpc3QtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLS1mb2xsb3dpbmcKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2ZvbGxvd2luZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb2xsb3dpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT48bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLWZvbGxvd2VycwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvZm9sbG93ZXJzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvbGxvd2VycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPjxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0tbG92ZWQKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmstLWFjdGl2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG92ZWQgVHJhY2tzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+KGN1cnJlbnQgc2VjdGlvbik8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvbGk+PGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmxpc3QtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLS1vYnNlc3Npb25zCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9vYnNlc3Npb25zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9ic2Vzc2lvbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT48bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLWV2ZW50cwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvZXZlbnRzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPjxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0tbmVpZ2hib3VycwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbmVpZ2hib3VycyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZWlnaGJvdXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvbGk+PGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmxpc3QtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLS10YWdzCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS90YWdzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhZ3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT48bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLXNob3V0Ym94CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9zaG91dGJveCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaG91dHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT4KICAgICAgICA8L3VsPgogICAgPC9uYXY+CgogICAgCgogICAgICAgIDwvZGl2PgoKICAgICAgICAKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgICAgIDxkaXYgY2xhc3M9IgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGhlYWRlci1mZWF0dXJlZC10cmFjawogICAgICAgICAgICAgICAgaGVhZGVyLWluZm8tcHJpbWFyeS1jb2wyCiAgICAgICAgICAgICAgICBmZWF0dXJlZC1pdGVtLS10cnVuY2F0ZWQKICAgICAgICAgICAgICAgIGZlYXR1cmVkLWl0ZW0tLXJpZ2h0CiAgICAgICAgICAgIAogICAgICAgICAgICBmZWF0dXJlZC1pdGVtCiAgICAgICAgIj4KICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlZC1pdGVtLWFydCI+CiAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzljMDk0ZDlmYTZjMDQ0OWFiNTRmMTc5ZTliMjY4ZTA1LmpwZyIKICAgICAgICAgICAgYWx0PSJTeW5jb3BhdGVkIENpdHkgKFNwZWNpYWwgSmFwYW4gRWRpdGlvbikiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBpbWFnZS1vdmVybGF5LXBsYXlsaW5rLWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9V2theklibzM4UVUiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iV2theklibzM4UVUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVdrYXpJYm8zOFFVIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iTWF5YmUgSSBXYXMgV3JvbmciCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9fL01heWJlK0krV2FzK1dyb25nIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iTG9uZG9uIEVsZWt0cmljaXR5IgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJGZWF0dXJlZFRyYWNrUGxheVRyYWNrT25QYWdlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InlvdXR1YmUiCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIFBsYXkgdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAKCiAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmVkLWl0ZW0tZGV0YWlscyI+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImZlYXR1cmVkLWl0ZW0taGVhZGluZyI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIFRvcCBUcmFjawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkvXy9NYXliZStJK1dhcytXcm9uZyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IkZlYXR1cmVkVHJhY2tUcmFja05hbWUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJmZWF0dXJlZC1pdGVtLW5hbWUiCiAgICAgICAgICAgIAogICAgICAgID5NYXliZSBJIFdhcyBXcm9uZzwvYT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJGZWF0dXJlZFRyYWNrQXJ0aXN0TmFtZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImZlYXR1cmVkLWl0ZW0tYXJ0aXN0IgogICAgICAgICAgICAKICAgICAgICA+TG9uZG9uIEVsZWt0cmljaXR5PC9hPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgCgoKICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvaGVhZGVyPgoKCgogICAgCiAgICA8ZGl2IGlkPSJtYW50bGVfc2tpbiIgY2xhc3M9ImFkYXB0aXZlLXNraW4tY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJhZGFwdGl2ZS1za2luLXdyYXBwZXIiPgogICAgICAgICAgICA8ZGl2IGlkPSJhZFNraW5MZWZ0IiBjbGFzcz0iYWRhcHRpdmUtc2tpbi1sZWZ0Ij48L2Rpdj4KICAgICAgICAgICAgPGRpdiBpZD0iYWRTa2luUmlnaHQiIGNsYXNzPSJhZGFwdGl2ZS1za2luLXJpZ2h0Ij48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJza2luIiBkYXRhLWFkPSJza2luIiBjbGFzcz0ic2tpbiBsYXN0Zm0tYWQiIGRhdGEtYWRzLXBsYWNlbWVudD0neyYjMzQ7aWQmIzM0OzogJiMzNDtza2luJiMzNDssICYjMzQ7c2l6ZXMmIzM0OzogW1sxNjAwLCAxMDAwXV0sICYjMzQ7dGFyZ2V0aW5nJiMzNDs6IHsmIzM0O3BvcyYjMzQ7OiAmIzM0O3RvcCYjMzQ7fSwgJiMzNDtjb2xsYXBzZV9iZWZvcmVfbG9hZCYjMzQ7OiB0cnVlfSc+PC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAKCgogICAgICAgIAoKICAgICAgICAKICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtdG9wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LXRvcC1pbm5lci13cmFwIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJsZWFkZXJfdG9wIiBkYXRhLWFkPSJsZWFkZXJfdG9wIiBjbGFzcz0ibGVhZGVyX3RvcCBsYXN0Zm0tYWQiIGRhdGEtYWRzLXBsYWNlbWVudD0neyYjMzQ7aWQmIzM0OzogJiMzNDtsZWFkZXJfdG9wJiMzNDssICYjMzQ7c2l6ZXMmIzM0OzogW1s3MjgsIDkwXSwgWzk3MCwgNjZdLCBbOTcwLCAyNTBdLCBbNzI4LCA5MV1dLCAmIzM0O3RhcmdldGluZyYjMzQ7OiB7JiMzNDtwb3MmIzM0OzogJiMzNDt0b3AmIzM0O30sICYjMzQ7YWRibG9ja19tZXNzYWdlJiMzNDs6IHRydWV9Jz48L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBjb250ZW50LXRvcC1sb3dlciI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0iY29udGVudC10b3AtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgTG92ZWQgVHJhY2tzCiAgICAKICAgIAogICAgICAgICgxNjY2KQogICAgCgoKICAgICAgICAgICAgICAgICAgICAgICAgPC9oMT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCiAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgcGFnZS1jb250ZW50Ij4KICAgICAgICAKICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1haW4iPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPSJ1c2VyLWxvdmVkLXRyYWNrcy1zZWN0aW9uIj4KICAgICAgICAgICAgICAgICAgICAKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAoKICAgIDx0YWJsZQogICAgICAgIAogICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgY2hhcnRsaXN0CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtcGxheQogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtbW9iaWxlLXBsYXkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC0td2l0aC1pbWFnZQogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtbG92ZWQKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2hhcnRsaXN0LS13aXRoLWFydGlzdAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2hhcnRsaXN0LS13aXRoLW1vcmUKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC0td2l0aC1idXlsaW5rcwogICAgICAgICAgICAKICAgICAgICAiCiAgICA+CiAgICAgICAgPHRoZWFkIGNsYXNzPSJzci1vbmx5Ij4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHRoPlBsYXk8L3RoPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsYnVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dGg+TG92ZWQ8L3RoPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBUcmFjayBuYW1lCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RoPgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0aD5BcnRpc3QgbmFtZTwvdGg+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dGg+QnV5PC90aD4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0aD5PcHRpb25zPC90aD4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0aD5UaW1lc3RhbXA8L3RoPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgPC90aGVhZD4KICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSJkYTQxMjk4YTg2NTQ1YjM1YWVmYjg4Y2I4OTNhY2I1NCIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzQxMjhhNmViMjlmOTQ5NDNjOWQyMDZjMDhlNjI1OTA0IgogICAgICAgICAgICBhbHQ9IkJsdWUgTGFrZSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJkNDQ2OTI1YmQ4ZDNkMzNjZTIwMjRmMGJiYWNkYzk4MCIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImQ0NDY5MjViZDhkM2QzM2NlMjAyNGYwYmJhY2RjOTgwIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9CbHVlK0xha2UiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJCbHVlIExha2UiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Qmx1ZSBMYWtlPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQm9yaXMgQnJlamNoYSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Qm9yaXMgQnJlamNoYTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1iMGZhZWEzNC03YTM0LTRmNjItODYwYi0wYWM0ODM2M2JlZGYiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9CbHVlK0xha2UvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWIwZmFlYTM0LTdhMzQtNGY2Mi04NjBiLTBhYzQ4MzYzYmVkZiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS02MzVmYTk5My0xNzZmLTRlZTQtOWNjMS1iZGVkNDVjNzUyZDUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL0JsdWUrTGFrZS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS02MzVmYTk5My0xNzZmLTRlZTQtOWNjMS1iZGVkNDVjNzUyZDUiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9CbHVlK0xha2UiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Cb3JpcytCcmVqY2hhL18vQmx1ZStMYWtlIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJNb25kYXkgMSBKdWwgMjAxOSwgMTA6MzRhbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgSnVsIDEwOjM0YW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iZDlmN2EwMzcxZTQyZGU2ZGY3ODlmMzJmMTQxMmFiODgiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJMaWYgVXAgKGZlYXQuIFRlbm9yIEZseSkgKFJjb2xhIFJlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI4MjQzZjI1ZTEyZmQ5NDcxMTFkY2NmYzVhN2NkMDBjNiIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjgyNDNmMjVlMTJmZDk0NzExMWRjY2ZjNWE3Y2QwMGM2IgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0NhcGl0b2wrMTIxMi9fL0xpZitVcCsoZmVhdC4rVGVub3IrRmx5KSsoUmNvbGErUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTGlmIFVwIChmZWF0LiBUZW5vciBGbHkpIChSY29sYSBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TGlmIFVwIChmZWF0LiBUZW5vciBGbHkpIChSY29sYSBSZW1peCk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0NhcGl0b2wrMTIxMiIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkNhcGl0b2wgMTIxMiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Q2FwaXRvbCAxMjEyPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTIxMWUyY2YyLWFiOGEtNGIxMS1iMmVjLWVjMjk5ZDU5NDZlMyIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQ2FwaXRvbCsxMjEyL18vTGlmK1VwKyhmZWF0LitUZW5vcitGbHkpKyhSY29sYStSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTIxMWUyY2YyLWFiOGEtNGIxMS1iMmVjLWVjMjk5ZDU5NDZlMyIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS03MzRiNGE5Yy1hNmIyLTQ4ZjUtYTIyNy0yZDAwYTc5YzI1NDIiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQ2FwaXRvbCsxMjEyL18vTGlmK1VwKyhmZWF0LitUZW5vcitGbHkpKyhSY29sYStSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNzM0YjRhOWMtYTZiMi00OGY1LWEyMjctMmQwMGE3OWMyNTQyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9DYXBpdG9sKzEyMTIvXy9MaWYrVXArKGZlYXQuK1Rlbm9yK0ZseSkrKFJjb2xhK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0NhcGl0b2wrMTIxMi9fL0xpZitVcCsoZmVhdC4rVGVub3IrRmx5KSsoUmNvbGErUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9DYXBpdG9sKzEyMTIiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9DYXBpdG9sKzEyMTIiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxvdmVkIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iTW9uZGF5IDEgSnVsIDIwMTksIDEwOjM0YW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxIEp1bCAxMDozNGFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9IjA4ZjdlM2FkZThkY2ZmODA0MWEzZjgzMDVhYzU0NTIwIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PS1GTFBZcmJtanN3IgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9Ii1GTFBZcmJtanN3IgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0tRkxQWXJibWpzdyIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9IkR1bmUiCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL0R1YWwrUmVzb25hbmNlL18vRHVuZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IkR1YWwgUmVzb25hbmNlIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL0R1YWwrUmVzb25hbmNlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvWmVuK01lY2hhbmljcy9TYWNyZWQrQ2lyY3VpdHMsK1ZvbC4rMiIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iU2FjcmVkIENpcmN1aXRzLCBWb2wuIDIiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYTlhMzcwN2NkZTliNjQ5ZDEzODM1OTkwMGY1ZGRjMWQiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJhOWEzNzA3Y2RlOWI2NDlkMTM4MzU5OTAwZjVkZGMxZCIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EdWFsK1Jlc29uYW5jZS9fL0R1bmUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJEdW5lIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkR1bmU8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0R1YWwrUmVzb25hbmNlIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iRHVhbCBSZXNvbmFuY2UiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkR1YWwgUmVzb25hbmNlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTQxNjQyMTg5LTExM2MtNGEyZC1iNTYxLTA2Njg4MWQ2NWMwMiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRHVhbCtSZXNvbmFuY2UvXy9EdW5lLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy00MTY0MjE4OS0xMTNjLTRhMmQtYjU2MS0wNjY4ODFkNjVjMDIiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtODBlNjY2MDItODNiMy00NGYwLTljNGQtZmFiNjZjNTQ4MmNiIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0R1YWwrUmVzb25hbmNlL18vRHVuZS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS04MGU2NjYwMi04M2IzLTQ0ZjAtOWM0ZC1mYWI2NmM1NDgyY2IiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0R1YWwrUmVzb25hbmNlL18vRHVuZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0R1YWwrUmVzb25hbmNlL18vRHVuZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRHVhbCtSZXNvbmFuY2UiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9EdWFsK1Jlc29uYW5jZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJGcmlkYXkgMjggSnVuIDIwMTksIDExOjQxYW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyOCBKdW4gMTE6NDFhbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSI2NDIwZjE3YzU4ODQ5NmQ1Mzg3ZjM3ZWU1ZTYyNzM1NiIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1Xa2F6SWJvMzhRVSIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJXa2F6SWJvMzhRVSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9V2theklibzM4UVUiCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJNYXliZSBJIFdhcyBXcm9uZyIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L18vTWF5YmUrSStXYXMrV3JvbmciCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJMb25kb24gRWxla3RyaWNpdHkiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5IgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L1N5bmNvcGF0ZWQrQ2l0eSsoU3BlY2lhbCtKYXBhbitFZGl0aW9uKSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvOWMwOTRkOWZhNmMwNDQ5YWI1NGYxNzllOWIyNjhlMDUuanBnIgogICAgICAgICAgICBhbHQ9IlN5bmNvcGF0ZWQgQ2l0eSAoU3BlY2lhbCBKYXBhbiBFZGl0aW9uKSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJjMWUyZWZjZDg4ODk3NWJmNDc4ZGQwYTU4YjVlM2VkMCIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImMxZTJlZmNkODg4OTc1YmY0NzhkZDBhNThiNWUzZWQwIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9fL01heWJlK0krV2FzK1dyb25nIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTWF5YmUgSSBXYXMgV3JvbmciCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TWF5YmUgSSBXYXMgV3Jvbmc8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkxvbmRvbiBFbGVrdHJpY2l0eSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TG9uZG9uIEVsZWt0cmljaXR5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTY1MDgwMjRkLTgyN2EtNGJmMS05MzRkLTBiN2EwYmEwYTQ5MiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L18vTWF5YmUrSStXYXMrV3JvbmcvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTY1MDgwMjRkLTgyN2EtNGJmMS05MzRkLTBiN2EwYmEwYTQ5MiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0yMzU2MTkzZS02OTE2LTRmY2YtOGEyMS04ODYyNjczNDQ0NjYiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L18vTWF5YmUrSStXYXMrV3JvbmcvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtMjM1NjE5M2UtNjkxNi00ZmNmLThhMjEtODg2MjY3MzQ0NDY2IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkvXy9NYXliZStJK1dhcytXcm9uZyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9fL01heWJlK0krV2FzK1dyb25nIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxvdmVkIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iV2VkbmVzZGF5IDEyIEp1biAyMDE5LCAxMDo1OGFtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTIgSnVuIDEwOjU4YW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iYzNkYWFjNDgwMmFmZjI2YmNiMTEzM2M2ZWQ2NDdkZTAiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJOb3cgU2hlJiMzOTtzIEdvbmUgKEogQm9zdHJvbiBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZmUxNzdhZjFiZjkyN2JkMmU3NzdhZWJhMDAwYTAxYTUiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJmZTE3N2FmMWJmOTI3YmQyZTc3N2FlYmEwMDBhMDFhNSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Db2xsaWUrQnVkZHovXy9Ob3crU2hlJTI3cytHb25lKyhKK0Jvc3Ryb24rUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTm93IFNoZSYjMzk7cyBHb25lIChKIEJvc3Ryb24gUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPk5vdyBTaGUmIzM5O3MgR29uZSAoSiBCb3N0cm9uIFJlbWl4KTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ29sbGllK0J1ZGR6IgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQ29sbGllIEJ1ZGR6IgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Db2xsaWUgQnVkZHo8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtYTNhZjdhMzctMzc5ZC00Nzg4LTk0Y2MtMGZjMzY5MmQ5MTdlIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Db2xsaWUrQnVkZHovXy9Ob3crU2hlJTI3cytHb25lKyhKK0Jvc3Ryb24rUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1hM2FmN2EzNy0zNzlkLTQ3ODgtOTRjYy0wZmMzNjkyZDkxN2UiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtNjk2MzI4YjEtZTM0Ny00MDk1LTljMTktY2JjYTNjM2Q5YmJlIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0NvbGxpZStCdWRkei9fL05vdytTaGUlMjdzK0dvbmUrKEorQm9zdHJvbitSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNjk2MzI4YjEtZTM0Ny00MDk1LTljMTktY2JjYTNjM2Q5YmJlIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Db2xsaWUrQnVkZHovXy9Ob3crU2hlJTI3cytHb25lKyhKK0Jvc3Ryb24rUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ29sbGllK0J1ZGR6L18vTm93K1NoZSUyN3MrR29uZSsoSitCb3N0cm9uK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ29sbGllK0J1ZGR6IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ29sbGllK0J1ZGR6IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9Ik1vbmRheSAzIEp1biAyMDE5LCAxMToyNmFtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBKdW4gMTE6MjZhbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY2hhcnRsaXN0LXJvdy0taW50ZXJsaXN0LWFkIGJ1ZmZlci1zdGFuZGFyZCIgZGF0YS1hZC1jb250YWluZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im1vYmlsZV9wb3NfMSIgZGF0YS1hZD0ibW9iaWxlX3Bvc18xIiBjbGFzcz0ibW9iaWxlX3Bvc18xIGxhc3RmbS1hZC1tb2JpbGUiIGRhdGEtYWRzLXBsYWNlbWVudD0neyYjMzQ7aWQmIzM0OzogJiMzNDttb2JpbGVfcG9zXzEmIzM0OywgJiMzNDtzaXplcyYjMzQ7OiBbWzMwMCwgMjUwXSwgWzMyMCwgNTBdXSwgJiMzNDtpc19tb2JpbGUmIzM0OzogdHJ1ZSwgJiMzNDt0YXJnZXRpbmcmIzM0OzogeyYjMzQ7cG9zJiMzNDs6ICYjMzQ7MSYjMzQ7fSwgJiMzNDthZGJsb2NrX21lc3NhZ2UmIzM0OzogdHJ1ZX0nPjwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8cCBjbGFzcz0ibXB1LXN1YnNjcmlwdGlvbi11cHNlbGwgbXB1LXN1YnNjcmlwdGlvbi11cHNlbGwtLW1vYmlsZV9wb3NfMSI+CiAgICAgICAgICAgICAgICBEb24ndCB3YW50IHRvIHNlZSBhZHM/IDxhIGhyZWY9Ii9zdWJzY3JpYmUiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3Vic2NyaWJlQ2xpY2siIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBZFVwc2VsbENUQSI+U3Vic2NyaWJlIG5vdzwvYT4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iYjdhMjNiYjllN2Q3YjRhZDU2OGU3Y2RiNjJiOTlhYzYiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9UmxyWDZCSUdsWjQiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iUmxyWDZCSUdsWjQiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVJsclg2QklHbFo0IgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iRGlhZ29uYWwiCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL0d1eStKL18vRGlhZ29uYWwiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJHdXkgSiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy9HdXkrSiIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0d1eStKL01EUSslMkYrRGlhZ29uYWwiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2FkODA1OWQ1MDAzODM2YjZkMTRiYWJiMmY1ZGUxMjhjLmpwZyIKICAgICAgICAgICAgYWx0PSJNRFEgLyBEaWFnb25hbCIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI5NDNhNTFjZjdlYzNjMGNkYTg3YWE3ZWEwMGY5NWI1YSIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9Ijk0M2E1MWNmN2VjM2MwY2RhODdhYTdlYTAwZjk1YjVhIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0d1eStKL18vRGlhZ29uYWwiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJEaWFnb25hbCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5EaWFnb25hbDwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR3V5K0oiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJHdXkgSiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+R3V5IEo8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtOTMwMWYxYWQtNzdmNi00MWQwLWI5ZjUtMGYxOGQyNjM0YzFmIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9HdXkrSi9fL0RpYWdvbmFsLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy05MzAxZjFhZC03N2Y2LTQxZDAtYjlmNS0wZjE4ZDI2MzRjMWYiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtZDI0NWJhNzgtNGQ0Mi00MjA5LWE1ODktZWRkOGMxOWY2YmE3IgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0d1eStKL18vRGlhZ29uYWwvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtZDI0NWJhNzgtNGQ0Mi00MjA5LWE1ODktZWRkOGMxOWY2YmE3IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9HdXkrSi9fL0RpYWdvbmFsIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvR3V5K0ovXy9EaWFnb25hbCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR3V5K0oiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9HdXkrSiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJGcmlkYXkgMjQgTWF5IDIwMTksIDM6MTVwbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI0IE1heSAzOjE1cG0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iNmYxMWI4ZDVlMGUwYTNhYzAzN2MwNTk0NGNmZDRmNDUiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9RGFCQ2Yyam5lbXMiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iRGFCQ2Yyam5lbXMiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PURhQkNmMmpuZW1zIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iRGVsdGF2b3giCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL05oYXIvXy9EZWx0YXZveCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9Ik5oYXIiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvTmhhciIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL05oYXIvRGVsdGF2b3grLStTaW5nbGUiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2M2ZjU5YzFlNWU3MjQwYTRjMGQ0MjdhYmQ3MWYzZGJiIgogICAgICAgICAgICBhbHQ9IkRlbHRhdm94IC0gU2luZ2xlIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjYzYWM0NjdmNjNkZmMxOGU1YzRkOWY3ZDcyMmRkNWQ3IgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNjNhYzQ2N2Y2M2RmYzE4ZTVjNGQ5ZjdkNzIyZGQ1ZDciCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTmhhci9fL0RlbHRhdm94IgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iRGVsdGF2b3giCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+RGVsdGF2b3g8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL05oYXIiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJOaGFyIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5OaGFyPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWIzNzI4M2M4LTkwMzQtNDE3OS1hMjBiLWY5NTlhNTMzMmQxOCIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvTmhhci9fL0RlbHRhdm94LytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1iMzcyODNjOC05MDM0LTQxNzktYTIwYi1mOTU5YTUzMzJkMTgiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtYzljYWIxMTctZDk0Ny00OGNkLWI5MjktM2UxMWNlNTJkOTBmIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL05oYXIvXy9EZWx0YXZveC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1jOWNhYjExNy1kOTQ3LTQ4Y2QtYjkyOS0zZTExY2U1MmQ5MGYiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL05oYXIvXy9EZWx0YXZveCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL05oYXIvXy9EZWx0YXZveCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTmhhciIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL05oYXIiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxvdmVkIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iRnJpZGF5IDI0IE1heSAyMDE5LCAxMDoxNWFtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjQgTWF5IDEwOjE1YW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iZDhmYzljNGY1NjU5YzNjZWZhNDRkZTk1NTk3MGJiMjkiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvSGVucnkrU2Fpei9JbitUaGUrRGlzdGFuY2UiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2RhNzc5NThiNzM5OTUwYWY3MTA0Y2QyZGU0Y2M0YmU3LmpwZyIKICAgICAgICAgICAgYWx0PSJJbiBUaGUgRGlzdGFuY2UiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMjZjNWZhZmJmMDI2NjE4NGI5ODEzYWYyY2NkODQ0MGIiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSIyNmM1ZmFmYmYwMjY2MTg0Yjk4MTNhZjJjY2Q4NDQwYiIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9IZW5yeStTYWl6L18vSW4rdGhlK0Rpc3RhbmNlIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iSW4gdGhlIERpc3RhbmNlIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkluIHRoZSBEaXN0YW5jZTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvSGVucnkrU2FpeiIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkhlbnJ5IFNhaXoiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkhlbnJ5IFNhaXo8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNmIyZDcxYTUtNGQ4Ni00ODNkLTgyNGQtYmU1ZTBjODYzYTI5IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9IZW5yeStTYWl6L18vSW4rdGhlK0Rpc3RhbmNlLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy02YjJkNzFhNS00ZDg2LTQ4M2QtODI0ZC1iZTVlMGM4NjNhMjkiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtMjk4MzBiYWQtY2I3Ny00ZjM4LWEwYzAtZTViYTAwOGEyNjFiIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0hlbnJ5K1NhaXovXy9Jbit0aGUrRGlzdGFuY2UvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtMjk4MzBiYWQtY2I3Ny00ZjM4LWEwYzAtZTViYTAwOGEyNjFiIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9IZW5yeStTYWl6L18vSW4rdGhlK0Rpc3RhbmNlIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvSGVucnkrU2Fpei9fL0luK3RoZStEaXN0YW5jZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvSGVucnkrU2FpeiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0hlbnJ5K1NhaXoiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxvdmVkIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iV2VkbmVzZGF5IDIyIE1heSAyMDE5LCAxOjM5cG0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMiBNYXkgMTozOXBtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9ImVhNDkxZjM1ODQ2ZWQxMTg4NWIyNzk5ZGUwY2FlNTQ5IgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iVG9tb3Jyb3dsYW5kIDIwMTgiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNWNmOGYxZjRiMzFhNmE1ZDc0NTdlZTAxMjBmMTc0YTgiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI1Y2Y4ZjFmNGIzMWE2YTVkNzQ1N2VlMDEyMGYxNzRhOCIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Tb2xvbXVuL18vVG9tb3Jyb3dsYW5kKzIwMTgiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJUb21vcnJvd2xhbmQgMjAxOCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Ub21vcnJvd2xhbmQgMjAxODwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvU29sb211biIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlNvbG9tdW4iCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlNvbG9tdW48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtODk2NjU4MDEtNjcwOS00OTU0LTg4ZTgtNzU3MDRhZDQxNzczIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Tb2xvbXVuL18vVG9tb3Jyb3dsYW5kKzIwMTgvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTg5NjY1ODAxLTY3MDktNDk1NC04OGU4LTc1NzA0YWQ0MTc3MyIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0xNGNiY2VkNy01NTA2LTRjZDgtODNhMi0xOWRmODYwM2JmYzkiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvU29sb211bi9fL1RvbW9ycm93bGFuZCsyMDE4LytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTE0Y2JjZWQ3LTU1MDYtNGNkOC04M2EyLTE5ZGY4NjAzYmZjOSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvU29sb211bi9fL1RvbW9ycm93bGFuZCsyMDE4IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvU29sb211bi9fL1RvbW9ycm93bGFuZCsyMDE4IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Tb2xvbXVuIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvU29sb211biIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJNb25kYXkgMTMgTWF5IDIwMTksIDExOjI5YW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMyBNYXkgMTE6MjlhbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSI3YzFmZDAzZjkxYjcxODY1NGM1ZjlhOGViMDZjNjRmOSIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzQxMjhhNmViMjlmOTQ5NDNjOWQyMDZjMDhlNjI1OTA0IgogICAgICAgICAgICBhbHQ9Ik1vbmtleSBLdXNoIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9Ijk1NTlkZTc3Y2Q4NGEwMWY1OWU1NjA5Y2M1Nzk0YzM2IgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iOTU1OWRlNzdjZDg0YTAxZjU5ZTU2MDljYzU3OTRjMzYiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTGFDaGlwcy9fL01vbmtleStLdXNoIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTW9ua2V5IEt1c2giCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TW9ua2V5IEt1c2g8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xhQ2hpcHMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJMYUNoaXBzIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5MYUNoaXBzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTVkYjkwZjNiLTlhZGUtNDBjNi05YzM3LWQyYzc5MzY3YTYyZSIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvTGFDaGlwcy9fL01vbmtleStLdXNoLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy01ZGI5MGYzYi05YWRlLTQwYzYtOWMzNy1kMmM3OTM2N2E2MmUiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtYzIwODMyMWEtMjhmNC00NWE4LWJjYmEtYzIxNzVmODRhZGQ3IgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0xhQ2hpcHMvXy9Nb25rZXkrS3VzaC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1jMjA4MzIxYS0yOGY0LTQ1YTgtYmNiYS1jMjE3NWY4NGFkZDciCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xhQ2hpcHMvXy9Nb25rZXkrS3VzaCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0xhQ2hpcHMvXy9Nb25rZXkrS3VzaCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTGFDaGlwcyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0xhQ2hpcHMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxvdmVkIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iTW9uZGF5IDEzIE1heSAyMDE5LCAxMDo1NGFtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTMgTWF5IDEwOjU0YW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iYTMwZjhkMWRjNjVkNTJlYTAyYTVkZTM2MGIxNjM4ZDkiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Q05ybTQ3Nmp5aGsiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iQ05ybTQ3Nmp5aGsiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUNOcm00NzZqeWhrIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iQ2l0eSBPZiBHb2xkIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9UaGUrUHJvdG90eXBlcy9fL0NpdHkrT2YrR29sZCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IlRoZSBQcm90b3R5cGVzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL1RoZStQcm90b3R5cGVzIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvVGhlK1Byb3RvdHlwZXMvQ2l0eStvZitHb2xkKyhCb251cytWZXJzaW9uKSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNjJmYmZkYTEyOTlmMjM1NTIyOGFkNDIxNDlhZjNkMWUuanBnIgogICAgICAgICAgICBhbHQ9IkNpdHkgb2YgR29sZCAoQm9udXMgVmVyc2lvbikiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZDRiYTQ0ZjU0YTkwMjYxMGI0ODY5OGNiYjhmMDhmZTQiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJkNGJhNDRmNTRhOTAyNjEwYjQ4Njk4Y2JiOGYwOGZlNCIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9UaGUrUHJvdG90eXBlcy9fL0NpdHkrT2YrR29sZCIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkNpdHkgT2YgR29sZCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5DaXR5IE9mIEdvbGQ8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1RoZStQcm90b3R5cGVzIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iVGhlIFByb3RvdHlwZXMiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlRoZSBQcm90b3R5cGVzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWVjZDczNzNlLTNiNGMtNGQ4My05OGIyLTM0NTJiMmU4YWExNCIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvVGhlK1Byb3RvdHlwZXMvXy9DaXR5K09mK0dvbGQvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWVjZDczNzNlLTNiNGMtNGQ4My05OGIyLTM0NTJiMmU4YWExNCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0zMzZlMjUxOS03ZDNkLTQ1NDAtYTdkMC00ZGQ3NDRiNjFjNzkiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvVGhlK1Byb3RvdHlwZXMvXy9DaXR5K09mK0dvbGQvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtMzM2ZTI1MTktN2QzZC00NTQwLWE3ZDAtNGRkNzQ0YjYxYzc5IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9UaGUrUHJvdG90eXBlcy9fL0NpdHkrT2YrR29sZCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1RoZStQcm90b3R5cGVzL18vQ2l0eStPZitHb2xkIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9UaGUrUHJvdG90eXBlcyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1RoZStQcm90b3R5cGVzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IlRodXJzZGF5IDIgTWF5IDIwMTksIDQ6NDdwbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgTWF5IDQ6NDdwbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSI5YmQ4MjdhZTQ0ZWU4MDMzNDRiMjVkNzgxMGUyYWUzMSIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9WYXJpb3VzK0FydGlzdHMvQmFzc3J1c2grMS4wKyhWaXBlcitQcmVzZW50cykiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzcyMzE0ZDRhNzU5ZGQxNDc1MWE5ODg0NDQzM2Q1MGFiLmpwZyIKICAgICAgICAgICAgYWx0PSJCYXNzcnVzaCAxLjAgKFZpcGVyIFByZXNlbnRzKSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJkYzhkZWY4MWE4N2UyZmMwMWFlNThmMjg1ODQxOWE4OSIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImRjOGRlZjgxYTg3ZTJmYzAxYWU1OGYyODU4NDE5YTg5IgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1RoZStQcm90b3R5cGVzL18vS2lsbCtUaGUrU2lsZW5jZSsoZmVhdC4rQXlhaCtNYXJhcikiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJLaWxsIFRoZSBTaWxlbmNlIChmZWF0LiBBeWFoIE1hcmFyKSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5LaWxsIFRoZSBTaWxlbmNlIChmZWF0LiBBeWFoIE1hcmFyKTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvVGhlK1Byb3RvdHlwZXMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJUaGUgUHJvdG90eXBlcyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+VGhlIFByb3RvdHlwZXM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNWQwN2NmZjktMWNhYS00ODdkLWIxNDEtMDFlMjNlMjYzNzdiIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9UaGUrUHJvdG90eXBlcy9fL0tpbGwrVGhlK1NpbGVuY2UrKGZlYXQuK0F5YWgrTWFyYXIpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy01ZDA3Y2ZmOS0xY2FhLTQ4N2QtYjE0MS0wMWUyM2UyNjM3N2IiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtNTc0YWRhYjAtMjRkNi00YzczLThhODYtNzMyOGJmZjQzYTRiIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1RoZStQcm90b3R5cGVzL18vS2lsbCtUaGUrU2lsZW5jZSsoZmVhdC4rQXlhaCtNYXJhcikvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNTc0YWRhYjAtMjRkNi00YzczLThhODYtNzMyOGJmZjQzYTRiIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9UaGUrUHJvdG90eXBlcy9fL0tpbGwrVGhlK1NpbGVuY2UrKGZlYXQuK0F5YWgrTWFyYXIpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvVGhlK1Byb3RvdHlwZXMvXy9LaWxsK1RoZStTaWxlbmNlKyhmZWF0LitBeWFoK01hcmFyKSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvVGhlK1Byb3RvdHlwZXMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9UaGUrUHJvdG90eXBlcyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJUaHVyc2RheSAyIE1heSAyMDE5LCAzOjU4cG0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIE1heSAzOjU4cG0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iZWY4YWZhYzFiYTYzY2NjN2M2YWUzN2IzNmJiZDg3NTYiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvVmFyaW91cytBcnRpc3RzL1VuZGVyZ3JvdW5kK0ZyZXF1ZW5jaWVzOitJYml6YStFZGl0aW9uKzIwMTkiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2M2ZjU5YzFlNWU3MjQwYTRjMGQ0MjdhYmQ3MWYzZGJiIgogICAgICAgICAgICBhbHQ9IlVuZGVyZ3JvdW5kIEZyZXF1ZW5jaWVzOiBJYml6YSBFZGl0aW9uIDIwMTkiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNWFkZDk4ZTAyZTBhNzc4NjAzOWRjZjc3NGJhNjc2MTQiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI1YWRkOThlMDJlMGE3Nzg2MDM5ZGNmNzc0YmE2NzYxNCIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Jbm5hQ2lyY2xlL18vVmFsa3lyaWEiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJWYWxreXJpYSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5WYWxreXJpYTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvSW5uYUNpcmNsZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IklubmFDaXJjbGUiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPklubmFDaXJjbGU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtYTRhNmRiNzktZjVkYi00MTgwLTg3ODQtNzBiODBmZGFmMzJkIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Jbm5hQ2lyY2xlL18vVmFsa3lyaWEvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWE0YTZkYjc5LWY1ZGItNDE4MC04Nzg0LTcwYjgwZmRhZjMyZCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0zZjRlNDMxNS0xOTJhLTRjZTUtOGQwNC1jNGEwMjMxNTUwMjUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvSW5uYUNpcmNsZS9fL1ZhbGt5cmlhLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTNmNGU0MzE1LTE5MmEtNGNlNS04ZDA0LWM0YTAyMzE1NTAyNSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvSW5uYUNpcmNsZS9fL1ZhbGt5cmlhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvSW5uYUNpcmNsZS9fL1ZhbGt5cmlhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Jbm5hQ2lyY2xlIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvSW5uYUNpcmNsZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJNb25kYXkgMjkgQXByIDIwMTksIDM6NTRwbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI5IEFwciAzOjU0cG0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iYjAyZTg1ZWU4MzUzMjJhNDM4MzYwODEyMzU0ZjM2ZGEiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJTaGl2YSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSIzYzNmMzQwZjViNWQ1OTA1ZjY3YjhiODRjZDhkZTE3MiIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjNjM2YzNDBmNWI1ZDU5MDVmNjdiOGI4NGNkOGRlMTcyIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0lubmFDaXJjbGUvXy9TaGl2YSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlNoaXZhIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlNoaXZhPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Jbm5hQ2lyY2xlIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iSW5uYUNpcmNsZSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+SW5uYUNpcmNsZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1lOWFlOTBmMy1kNTg4LTQyYjQtODJiZS0yYTU2MzA3NjNkMmMiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0lubmFDaXJjbGUvXy9TaGl2YS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtZTlhZTkwZjMtZDU4OC00MmI0LTgyYmUtMmE1NjMwNzYzZDJjIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTdhZmNjNzJkLWU4ODgtNGYzYS1iZjVlLTQ0MTkwM2E0NDIxMiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Jbm5hQ2lyY2xlL18vU2hpdmEvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtN2FmY2M3MmQtZTg4OC00ZjNhLWJmNWUtNDQxOTAzYTQ0MjEyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Jbm5hQ2lyY2xlL18vU2hpdmEiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Jbm5hQ2lyY2xlL18vU2hpdmEiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0lubmFDaXJjbGUiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Jbm5hQ2lyY2xlIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9Ik1vbmRheSAyOSBBcHIgMjAxOSwgMzo1M3BtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjkgQXByIDM6NTNwbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSJjZmEzOWUzMGY1ZDIwMmI2NTU3YTA1YjQzMzA3YjUwMSIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzQxMjhhNmViMjlmOTQ5NDNjOWQyMDZjMDhlNjI1OTA0IgogICAgICAgICAgICBhbHQ9IlNlZWlwb3JhIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjRhMDNiYTFmNTUxMDYyNjlmZTAzZmFkYzdmZDJhYjY1IgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNGEwM2JhMWY1NTEwNjI2OWZlMDNmYWRjN2ZkMmFiNjUiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvSW5uYUNpcmNsZS9fL1NlZWlwb3JhIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iU2VlaXBvcmEiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+U2VlaXBvcmE8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0lubmFDaXJjbGUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJJbm5hQ2lyY2xlIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Jbm5hQ2lyY2xlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWUyOTQwZTI3LTUwNmEtNDVjZS04NWI3LTFlMWQwZmU2OGEzOSIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvSW5uYUNpcmNsZS9fL1NlZWlwb3JhLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1lMjk0MGUyNy01MDZhLTQ1Y2UtODViNy0xZTFkMGZlNjhhMzkiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtNjBiMTBlNTQtM2E0Mi00MTA3LWJmMjItNzEyNDJkODViMzk4IgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0lubmFDaXJjbGUvXy9TZWVpcG9yYS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS02MGIxMGU1NC0zYTQyLTQxMDctYmYyMi03MTI0MmQ4NWIzOTgiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0lubmFDaXJjbGUvXy9TZWVpcG9yYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0lubmFDaXJjbGUvXy9TZWVpcG9yYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvSW5uYUNpcmNsZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0lubmFDaXJjbGUiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxvdmVkIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iTW9uZGF5IDI5IEFwciAyMDE5LCAzOjUycG0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyOSBBcHIgMzo1MnBtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9IjlmNWZlYzkzOWUzMDdlMGQ2ZmU0ZmQyNDY2M2Q1N2ZiIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iUGxheWdyb3VuZCAoQXRtb3MgUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjZiM2NlZDVhNTg5N2MwOTczNzBhNjFmODdlOGY1YWUyIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNmIzY2VkNWE1ODk3YzA5NzM3MGE2MWY4N2U4ZjVhZTIiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvUGhvbnkrT3JwaGFudHMvXy9QbGF5Z3JvdW5kKyhBdG1vcytSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5Z3JvdW5kIChBdG1vcyBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+UGxheWdyb3VuZCAoQXRtb3MgUmVtaXgpPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9QaG9ueStPcnBoYW50cyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBob255IE9ycGhhbnRzIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5QaG9ueSBPcnBoYW50czwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy00YmFhYzJjMi05NjZkLTQ0YTUtYTdlMC05YTBmOWI4YWZlMTIiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1Bob255K09ycGhhbnRzL18vUGxheWdyb3VuZCsoQXRtb3MrUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy00YmFhYzJjMi05NjZkLTQ0YTUtYTdlMC05YTBmOWI4YWZlMTIiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtNDExYzU0YmEtODQ0OC00NzkyLTg0MjUtNTQ4NWY2MDFkM2ZlIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1Bob255K09ycGhhbnRzL18vUGxheWdyb3VuZCsoQXRtb3MrUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTQxMWM1NGJhLTg0NDgtNDc5Mi04NDI1LTU0ODVmNjAxZDNmZSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvUGhvbnkrT3JwaGFudHMvXy9QbGF5Z3JvdW5kKyhBdG1vcytSZW1peCkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9QaG9ueStPcnBoYW50cy9fL1BsYXlncm91bmQrKEF0bW9zK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvUGhvbnkrT3JwaGFudHMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9QaG9ueStPcnBoYW50cyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJNb25kYXkgMTUgQXByIDIwMTksIDM6NTVwbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE1IEFwciAzOjU1cG0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iMTM0MDU2ODIzNGUyOWUyNmZiZDUxZDNlNTgzZjY4OTEiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvRWQrU29sby9Tb3VuZHN5c3RlbStFbnRlcnRhaW5lcisoZmVhdC4rTUMrU3B5ZGEpKy0rU2luZ2xlIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgYWx0PSJTb3VuZHN5c3RlbSBFbnRlcnRhaW5lciAoZmVhdC4gTUMgU3B5ZGEpIC0gU2luZ2xlIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjJlOTcyYmQ2N2FhNjgxNWNmN2YwMjY0MDJkYjMzOGMyIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMmU5NzJiZDY3YWE2ODE1Y2Y3ZjAyNjQwMmRiMzM4YzIiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRWQrU29sby9fL1NvdW5kc3lzdGVtK0VudGVydGFpbmVyKyhmZWF0LitNQytTcHlkYSkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJTb3VuZHN5c3RlbSBFbnRlcnRhaW5lciAoZmVhdC4gTUMgU3B5ZGEpIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlNvdW5kc3lzdGVtIEVudGVydGFpbmVyIChmZWF0LiBNQyBTcHlkYSk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0VkK1NvbG8iCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJFZCBTb2xvIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5FZCBTb2xvPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWJhZGEwODQ5LWM3NDgtNDgyOS05NzBjLTlhNDI0NjRmOTk2NiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRWQrU29sby9fL1NvdW5kc3lzdGVtK0VudGVydGFpbmVyKyhmZWF0LitNQytTcHlkYSkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWJhZGEwODQ5LWM3NDgtNDgyOS05NzBjLTlhNDI0NjRmOTk2NiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS01OTlmN2QyYS1hMjQ1LTRmN2MtYWNkNy1iMThkZTIyNWZhZTEiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRWQrU29sby9fL1NvdW5kc3lzdGVtK0VudGVydGFpbmVyKyhmZWF0LitNQytTcHlkYSkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNTk5ZjdkMmEtYTI0NS00ZjdjLWFjZDctYjE4ZGUyMjVmYWUxIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9FZCtTb2xvL18vU291bmRzeXN0ZW0rRW50ZXJ0YWluZXIrKGZlYXQuK01DK1NweWRhKSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0VkK1NvbG8vXy9Tb3VuZHN5c3RlbStFbnRlcnRhaW5lcisoZmVhdC4rTUMrU3B5ZGEpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9FZCtTb2xvIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRWQrU29sbyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJXZWRuZXNkYXkgMjcgTWFyIDIwMTksIDM6MjlwbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI3IE1hciAzOjI5cG0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iNTNmM2MwNmExMzgzNDkwNzc5Y2QyNDQ2ZmY1NDYzOTYiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VnVNMEl0ZXVSUWsiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iVnVNMEl0ZXVSUWsiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVZ1TTBJdGV1UlFrIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iVHJhbnNjZW5kaW5nIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9Mb2dpc3RpY3MvXy9UcmFuc2NlbmRpbmciCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJMb2dpc3RpY3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvTG9naXN0aWNzIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvTG9naXN0aWNzL1BvbHlwaG9ueSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYjJhMzFiMzhmNTgwNGI4YmNiZTNmNjc4ZTJhYjE0MWUuanBnIgogICAgICAgICAgICBhbHQ9IlBvbHlwaG9ueSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJhODFiOWQxYzI5ZDc1ZDFiNzMxNTVkNGFjYzA5MDZkZCIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImE4MWI5ZDFjMjlkNzVkMWI3MzE1NWQ0YWNjMDkwNmRkIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvZ2lzdGljcy9fL1RyYW5zY2VuZGluZyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlRyYW5zY2VuZGluZyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5UcmFuc2NlbmRpbmc8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvZ2lzdGljcyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkxvZ2lzdGljcyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TG9naXN0aWNzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTRiZmJhNTkyLWQ0MzAtNDkyYi05NjhhLTUzMWM5YmEyYTUxYyIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvTG9naXN0aWNzL18vVHJhbnNjZW5kaW5nLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy00YmZiYTU5Mi1kNDMwLTQ5MmItOTY4YS01MzFjOWJhMmE1MWMiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtYTAxMDg1MDAtZjQ2ZC00NTA1LWJlMTgtMDcyYjg0NmFlY2JjIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0xvZ2lzdGljcy9fL1RyYW5zY2VuZGluZy8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1hMDEwODUwMC1mNDZkLTQ1MDUtYmUxOC0wNzJiODQ2YWVjYmMiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvZ2lzdGljcy9fL1RyYW5zY2VuZGluZyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0xvZ2lzdGljcy9fL1RyYW5zY2VuZGluZyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTG9naXN0aWNzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvTG9naXN0aWNzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9Ik1vbmRheSAxOCBNYXIgMjAxOSwgMTE6MDFhbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE4IE1hciAxMTowMWFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9ImVhN2U1NTAwMWNhMzMzODQ1MTMzMDg2ZmM2NTNlN2QyIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWZiSzRmR29LbHpvIgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9ImZiSzRmR29LbHpvIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1mYks0ZkdvS2x6byIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9Ik1hZ25ldGljIENyZWF0dXJlcyIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvVmVydGljYWwrTW9kZS9fL01hZ25ldGljK0NyZWF0dXJlcyIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IlZlcnRpY2FsIE1vZGUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvVmVydGljYWwrTW9kZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL1ZlcnRpY2FsK01vZGUvTGlmZStpbitQcm9jZXNzIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy84YjBjZmY2NDcwYjQwMzE4NDFiNjFhYWViMGY0YmFiNi5qcGciCiAgICAgICAgICAgIGFsdD0iTGlmZSBpbiBQcm9jZXNzIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjlkNTU1OGU0NWM3YzBhNjcxNTI4YmQyMjQyYmQyZjZkIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iOWQ1NTU4ZTQ1YzdjMGE2NzE1MjhiZDIyNDJiZDJmNmQiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvVmVydGljYWwrTW9kZS9fL01hZ25ldGljK0NyZWF0dXJlcyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Ik1hZ25ldGljIENyZWF0dXJlcyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5NYWduZXRpYyBDcmVhdHVyZXM8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1ZlcnRpY2FsK01vZGUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJWZXJ0aWNhbCBNb2RlIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5WZXJ0aWNhbCBNb2RlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTY4MDc4ZDA2LTkwZTAtNDYxMS1iM2Y3LTNmN2RlZGE5YzUwZCIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvVmVydGljYWwrTW9kZS9fL01hZ25ldGljK0NyZWF0dXJlcy8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtNjgwNzhkMDYtOTBlMC00NjExLWIzZjctM2Y3ZGVkYTljNTBkIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTdkN2RmNTkxLTQ0NjUtNDQyMS05OGJiLTdiYTViYjE4YWE1MSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9WZXJ0aWNhbCtNb2RlL18vTWFnbmV0aWMrQ3JlYXR1cmVzLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTdkN2RmNTkxLTQ0NjUtNDQyMS05OGJiLTdiYTViYjE4YWE1MSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvVmVydGljYWwrTW9kZS9fL01hZ25ldGljK0NyZWF0dXJlcyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1ZlcnRpY2FsK01vZGUvXy9NYWduZXRpYytDcmVhdHVyZXMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1ZlcnRpY2FsK01vZGUiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9WZXJ0aWNhbCtNb2RlIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IkZyaWRheSAxNSBNYXIgMjAxOSwgMzoxNXBtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTUgTWFyIDM6MTVwbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSI0MDllZGFkZGM1NWNlMTNiOWVhZTMxZmVjNTExNWQ0MiIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0tRFdrZjAzZzRHYyIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSItRFdrZjAzZzRHYyIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LURXa2YwM2c0R2MiCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJDcm9zc2ZhZGUgKE1hY2VvIFBsZXggTWl4KSIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvR3VzR3VzL18vQ3Jvc3NmYWRlKyhNYWNlbytQbGV4K01peCkiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJHdXNHdXMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvR3VzR3VzIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvR3VzR3VzL0Nyb3NzZmFkZStSZW1peGUiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzEzOWM0ZTk2ZjQ3MDQzYTdjMzQ1YmIwNzRlNzgzMTkyLmpwZyIKICAgICAgICAgICAgYWx0PSJDcm9zc2ZhZGUgUmVtaXhlIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImJiMDkyMmZjODczZThjZjRjYmNhYzMyNzZmYmQ5M2NiIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYmIwOTIyZmM4NzNlOGNmNGNiY2FjMzI3NmZiZDkzY2IiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR3VzR3VzL18vQ3Jvc3NmYWRlKyhNYWNlbytQbGV4K01peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJDcm9zc2ZhZGUgKE1hY2VvIFBsZXggTWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Dcm9zc2ZhZGUgKE1hY2VvIFBsZXggTWl4KTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR3VzR3VzIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iR3VzR3VzIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5HdXNHdXM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNzY0NDVjOWMtN2I2Ny00YzlmLThjNTEtOTE2ZjAxODQ5Mzc1IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9HdXNHdXMvXy9Dcm9zc2ZhZGUrKE1hY2VvK1BsZXgrTWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtNzY0NDVjOWMtN2I2Ny00YzlmLThjNTEtOTE2ZjAxODQ5Mzc1IgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLWQ0M2U0YmJiLTc3NGQtNGZlOC05ZTFiLTc3MzU2MmRiMWQ2OSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9HdXNHdXMvXy9Dcm9zc2ZhZGUrKE1hY2VvK1BsZXgrTWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1kNDNlNGJiYi03NzRkLTRmZTgtOWUxYi03NzM1NjJkYjFkNjkiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0d1c0d1cy9fL0Nyb3NzZmFkZSsoTWFjZW8rUGxleCtNaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvR3VzR3VzL18vQ3Jvc3NmYWRlKyhNYWNlbytQbGV4K01peCkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0d1c0d1cyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0d1c0d1cyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJUaHVyc2RheSAxNCBNYXIgMjAxOSwgMTA6MDlhbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE0IE1hciAxMDowOWFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9IjgwZGJlN2MyOWZjYjA1ZGZlMGVmYWUxY2I5Y2ZmMTRiIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iV2hhdCBXZSBXYW50IgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImE1YTEyYzM5ZmFjZTNjOGFjYTAyNWFkYWY2NjIzZGE5IgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYTVhMTJjMzlmYWNlM2M4YWNhMDI1YWRhZjY2MjNkYTkiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQmVubnkrVismYW1wOytEZnJudCtMdmxzL18vV2hhdCtXZStXYW50IgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iV2hhdCBXZSBXYW50IgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPldoYXQgV2UgV2FudDwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQmVubnkrVismYW1wOytEZnJudCtMdmxzIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQmVubnkgViAmYW1wOyBEZnJudCBMdmxzIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5CZW5ueSBWICZhbXA7IERmcm50IEx2bHM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNTVmN2NlNTEtNGMxZi00YzFjLWIyMWQtZjEyMmE0YjAzZjcyIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9CZW5ueStWKyZhbXA7K0Rmcm50K0x2bHMvXy9XaGF0K1dlK1dhbnQvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTU1ZjdjZTUxLTRjMWYtNGMxYy1iMjFkLWYxMjJhNGIwM2Y3MiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1hYjVlODc4Ni0wZGI4LTQ5MjktYmYwMC05M2UyNTRiNzk4OTQiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQmVubnkrVismYW1wOytEZnJudCtMdmxzL18vV2hhdCtXZStXYW50LytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWFiNWU4Nzg2LTBkYjgtNDkyOS1iZjAwLTkzZTI1NGI3OTg5NCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQmVubnkrVismYW1wOytEZnJudCtMdmxzL18vV2hhdCtXZStXYW50IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQmVubnkrVismYW1wOytEZnJudCtMdmxzL18vV2hhdCtXZStXYW50IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9CZW5ueStWKyZhbXA7K0Rmcm50K0x2bHMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9CZW5ueStWKyZhbXA7K0Rmcm50K0x2bHMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxvdmVkIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iV2VkbmVzZGF5IDEzIE1hciAyMDE5LCA5OjI2YW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMyBNYXIgOToyNmFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9ImFhY2ZjZWZiYTgzZDM2N2FkMThjNWMyMzJiNzU0ZGMyIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXdwZi1MZlFsWjhJIgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9IndwZi1MZlFsWjhJIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13cGYtTGZRbFo4SSIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9IkkgU2VlIFRoZSBFbmQiCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL0JsYWluZStTdHJhbmdlci9fL0krU2VlK1RoZStFbmQiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJCbGFpbmUgU3RyYW5nZXIiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvQmxhaW5lK1N0cmFuZ2VyIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvQmxhaW5lK1N0cmFuZ2VyL1JvY2srV2l0aCtJdCslMkYrSStTZWUrVGhlK0VuZCIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvODA0MTA3MmMxZDAzZWI0YjcxYTA0ODVkY2I1MThmMmQuanBnIgogICAgICAgICAgICBhbHQ9IlJvY2sgV2l0aCBJdCAvIEkgU2VlIFRoZSBFbmQiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZmJmMDFkZmFhZmUyMTJjOGY0YTc3ZDMxNjg3NzJmY2IiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJmYmYwMWRmYWFmZTIxMmM4ZjRhNzdkMzE2ODc3MmZjYiIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9CbGFpbmUrU3RyYW5nZXIvXy9JK1NlZStUaGUrRW5kIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iSSBTZWUgVGhlIEVuZCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5JIFNlZSBUaGUgRW5kPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9CbGFpbmUrU3RyYW5nZXIiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJCbGFpbmUgU3RyYW5nZXIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkJsYWluZSBTdHJhbmdlcjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1kMDJmZjBjMi1jYzU2LTRmYjQtOWJiYS1iM2UyODgxYTVhNTMiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0JsYWluZStTdHJhbmdlci9fL0krU2VlK1RoZStFbmQvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWQwMmZmMGMyLWNjNTYtNGZiNC05YmJhLWIzZTI4ODFhNWE1MyIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0zNDM5ODkyNi1jM2Q2LTRlNzQtODZjZS1iYzg3ZmU4MjZjNzMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQmxhaW5lK1N0cmFuZ2VyL18vSStTZWUrVGhlK0VuZC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS0zNDM5ODkyNi1jM2Q2LTRlNzQtODZjZS1iYzg3ZmU4MjZjNzMiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JsYWluZStTdHJhbmdlci9fL0krU2VlK1RoZStFbmQiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9CbGFpbmUrU3RyYW5nZXIvXy9JK1NlZStUaGUrRW5kIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9CbGFpbmUrU3RyYW5nZXIiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9CbGFpbmUrU3RyYW5nZXIiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxvdmVkIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iTW9uZGF5IDExIE1hciAyMDE5LCAyOjI0cG0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMSBNYXIgMjoyNHBtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9IjJmYWY2OGNmZDNiZWE2NTJjYzAwYjk1Y2NhNzhiMjNlIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iVHdvZm9sZC1WaWJyYXRpb25zIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjQ3ZmFhMDg3MjQ5YzE1OGZkNzA3NWU3OTZiMThkODhmIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNDdmYWEwODcyNDljMTU4ZmQ3MDc1ZTc5NmIxOGQ4OGYiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRWQrUnVzaCsmYW1wOytPcHRpY2FsL18vVHdvZm9sZC1WaWJyYXRpb25zIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iVHdvZm9sZC1WaWJyYXRpb25zIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlR3b2ZvbGQtVmlicmF0aW9uczwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRWQrUnVzaCsmYW1wOytPcHRpY2FsIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iRWQgUnVzaCAmYW1wOyBPcHRpY2FsIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5FZCBSdXNoICZhbXA7IE9wdGljYWw8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtMWU2MmJhZWMtZWYwZC00MzEwLWJhZDAtOTBlODlkMjFiYjRmIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9FZCtSdXNoKyZhbXA7K09wdGljYWwvXy9Ud29mb2xkLVZpYnJhdGlvbnMvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTFlNjJiYWVjLWVmMGQtNDMxMC1iYWQwLTkwZTg5ZDIxYmI0ZiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0xMzU1YTNjMy1kMDFhLTQ5MmUtYTQ1Yi0zNzVmYjI1ZTE4OGMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRWQrUnVzaCsmYW1wOytPcHRpY2FsL18vVHdvZm9sZC1WaWJyYXRpb25zLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTEzNTVhM2MzLWQwMWEtNDkyZS1hNDViLTM3NWZiMjVlMTg4YyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRWQrUnVzaCsmYW1wOytPcHRpY2FsL18vVHdvZm9sZC1WaWJyYXRpb25zIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRWQrUnVzaCsmYW1wOytPcHRpY2FsL18vVHdvZm9sZC1WaWJyYXRpb25zIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9FZCtSdXNoKyZhbXA7K09wdGljYWwiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9FZCtSdXNoKyZhbXA7K09wdGljYWwiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxvdmVkIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iRnJpZGF5IDggTWFyIDIwMTksIDM6MjNwbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDggTWFyIDM6MjNwbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSJlMjA5MDJmODVhODBlMGJlYmRmNTdiNTI1NzZhN2QxMyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9Ub2RhYmFyYS9CYXNpcyUyRldpc2RvbSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iQmFzaXMvV2lzZG9tIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjQ4OTI3ZTRlY2NmZWRhOGNjMjQ2YzExZTQ1Y2ZjZTZkIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNDg5MjdlNGVjY2ZlZGE4Y2MyNDZjMTFlNDVjZmNlNmQiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvVG9kYWJhcmEvXy9CYXNpcysoSGFzaXRoK1JlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkJhc2lzIChIYXNpdGggUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkJhc2lzIChIYXNpdGggUmVtaXgpPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Ub2RhYmFyYSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlRvZGFiYXJhIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Ub2RhYmFyYTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1iNTMzODA1Ni0wNDAwLTQ0OTQtYmVhZi0wYmNlZWRiMjNhYWEiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1RvZGFiYXJhL18vQmFzaXMrKEhhc2l0aCtSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWI1MzM4MDU2LTA0MDAtNDQ5NC1iZWFmLTBiY2VlZGIyM2FhYSIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS02ZjY2MGRmOS1mYzc4LTRmNDEtODg0Yy00ZjVjNDhlN2QwZjEiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvVG9kYWJhcmEvXy9CYXNpcysoSGFzaXRoK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS02ZjY2MGRmOS1mYzc4LTRmNDEtODg0Yy00ZjVjNDhlN2QwZjEiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1RvZGFiYXJhL18vQmFzaXMrKEhhc2l0aCtSZW1peCkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Ub2RhYmFyYS9fL0Jhc2lzKyhIYXNpdGgrUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Ub2RhYmFyYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1RvZGFiYXJhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IlR1ZXNkYXkgMjYgRmViIDIwMTksIDQ6MzlwbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI2IEZlYiA0OjM5cG0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iZDlkYTAzYzEyYzgxNWNiODRkZGFjMzU1OWU4ZjM0YWUiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJNYWZyYSAoQWxlYyBBcmF1am8gUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjA4ZjVhNWFkY2JiY2EwMjQ3ZDY4NzU2OTYyNTI3Mjg3IgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMDhmNWE1YWRjYmJjYTAyNDdkNjg3NTY5NjI1MjcyODciCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvbmljb2xhK3NhbGFkaW5vL18vTWFmcmErKEFsZWMrQXJhdWpvK1JlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Ik1hZnJhIChBbGVjIEFyYXVqbyBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TWFmcmEgKEFsZWMgQXJhdWpvIFJlbWl4KTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvbmljb2xhK3NhbGFkaW5vIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0ibmljb2xhIHNhbGFkaW5vIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5uaWNvbGEgc2FsYWRpbm88L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtZmI1ZjgyZjgtMjQxZi00NmRmLWE5MzItNDdmYjZjOTUzYWU0IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9uaWNvbGErc2FsYWRpbm8vXy9NYWZyYSsoQWxlYytBcmF1am8rUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1mYjVmODJmOC0yNDFmLTQ2ZGYtYTkzMi00N2ZiNmM5NTNhZTQiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtNGVjMDkzNWQtZDM1Zi00YWM3LTg4OTItZDY2YzRhYmI3OGI1IgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL25pY29sYStzYWxhZGluby9fL01hZnJhKyhBbGVjK0FyYXVqbytSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNGVjMDkzNWQtZDM1Zi00YWM3LTg4OTItZDY2YzRhYmI3OGI1IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9uaWNvbGErc2FsYWRpbm8vXy9NYWZyYSsoQWxlYytBcmF1am8rUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvbmljb2xhK3NhbGFkaW5vL18vTWFmcmErKEFsZWMrQXJhdWpvK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvbmljb2xhK3NhbGFkaW5vIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvbmljb2xhK3NhbGFkaW5vIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IlR1ZXNkYXkgMjYgRmViIDIwMTksIDExOjI3YW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNiBGZWIgMTE6MjdhbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY2hhcnRsaXN0LXJvdy0taW50ZXJsaXN0LWFkIGJ1ZmZlci1zdGFuZGFyZCIgZGF0YS1hZC1jb250YWluZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im1vYmlsZV9wb3NfMiIgZGF0YS1hZD0ibW9iaWxlX3Bvc18yIiBjbGFzcz0ibW9iaWxlX3Bvc18yIGxhc3RmbS1hZC1tb2JpbGUiIGRhdGEtYWRzLXBsYWNlbWVudD0neyYjMzQ7aWQmIzM0OzogJiMzNDttb2JpbGVfcG9zXzImIzM0OywgJiMzNDtzaXplcyYjMzQ7OiBbWzMwMCwgMjUwXV0sICYjMzQ7aXNfbW9iaWxlJiMzNDs6IHRydWUsICYjMzQ7dGFyZ2V0aW5nJiMzNDs6IHsmIzM0O3BvcyYjMzQ7OiAmIzM0OzImIzM0O30sICYjMzQ7YWRibG9ja19tZXNzYWdlJiMzNDs6IHRydWV9Jz48L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPHAgY2xhc3M9Im1wdS1zdWJzY3JpcHRpb24tdXBzZWxsIG1wdS1zdWJzY3JpcHRpb24tdXBzZWxsLS1tb2JpbGVfcG9zXzIiPgogICAgICAgICAgICAgICAgRG9uJ3Qgd2FudCB0byBzZWUgYWRzPyA8YSBocmVmPSIvc3Vic2NyaWJlIiBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlN1YnNjcmliZUNsaWNrIiBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQWRVcHNlbGxDVEEiPlN1YnNjcmliZSBub3c8L2E+CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9IjY3Y2VlZGYwMzFjNDkwNTU4OWVjYjViZmU2NDUxZDM3IgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iTWFmcmEgKE1pc3N1cyBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMzQzZTI4OTg1MDE3YmFjNDljZWRmMWI0NDIwNDRhM2EiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSIzNDNlMjg5ODUwMTdiYWM0OWNlZGYxYjQ0MjA0NGEzYSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9uaWNvbGErc2FsYWRpbm8vXy9NYWZyYSsoTWlzc3VzK1JlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Ik1hZnJhIChNaXNzdXMgUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPk1hZnJhIChNaXNzdXMgUmVtaXgpPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9uaWNvbGErc2FsYWRpbm8iCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJuaWNvbGEgc2FsYWRpbm8iCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPm5pY29sYSBzYWxhZGlubzwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1kMDdmMmFlNi1mY2FkLTQ5YjQtYjUwMy05ZjQ1NWZmZTdiNzUiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL25pY29sYStzYWxhZGluby9fL01hZnJhKyhNaXNzdXMrUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1kMDdmMmFlNi1mY2FkLTQ5YjQtYjUwMy05ZjQ1NWZmZTdiNzUiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtNDJlZjliOGItNDBhNS00MzdlLWI0YzgtOWEyYzFlZGZkNzNkIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL25pY29sYStzYWxhZGluby9fL01hZnJhKyhNaXNzdXMrUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTQyZWY5YjhiLTQwYTUtNDM3ZS1iNGM4LTlhMmMxZWRmZDczZCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvbmljb2xhK3NhbGFkaW5vL18vTWFmcmErKE1pc3N1cytSZW1peCkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9uaWNvbGErc2FsYWRpbm8vXy9NYWZyYSsoTWlzc3VzK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvbmljb2xhK3NhbGFkaW5vIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvbmljb2xhK3NhbGFkaW5vIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IlR1ZXNkYXkgMjYgRmViIDIwMTksIDExOjI2YW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNiBGZWIgMTE6MjZhbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSJjZTQ1OGJhMzc1ZjI4MmE3NTM4ZTM5NTJhMDFjYjg4YSIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0tMnFXVm5UNUpvayIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSItMnFXVm5UNUpvayIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LTJxV1ZuVDVKb2siCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJMYW5hcmthIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9TJUMzJUE5YmFzdGllbitMJUMzJUE5Z2VyL18vTGFuYXJrYSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IlPDqWJhc3RpZW4gTMOpZ2VyIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL1MlQzMlQTliYXN0aWVuK0wlQzMlQTlnZXIiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5IG9uIHlvdXR1YmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheVRyYWNrT25QYWdlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InlvdXR1YmUiCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIFBsYXkgdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9TJUMzJUE5YmFzdGllbitMJUMzJUE5Z2VyL0xhbmFya2ErJTJGK1NhYmxpZXIiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2ZmODk1MDFkYjgxZmYwNTI0ZjI4ZTYxMGVkZmFkZjBkLmpwZyIKICAgICAgICAgICAgYWx0PSJMYW5hcmthIC8gU2FibGllciIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJlMTAxNGE5ZjUxMmU2Mzc0ZWEyYTEwNWY0MDAwZGQ3MyIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImUxMDE0YTlmNTEyZTYzNzRlYTJhMTA1ZjQwMDBkZDczIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1MlQzMlQTliYXN0aWVuK0wlQzMlQTlnZXIvXy9MYW5hcmthIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTGFuYXJrYSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5MYW5hcmthPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9TJUMzJUE5YmFzdGllbitMJUMzJUE5Z2VyIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iU8OpYmFzdGllbiBMw6lnZXIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlPDqWJhc3RpZW4gTMOpZ2VyPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTU2YTY3YzMwLTFjNWMtNGZjMy1iNTEwLTZmNjJmODQ4ODg4ZiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvUyVDMyVBOWJhc3RpZW4rTCVDMyVBOWdlci9fL0xhbmFya2EvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTU2YTY3YzMwLTFjNWMtNGZjMy1iNTEwLTZmNjJmODQ4ODg4ZiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0xNzJiMzY4OS1kMTQwLTQ5NDUtYjQ3ZS1mZGI3N2RkZWQ1YzgiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvUyVDMyVBOWJhc3RpZW4rTCVDMyVBOWdlci9fL0xhbmFya2EvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtMTcyYjM2ODktZDE0MC00OTQ1LWI0N2UtZmRiNzdkZGVkNWM4IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9TJUMzJUE5YmFzdGllbitMJUMzJUE5Z2VyL18vTGFuYXJrYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1MlQzMlQTliYXN0aWVuK0wlQzMlQTlnZXIvXy9MYW5hcmthIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9TJUMzJUE5YmFzdGllbitMJUMzJUE5Z2VyIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvUyVDMyVBOWJhc3RpZW4rTCVDMyVBOWdlciIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJUdWVzZGF5IDI2IEZlYiAyMDE5LCA5OjQ4YW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNiBGZWIgOTo0OGFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9IjJlOGM5MjY0NGYxZDhmYjRjNjhjMzEwOWI2NTFjOTk3IgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iQWNpZCBEcmFtYSAoQW5hbG9nIEp1bmdzIFJlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJkMTJlMTlhZmRlODNiNDkyNzhhNWMyODI5NmRiNDM1YyIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImQxMmUxOWFmZGU4M2I0OTI3OGE1YzI4Mjk2ZGI0MzVjIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JsYWt0b25lKyZhbXA7K0Zyb21QZXRlcnNidXJnL18vQWNpZCtEcmFtYSsoQW5hbG9nK0p1bmdzK1JlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkFjaWQgRHJhbWEgKEFuYWxvZyBKdW5ncyBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+QWNpZCBEcmFtYSAoQW5hbG9nIEp1bmdzIFJlbWl4KTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQmxha3RvbmUrJmFtcDsrRnJvbVBldGVyc2J1cmciCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJCbGFrdG9uZSAmYW1wOyBGcm9tUGV0ZXJzYnVyZyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Qmxha3RvbmUgJmFtcDsgRnJvbVBldGVyc2J1cmc8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNGI5Y2FiMGQtMWVhZC00MmZlLWIzNzgtMzhlYmZkZjhkYmRkIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9CbGFrdG9uZSsmYW1wOytGcm9tUGV0ZXJzYnVyZy9fL0FjaWQrRHJhbWErKEFuYWxvZytKdW5ncytSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTRiOWNhYjBkLTFlYWQtNDJmZS1iMzc4LTM4ZWJmZGY4ZGJkZCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS05Y2M2OGNhNS02NWQ0LTRiOTctYjRlOS01ODY1ZmU3YWU0ZDQiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQmxha3RvbmUrJmFtcDsrRnJvbVBldGVyc2J1cmcvXy9BY2lkK0RyYW1hKyhBbmFsb2crSnVuZ3MrUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTljYzY4Y2E1LTY1ZDQtNGI5Ny1iNGU5LTU4NjVmZTdhZTRkNCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQmxha3RvbmUrJmFtcDsrRnJvbVBldGVyc2J1cmcvXy9BY2lkK0RyYW1hKyhBbmFsb2crSnVuZ3MrUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQmxha3RvbmUrJmFtcDsrRnJvbVBldGVyc2J1cmcvXy9BY2lkK0RyYW1hKyhBbmFsb2crSnVuZ3MrUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9CbGFrdG9uZSsmYW1wOytGcm9tUGV0ZXJzYnVyZyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JsYWt0b25lKyZhbXA7K0Zyb21QZXRlcnNidXJnIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IlN1bmRheSAxNyBGZWIgMjAxOSwgMToxMnBtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTcgRmViIDE6MTJwbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSI4OGFmN2VmMDU0ZTQ5YTlmMDcwODZiMjgzZTFiYjkzNSIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1OUEEwQTVyUVRnWSIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJOUEEwQTVyUVRnWSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TlBBMEE1clFUZ1kiCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJHbG93IgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9DaXJleitEL18vR2xvdyIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IkNpcmV6IEQiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvQ2lyZXorRCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0RhdmlkK0d1ZXR0YS9GKioqK21lLCtJJTI3bStmYW1vdXMrSWJpemErTWl4KzIwMTAiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2UxNGYxNDg4NWIwMDQzMDA4YWNhMmE4MDZmMzNlNTQyLmpwZyIKICAgICAgICAgICAgYWx0PSJGKioqIG1lLCBJJiMzOTttIGZhbW91cyBJYml6YSBNaXggMjAxMCIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJjNGIwZGIyYzMyYTAwZDVlOWM1MWFiY2Q1MDBkYjJlNyIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImM0YjBkYjJjMzJhMDBkNWU5YzUxYWJjZDUwMGRiMmU3IgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0NpcmV6K0QvXy9HbG93IgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iR2xvdyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5HbG93PC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9DaXJleitEIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQ2lyZXogRCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Q2lyZXogRDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy0wNmY3YWE1Ny0yMTQxLTQ4NWItOTcwMS1iZTY2MzRhMDJiNzgiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0NpcmV6K0QvXy9HbG93LytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy0wNmY3YWE1Ny0yMTQxLTQ4NWItOTcwMS1iZTY2MzRhMDJiNzgiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtMWNkZjVmYjEtNmRhYS00OWQwLWExZDYtMWM3Y2Y3YTEyODYyIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0NpcmV6K0QvXy9HbG93LytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTFjZGY1ZmIxLTZkYWEtNDlkMC1hMWQ2LTFjN2NmN2ExMjg2MiIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ2lyZXorRC9fL0dsb3ciCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9DaXJleitEL18vR2xvdyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ2lyZXorRCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0NpcmV6K0QiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxvdmVkIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iU3VuZGF5IDE3IEZlYiAyMDE5LCAxMTo0OGFtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTcgRmViIDExOjQ4YW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iZjBjNjQxODcwNGI4YmI5M2IxNTA3OGUxZjIzY2Y4MjciCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvRGFuaWVsK0dsb3Zlci9CYXR0bGUrMyIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iQmF0dGxlIDMiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMmUwNDNjYmMxNjVkMGE2ODA1OTNlY2ZjYTRlYTZmZmYiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSIyZTA0M2NiYzE2NWQwYTY4MDU5M2VjZmNhNGVhNmZmZiIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EYW5pZWwrR2xvdmVyL18vRXBoZW1lcmFsK0hhemUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJFcGhlbWVyYWwgSGF6ZSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5FcGhlbWVyYWwgSGF6ZTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRGFuaWVsK0dsb3ZlciIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkRhbmllbCBHbG92ZXIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkRhbmllbCBHbG92ZXI8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtMjNiOGRjNGUtODIwZS00OTczLTlmOTYtYzdjMTZlZjdkY2U4IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9EYW5pZWwrR2xvdmVyL18vRXBoZW1lcmFsK0hhemUvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTIzYjhkYzRlLTgyMGUtNDk3My05Zjk2LWM3YzE2ZWY3ZGNlOCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS04NDhiYTU2NS1lNGE2LTQ4ODgtYmYxNi1jYTQ2ZDFkY2Q2MTciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRGFuaWVsK0dsb3Zlci9fL0VwaGVtZXJhbCtIYXplLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTg0OGJhNTY1LWU0YTYtNDg4OC1iZjE2LWNhNDZkMWRjZDYxNyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRGFuaWVsK0dsb3Zlci9fL0VwaGVtZXJhbCtIYXplIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRGFuaWVsK0dsb3Zlci9fL0VwaGVtZXJhbCtIYXplIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EYW5pZWwrR2xvdmVyIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRGFuaWVsK0dsb3ZlciIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJTdW5kYXkgMTcgRmViIDIwMTksIDExOjQyYW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNyBGZWIgMTE6NDJhbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSJjOTFiZTRkNDg1ZWY4OGMzZjI2M2ZmNDlhODY4NDBjNyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9EYW5pZWwrR2xvdmVyL0JhdHRsZSszIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgYWx0PSJCYXR0bGUgMyIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI3ZmU4YWJhNTkwODEzNDUyNmE1ZDM4ZGM0YTZhYWI1MyIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjdmZThhYmE1OTA4MTM0NTI2YTVkMzhkYzRhNmFhYjUzIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1ZpdGFseStTaHR1cm0vXy9Nb2FuIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTW9hbiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Nb2FuPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9WaXRhbHkrU2h0dXJtIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iVml0YWx5IFNodHVybSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Vml0YWx5IFNodHVybTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy0zYTM0ODE0MS04M2I0LTRjNjYtYjY2Mi0xNThhZjUxNDQ3MmIiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1ZpdGFseStTaHR1cm0vXy9Nb2FuLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy0zYTM0ODE0MS04M2I0LTRjNjYtYjY2Mi0xNThhZjUxNDQ3MmIiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtMTM2YjFkODQtYjEzYS00MzllLWExMjItNDQ3ZWNhNDI2Y2NhIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1ZpdGFseStTaHR1cm0vXy9Nb2FuLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTEzNmIxZDg0LWIxM2EtNDM5ZS1hMTIyLTQ0N2VjYTQyNmNjYSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvVml0YWx5K1NodHVybS9fL01vYW4iCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9WaXRhbHkrU2h0dXJtL18vTW9hbiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvVml0YWx5K1NodHVybSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1ZpdGFseStTaHR1cm0iCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxvdmVkIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iU3VuZGF5IDE3IEZlYiAyMDE5LCAxMTo0MmFtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTcgRmViIDExOjQyYW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iZjkzMzZkNjM3MjNlOGY0NTMzNTU0ZmU5MzE0YzliZTAiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJHYWxlc3RpYW4gLSBUZWxsIE1lIChFemVxdWllbCBBcmlhcyBTcGFjZSBNaXgpIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImMzOTA1MDRlYTkxZTNlOWM1MjRjNzM1MmMyNTcwZDIzIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYzM5MDUwNGVhOTFlM2U5YzUyNGM3MzUyYzI1NzBkMjMiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR2FsZXN0aWFuL18vR2FsZXN0aWFuKy0rVGVsbCtNZSsoRXplcXVpZWwrQXJpYXMrU3BhY2UrTWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkdhbGVzdGlhbiAtIFRlbGwgTWUgKEV6ZXF1aWVsIEFyaWFzIFNwYWNlIE1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+R2FsZXN0aWFuIC0gVGVsbCBNZSAoRXplcXVpZWwgQXJpYXMgU3BhY2UgTWl4KTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR2FsZXN0aWFuIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iR2FsZXN0aWFuIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5HYWxlc3RpYW48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtN2Y5MDY1NmYtYTMwZS00YzZlLWFjN2QtZWY1Zjg1MWMxMDRhIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9HYWxlc3RpYW4vXy9HYWxlc3RpYW4rLStUZWxsK01lKyhFemVxdWllbCtBcmlhcytTcGFjZStNaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy03ZjkwNjU2Zi1hMzBlLTRjNmUtYWM3ZC1lZjVmODUxYzEwNGEiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtYWNhNjFhNWEtMTk2Mi00ZjdiLWExNTUtYjM3YmUyNGIwOGMxIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0dhbGVzdGlhbi9fL0dhbGVzdGlhbistK1RlbGwrTWUrKEV6ZXF1aWVsK0FyaWFzK1NwYWNlK01peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtYWNhNjFhNWEtMTk2Mi00ZjdiLWExNTUtYjM3YmUyNGIwOGMxIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9HYWxlc3RpYW4vXy9HYWxlc3RpYW4rLStUZWxsK01lKyhFemVxdWllbCtBcmlhcytTcGFjZStNaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvR2FsZXN0aWFuL18vR2FsZXN0aWFuKy0rVGVsbCtNZSsoRXplcXVpZWwrQXJpYXMrU3BhY2UrTWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR2FsZXN0aWFuIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvR2FsZXN0aWFuIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IlRodXJzZGF5IDE0IEZlYiAyMDE5LCAyOjU4cG0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNCBGZWIgMjo1OHBtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9ImI5NGE4M2M5NDgyNDk5MGFkN2RmYjBiMGQwZmU0OTAwIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXA1aWtreWEyVVBnIgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9InA1aWtreWEyVVBnIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1wNWlra3lhMlVQZyIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9Ik1hZ2dpZSYjMzk7cyBGYXJtIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9SYWdlK0FnYWluc3QrdGhlK01hY2hpbmUvXy9NYWdnaWUlMjdzK0Zhcm0iCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJSYWdlIEFnYWluc3QgdGhlIE1hY2hpbmUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvUmFnZStBZ2FpbnN0K3RoZStNYWNoaW5lIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvUmFnZStBZ2FpbnN0K3RoZStNYWNoaW5lL1JlbmVnYWRlcyIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYTJlYWNhMGNkNjY4NDk0MWM5N2I4ZTljMzU0YTI4NDAuanBnIgogICAgICAgICAgICBhbHQ9IlJlbmVnYWRlcyIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI1OTk1MDFlZjVmZTFjMmYzZGQ3YzBiNWVhODY3NmUxZiIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjU5OTUwMWVmNWZlMWMyZjNkZDdjMGI1ZWE4Njc2ZTFmIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1JhZ2UrQWdhaW5zdCt0aGUrTWFjaGluZS9fL01hZ2dpZSUyN3MrRmFybSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Ik1hZ2dpZSYjMzk7cyBGYXJtIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPk1hZ2dpZSYjMzk7cyBGYXJtPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9SYWdlK0FnYWluc3QrdGhlK01hY2hpbmUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJSYWdlIEFnYWluc3QgdGhlIE1hY2hpbmUiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlJhZ2UgQWdhaW5zdCB0aGUgTWFjaGluZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy01MGVhMTMwMi01MThiLTQ1YTgtOTBiMC1lZmEzMWNkZGQ3NjMiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1JhZ2UrQWdhaW5zdCt0aGUrTWFjaGluZS9fL01hZ2dpZSUyN3MrRmFybS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtNTBlYTEzMDItNTE4Yi00NWE4LTkwYjAtZWZhMzFjZGRkNzYzIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLWQ3Nzk1ZjE0LTcwOTMtNDlkNi1iNjkzLWYzNThkMTY2OGVjYyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9SYWdlK0FnYWluc3QrdGhlK01hY2hpbmUvXy9NYWdnaWUlMjdzK0Zhcm0vK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtZDc3OTVmMTQtNzA5My00OWQ2LWI2OTMtZjM1OGQxNjY4ZWNjIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9SYWdlK0FnYWluc3QrdGhlK01hY2hpbmUvXy9NYWdnaWUlMjdzK0Zhcm0iCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9SYWdlK0FnYWluc3QrdGhlK01hY2hpbmUvXy9NYWdnaWUlMjdzK0Zhcm0iCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1JhZ2UrQWdhaW5zdCt0aGUrTWFjaGluZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1JhZ2UrQWdhaW5zdCt0aGUrTWFjaGluZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJXZWRuZXNkYXkgNiBGZWIgMjAxOSwgMToyMHBtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNiBGZWIgMToyMHBtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9ImUxYWNmODgyYzJkNmFjYjBlNTQyNGFhYzVmZmQwNjJkIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWEzWkpqcGFqb3RNIgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9ImEzWkpqcGFqb3RNIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1hM1pKanBham90TSIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9IlB1cnBsZSBOb2lzZSIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1B1cnBsZStOb2lzZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IkJvcmlzIEJyZWpjaGEiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvRmV1ZXJmYWx0ZXIrU3BlY2lhbCtFZGl0aW9uIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy81N2Q2OWQwZTE1MDU0YzQ1Y2NjNjA1Yjg0ZmRmYzhlMi5qcGciCiAgICAgICAgICAgIGFsdD0iRmV1ZXJmYWx0ZXIgU3BlY2lhbCBFZGl0aW9uIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImE5OTcxNjE5NmI2ZDIwZjdjNmI4ZjFmMTUxMTQ5M2UwIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYTk5NzE2MTk2YjZkMjBmN2M2YjhmMWYxNTExNDkzZTAiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1B1cnBsZStOb2lzZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlB1cnBsZSBOb2lzZSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5QdXJwbGUgTm9pc2U8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJCb3JpcyBCcmVqY2hhIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Cb3JpcyBCcmVqY2hhPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWVlOTY2MmYxLWM4NmQtNGEzNy1iYTdiLTMyOGZmZDBiYTM3ZSIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1B1cnBsZStOb2lzZS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtZWU5NjYyZjEtYzg2ZC00YTM3LWJhN2ItMzI4ZmZkMGJhMzdlIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTk0OTk3M2NjLTI5YTAtNGFiYi05MDY4LWUzZWQ4NTlkMmQ3MyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vUHVycGxlK05vaXNlLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTk0OTk3M2NjLTI5YTAtNGFiYi05MDY4LWUzZWQ4NTlkMmQ3MyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1B1cnBsZStOb2lzZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JvcmlzK0JyZWpjaGEvXy9QdXJwbGUrTm9pc2UiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IkZyaWRheSAxIEZlYiAyMDE5LCAxMDo1N2FtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBGZWIgMTA6NTdhbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSI5YjM3N2I5OGE3MTRhNDVlNzhkMTk5NzQwYjYyNmY1MCIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj10RWVLWlhiS0REVSIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJ0RWVLWlhiS0REVSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dEVlS1pYYktERFUiCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJTdHJ1bSAoQ2lkIEluYy4gUmVtaXgpIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9EcmFzby9fL1N0cnVtKyhDaWQrSW5jLitSZW1peCkiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJEcmFzbyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy9EcmFzbyIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0RyYXNvL1N0cnVtIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgYWx0PSJTdHJ1bSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJhZmQzNTMwMmM2OTIxMzI1OGUxMzlhYTRhYTZhNjczMyIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImFmZDM1MzAyYzY5MjEzMjU4ZTEzOWFhNGFhNmE2NzMzIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RyYXNvL18vU3RydW0rKENpZCtJbmMuK1JlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlN0cnVtIChDaWQgSW5jLiBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+U3RydW0gKENpZCBJbmMuIFJlbWl4KTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRHJhc28iCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJEcmFzbyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+RHJhc288L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNGVmZjI5MmEtNTRiMy00MDNkLWFkOWUtZWUyNTAyY2Y2ODZlIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9EcmFzby9fL1N0cnVtKyhDaWQrSW5jLitSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTRlZmYyOTJhLTU0YjMtNDAzZC1hZDllLWVlMjUwMmNmNjg2ZSIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1kZjYwMzMyNi02YTZmLTRjMDctODFkZi0yYTE4ZDRjZTgyYmYiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRHJhc28vXy9TdHJ1bSsoQ2lkK0luYy4rUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWRmNjAzMzI2LTZhNmYtNGMwNy04MWRmLTJhMThkNGNlODJiZiIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRHJhc28vXy9TdHJ1bSsoQ2lkK0luYy4rUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRHJhc28vXy9TdHJ1bSsoQ2lkK0luYy4rUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EcmFzbyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0RyYXNvIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IkZyaWRheSAxIEZlYiAyMDE5LCA5OjE0YW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxIEZlYiA5OjE0YW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iMTExZWI5YTdiYmU3MTRlODNkMTc4MmQ5ZGVkM2MxZmMiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VEUzTmt6MmJzdTgiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iVEUzTmt6MmJzdTgiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVRFM05rejJic3U4IgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iVHJlbW9sbyBNYW4iCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL0d1eStNYW50enVyL18vVHJlbW9sbytNYW4iCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJHdXkgTWFudHp1ciIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy9HdXkrTWFudHp1ciIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL1ZhcmlvdXMrQXJ0aXN0cy9SZWZsZWN0aW9ucysyMDE4IiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy8xMjg5YWE5OGJjZWY2MWU3MzE5ZmYzMGMyYjU3ODBiMC5qcGciCiAgICAgICAgICAgIGFsdD0iUmVmbGVjdGlvbnMgMjAxOCIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJhNTExOWQzMWU1NmVhNzQ4M2VhNmJmZjNmOTJmNTg5MSIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImE1MTE5ZDMxZTU2ZWE3NDgzZWE2YmZmM2Y5MmY1ODkxIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0d1eStNYW50enVyL18vVHJlbW9sbytNYW4iCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJUcmVtb2xvIE1hbiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5UcmVtb2xvIE1hbjwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR3V5K01hbnR6dXIiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJHdXkgTWFudHp1ciIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+R3V5IE1hbnR6dXI8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNzhiMTIxNjQtMGQxNi00NmJkLWE3ODgtM2RmZjBhODE4YjMyIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9HdXkrTWFudHp1ci9fL1RyZW1vbG8rTWFuLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy03OGIxMjE2NC0wZDE2LTQ2YmQtYTc4OC0zZGZmMGE4MThiMzIiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtOGYwOTRkNzQtYjYzYy00ODQwLThlOWUtMzNmMzBhYmQ4MDEwIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0d1eStNYW50enVyL18vVHJlbW9sbytNYW4vK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtOGYwOTRkNzQtYjYzYy00ODQwLThlOWUtMzNmMzBhYmQ4MDEwIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9HdXkrTWFudHp1ci9fL1RyZW1vbG8rTWFuIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvR3V5K01hbnR6dXIvXy9UcmVtb2xvK01hbiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR3V5K01hbnR6dXIiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9HdXkrTWFudHp1ciIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJGcmlkYXkgMSBGZWIgMjAxOSwgOToxNGFtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBGZWIgOToxNGFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9IjVlYzE5MmZiMTAzNjI2MTg0NGU2NWVjZDgxYTFhYWZhIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0FuYWxvZytKdW5ncy9QaG9lbml4IiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MDc4ZTYwYzMyZjA2ZTMxMjUyNzRiNGRkZGZhZjQ5Mi5qcGciCiAgICAgICAgICAgIGFsdD0iUGhvZW5peCIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJiOWM2NDliY2Q3N2UzNThhZTFhYTA0NWE4NTBhZmNmMiIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImI5YzY0OWJjZDc3ZTM1OGFlMWFhMDQ1YTg1MGFmY2YyIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0FuYWxvZytKdW5ncy9fL01pcmZhaysoRXdhbitSaWxsK1JlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Ik1pcmZhayAoRXdhbiBSaWxsIFJlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5NaXJmYWsgKEV3YW4gUmlsbCBSZW1peCk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0FuYWxvZytKdW5ncyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkFuYWxvZyBKdW5ncyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+QW5hbG9nIEp1bmdzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWIxNTMxOTY5LTgwMGItNGQ0My04YjFkLWNjZDE0OGFhNjlkYiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQW5hbG9nK0p1bmdzL18vTWlyZmFrKyhFd2FuK1JpbGwrUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1iMTUzMTk2OS04MDBiLTRkNDMtOGIxZC1jY2QxNDhhYTY5ZGIiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtYmFmYTJmMDEtYWUyOS00NmQ0LWJjYzctMDJkN2UzMjNlZDhhIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0FuYWxvZytKdW5ncy9fL01pcmZhaysoRXdhbitSaWxsK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1iYWZhMmYwMS1hZTI5LTQ2ZDQtYmNjNy0wMmQ3ZTMyM2VkOGEiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0FuYWxvZytKdW5ncy9fL01pcmZhaysoRXdhbitSaWxsK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0FuYWxvZytKdW5ncy9fL01pcmZhaysoRXdhbitSaWxsK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQW5hbG9nK0p1bmdzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQW5hbG9nK0p1bmdzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IkZyaWRheSAxIEZlYiAyMDE5LCA5OjAxYW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxIEZlYiA5OjAxYW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iNjg4NWYxNDc5YTYwYjNlNGU3ODU2NzQ0NzhjOTAwMWEiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvQW5hbG9nK0p1bmdzL1Bob2VuaXgiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzQwNzhlNjBjMzJmMDZlMzEyNTI3NGI0ZGRkZmFmNDkyLmpwZyIKICAgICAgICAgICAgYWx0PSJQaG9lbml4IgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImU2YjQ5ZjkxZmY3ZDliNDU2OTkwMDhkN2FlN2QxNTZjIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZTZiNDlmOTFmZjdkOWI0NTY5OTAwOGQ3YWU3ZDE1NmMiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQW5hbG9nK0p1bmdzL18vUGhvZW5peCsoU3ViYW5kcmlvK1JlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBob2VuaXggKFN1YmFuZHJpbyBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+UGhvZW5peCAoU3ViYW5kcmlvIFJlbWl4KTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQW5hbG9nK0p1bmdzIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQW5hbG9nIEp1bmdzIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5BbmFsb2cgSnVuZ3M8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtMmNhOTI0YjctYTc3Ni00NmU3LWJjNzEtYTM5ZTg2MDlkZGZmIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9BbmFsb2crSnVuZ3MvXy9QaG9lbml4KyhTdWJhbmRyaW8rUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy0yY2E5MjRiNy1hNzc2LTQ2ZTctYmM3MS1hMzllODYwOWRkZmYiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtOTE0MmU5YjItMDZlZC00NGY1LTkyOWYtNzk5MzAyYjZkMjZiIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0FuYWxvZytKdW5ncy9fL1Bob2VuaXgrKFN1YmFuZHJpbytSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtOTE0MmU5YjItMDZlZC00NGY1LTkyOWYtNzk5MzAyYjZkMjZiIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9BbmFsb2crSnVuZ3MvXy9QaG9lbml4KyhTdWJhbmRyaW8rUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQW5hbG9nK0p1bmdzL18vUGhvZW5peCsoU3ViYW5kcmlvK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQW5hbG9nK0p1bmdzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQW5hbG9nK0p1bmdzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IkZyaWRheSAxIEZlYiAyMDE5LCA5OjAxYW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxIEZlYiA5OjAxYW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iMWFiZTgwMTE3OGE1NTNjNzA0ZjFhZWM4MzgyYzczYTkiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9V1dYeUFlekFCZkEiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iV1dYeUFlekFCZkEiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVdXWHlBZXpBQmZBIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iTWFzc2l2ZSBDdWx0dXJlIChKdWxpYW4gTmF0ZXMgUmVtaXgpIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9QZWRybytDYXBlbG9zc2kvXy9NYXNzaXZlK0N1bHR1cmUrKEp1bGlhbitOYXRlcytSZW1peCkiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJQZWRybyBDYXBlbG9zc2kiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvUGVkcm8rQ2FwZWxvc3NpIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJNYXNzaXZlIEN1bHR1cmUgKEp1bGlhbiBOYXRlcyBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZGUyNzI3NDExMjg3ODUwOTIyYmJiOTQ5MjY2YmU4MDAiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJkZTI3Mjc0MTEyODc4NTA5MjJiYmI5NDkyNjZiZTgwMCIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9QZWRybytDYXBlbG9zc2kvXy9NYXNzaXZlK0N1bHR1cmUrKEp1bGlhbitOYXRlcytSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJNYXNzaXZlIEN1bHR1cmUgKEp1bGlhbiBOYXRlcyBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TWFzc2l2ZSBDdWx0dXJlIChKdWxpYW4gTmF0ZXMgUmVtaXgpPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9QZWRybytDYXBlbG9zc2kiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQZWRybyBDYXBlbG9zc2kiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlBlZHJvIENhcGVsb3NzaTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy0zZDQ4Yjk5Ni00ZDExLTQ4OTMtOTRiMS0zMzk5N2U4NzNkN2YiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1BlZHJvK0NhcGVsb3NzaS9fL01hc3NpdmUrQ3VsdHVyZSsoSnVsaWFuK05hdGVzK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtM2Q0OGI5OTYtNGQxMS00ODkzLTk0YjEtMzM5OTdlODczZDdmIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTIxOTQ4ZjkwLTk4YTctNDQzZC1iNGQ0LWRhNDg0N2I0Yjc3MyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9QZWRybytDYXBlbG9zc2kvXy9NYXNzaXZlK0N1bHR1cmUrKEp1bGlhbitOYXRlcytSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtMjE5NDhmOTAtOThhNy00NDNkLWI0ZDQtZGE0ODQ3YjRiNzczIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9QZWRybytDYXBlbG9zc2kvXy9NYXNzaXZlK0N1bHR1cmUrKEp1bGlhbitOYXRlcytSZW1peCkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9QZWRybytDYXBlbG9zc2kvXy9NYXNzaXZlK0N1bHR1cmUrKEp1bGlhbitOYXRlcytSZW1peCkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1BlZHJvK0NhcGVsb3NzaSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1BlZHJvK0NhcGVsb3NzaSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJUdWVzZGF5IDI5IEphbiAyMDE5LCAxOjM2cG0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyOSBKYW4gMTozNnBtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9Ijg0YzY5YzFjM2IwZDg2MTU4Y2M4ODFkNDgwZjk1ZjJmIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iRmxvcmlkYSAoSnVhbiBEZW1pbmljaXMgUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjQzNmEwNWRhY2NlZTQ2YmQ4OWY2ZTZiZmJiZDEwMDE1IgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNDM2YTA1ZGFjY2VlNDZiZDg5ZjZlNmJmYmJkMTAwMTUiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRGllZ28rQmVycm9uZG8vXy9GbG9yaWRhKyhKdWFuK0RlbWluaWNpcytSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJGbG9yaWRhIChKdWFuIERlbWluaWNpcyBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+RmxvcmlkYSAoSnVhbiBEZW1pbmljaXMgUmVtaXgpPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EaWVnbytCZXJyb25kbyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkRpZWdvIEJlcnJvbmRvIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5EaWVnbyBCZXJyb25kbzwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy00MTI2YTI0Yy01MjhjLTQ1YjItOWM4OS02NzNhMDY5NzNhODAiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0RpZWdvK0JlcnJvbmRvL18vRmxvcmlkYSsoSnVhbitEZW1pbmljaXMrUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy00MTI2YTI0Yy01MjhjLTQ1YjItOWM4OS02NzNhMDY5NzNhODAiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtMjA1YjgyZjUtOGNjYS00NmRhLTgxYzctYjIxNzdjMGZjNzEwIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0RpZWdvK0JlcnJvbmRvL18vRmxvcmlkYSsoSnVhbitEZW1pbmljaXMrUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTIwNWI4MmY1LThjY2EtNDZkYS04MWM3LWIyMTc3YzBmYzcxMCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRGllZ28rQmVycm9uZG8vXy9GbG9yaWRhKyhKdWFuK0RlbWluaWNpcytSZW1peCkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9EaWVnbytCZXJyb25kby9fL0Zsb3JpZGErKEp1YW4rRGVtaW5pY2lzK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRGllZ28rQmVycm9uZG8iCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9EaWVnbytCZXJyb25kbyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJUdWVzZGF5IDI5IEphbiAyMDE5LCA5OjMwYW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyOSBKYW4gOTozMGFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9ImEwN2I1MjVhNWQ2NmRjMGZlZWZlZjExZjFiMzY3OWFjIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWtTNmpWUkVjLU44IgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9ImtTNmpWUkVjLU44IgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1rUzZqVlJFYy1OOCIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9IlNub3cgTWVsdHMgSW4gWW91ciBIYW5kcyAoUmljayBQaWVyIE8mIzM5O05laWwgUmVtaXgpIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9QbGF0dW5vZmYvXy9Tbm93K01lbHRzK0luK1lvdXIrSGFuZHMrKFJpY2srUGllcitPJTI3TmVpbCtSZW1peCkiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJQbGF0dW5vZmYiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvUGxhdHVub2ZmIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvUGxhdHVub2ZmL1Nub3crTWVsdHMrSW4rWW91citIYW5kcyIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iU25vdyBNZWx0cyBJbiBZb3VyIEhhbmRzIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjJhMTc0M2FiZDcxMjNmNTM5MjQyYmVlMzdmOTdiMmRmIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMmExNzQzYWJkNzEyM2Y1MzkyNDJiZWUzN2Y5N2IyZGYiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvUGxhdHVub2ZmL18vU25vdytNZWx0cytJbitZb3VyK0hhbmRzKyhSaWNrK1BpZXIrTyUyN05laWwrUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iU25vdyBNZWx0cyBJbiBZb3VyIEhhbmRzIChSaWNrIFBpZXIgTyYjMzk7TmVpbCBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+U25vdyBNZWx0cyBJbiBZb3VyIEhhbmRzIChSaWNrIFBpZXIgTyYjMzk7TmVpbCBSZW1peCk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1BsYXR1bm9mZiIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXR1bm9mZiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+UGxhdHVub2ZmPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWQ2ZDQzY2Q3LTVjM2QtNGFhNi05MGVjLTE2MGYxNjRlYWIxZCIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvUGxhdHVub2ZmL18vU25vdytNZWx0cytJbitZb3VyK0hhbmRzKyhSaWNrK1BpZXIrTyUyN05laWwrUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1kNmQ0M2NkNy01YzNkLTRhYTYtOTBlYy0xNjBmMTY0ZWFiMWQiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtZTQ1Y2NhOTYtY2UwYS00NTA1LWE2MTgtYzI0YTk3NmVhNmYzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1BsYXR1bm9mZi9fL1Nub3crTWVsdHMrSW4rWW91citIYW5kcysoUmljaytQaWVyK08lMjdOZWlsK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1lNDVjY2E5Ni1jZTBhLTQ1MDUtYTYxOC1jMjRhOTc2ZWE2ZjMiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1BsYXR1bm9mZi9fL1Nub3crTWVsdHMrSW4rWW91citIYW5kcysoUmljaytQaWVyK08lMjdOZWlsK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1BsYXR1bm9mZi9fL1Nub3crTWVsdHMrSW4rWW91citIYW5kcysoUmljaytQaWVyK08lMjdOZWlsK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvUGxhdHVub2ZmIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvUGxhdHVub2ZmIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IldlZG5lc2RheSAyMyBKYW4gMjAxOSwgMzozOXBtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjMgSmFuIDM6MzlwbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSI5NGM3NWEwM2M2YWJmMmM5OGMyNGMyYzdkYTc4ZGZmOSIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1mTXlfOFFpdmcwOCIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJmTXlfOFFpdmcwOCIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Zk15XzhRaXZnMDgiCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJEdWFsIFByb2Nlc3NlZCIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvQ2FseXgrJmFtcDsrVGVlQmVlL18vRHVhbCtQcm9jZXNzZWQiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJDYWx5eCAmYW1wOyBUZWVCZWUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvQ2FseXgrJmFtcDsrVGVlQmVlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvQ2FseXgrJmFtcDsrVGVlQmVlL0FuYXRvbXkrTFAiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzkxZDFjODgyM2UxNzQ4ZGU5OGZjZjkyN2IzMjIwNGYxLmpwZyIKICAgICAgICAgICAgYWx0PSJBbmF0b215IExQIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjE5MzliMjg1N2UxZmYxNTA3NmE2MWNjMDRkNTUyZmIzIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMTkzOWIyODU3ZTFmZjE1MDc2YTYxY2MwNGQ1NTJmYjMiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ2FseXgrJmFtcDsrVGVlQmVlL18vRHVhbCtQcm9jZXNzZWQiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJEdWFsIFByb2Nlc3NlZCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5EdWFsIFByb2Nlc3NlZDwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ2FseXgrJmFtcDsrVGVlQmVlIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQ2FseXggJmFtcDsgVGVlQmVlIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5DYWx5eCAmYW1wOyBUZWVCZWU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtYmM3YjcyYTQtNGNiMi00ZTQ0LTkxZGItZTIwZTZmNDlkOTMzIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9DYWx5eCsmYW1wOytUZWVCZWUvXy9EdWFsK1Byb2Nlc3NlZC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtYmM3YjcyYTQtNGNiMi00ZTQ0LTkxZGItZTIwZTZmNDlkOTMzIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLThlMjkzMmJjLTI5NWUtNDU3OC04OGQzLTRlOWUzZTEyYTVkOCIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9DYWx5eCsmYW1wOytUZWVCZWUvXy9EdWFsK1Byb2Nlc3NlZC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS04ZTI5MzJiYy0yOTVlLTQ1NzgtODhkMy00ZTllM2UxMmE1ZDgiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0NhbHl4KyZhbXA7K1RlZUJlZS9fL0R1YWwrUHJvY2Vzc2VkIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ2FseXgrJmFtcDsrVGVlQmVlL18vRHVhbCtQcm9jZXNzZWQiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0NhbHl4KyZhbXA7K1RlZUJlZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0NhbHl4KyZhbXA7K1RlZUJlZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJXZWRuZXNkYXkgMiBKYW4gMjAxOSwgMTA6MDBhbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgSmFuIDEwOjAwYW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iOTE3MzY3ZDQ1MGY1M2I3ZjYwNjQxNWM1YmJkOWZiMDUiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9WVRmbHBTY29qOFUiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iWVRmbHBTY29qOFUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVlUZmxwU2NvajhVIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iV2VsY29tZSBUbyBSZWFsIExpZmUiCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9XZWxjb21lK1RvK1JlYWwrTGlmZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IkJvcmlzIEJyZWpjaGEiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvMjIiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2VkYTI5NTk2YzUwNzczZDdmOGUzMDZhZWYyZTI2MWRlLmpwZyIKICAgICAgICAgICAgYWx0PSIyMiIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSIyY2Y4ZmQyNmYyMzk5M2Q2ZmJlOGY2MTI4MDhkY2UwOCIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjJjZjhmZDI2ZjIzOTkzZDZmYmU4ZjYxMjgwOGRjZTA4IgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9XZWxjb21lK1RvK1JlYWwrTGlmZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IldlbGNvbWUgVG8gUmVhbCBMaWZlIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPldlbGNvbWUgVG8gUmVhbCBMaWZlPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQm9yaXMgQnJlamNoYSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Qm9yaXMgQnJlamNoYTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1hZjY5OGY0NS01NDA5LTRlYmUtYTMzOC04ODRiMDc4OGI0N2EiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9XZWxjb21lK1RvK1JlYWwrTGlmZS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtYWY2OThmNDUtNTQwOS00ZWJlLWEzMzgtODg0YjA3ODhiNDdhIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTQ3ODk3OTVmLWI4ZWQtNDlhNi1hOWM2LTk1OTQxMjFmN2UwMyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vV2VsY29tZStUbytSZWFsK0xpZmUvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNDc4OTc5NWYtYjhlZC00OWE2LWE5YzYtOTU5NDEyMWY3ZTAzIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vV2VsY29tZStUbytSZWFsK0xpZmUiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Cb3JpcytCcmVqY2hhL18vV2VsY29tZStUbytSZWFsK0xpZmUiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IlNhdHVyZGF5IDE1IERlYyAyMDE4LCA3OjAycG0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNSBEZWMgMjAxOCwgNzowMnBtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9IjMxM2MyYWFlNWQyZTYxOWIyZDNmYjZlMDQ1OWE5NWY5IgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXVKN09PUV9OeTlVIgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9InVKN09PUV9OeTlVIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj11SjdPT1FfTnk5VSIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9Ik5pZ2h0IE93bCIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL05pZ2h0K093bCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IkJvcmlzIEJyZWpjaGEiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvMjIiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2VkYTI5NTk2YzUwNzczZDdmOGUzMDZhZWYyZTI2MWRlLmpwZyIKICAgICAgICAgICAgYWx0PSIyMiIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSIzNzg0MTViMWNhMGRlMTE5ZWE2ODg2NzcwOTBlNWVkMCIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjM3ODQxNWIxY2EwZGUxMTllYTY4ODY3NzA5MGU1ZWQwIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9OaWdodCtPd2wiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJOaWdodCBPd2wiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TmlnaHQgT3dsPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQm9yaXMgQnJlamNoYSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Qm9yaXMgQnJlamNoYTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1iNTk5OTlmMi1hYTE2LTRmYWEtOGNjMi03ODBhMjM5NWFlYjQiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9OaWdodCtPd2wvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWI1OTk5OWYyLWFhMTYtNGZhYS04Y2MyLTc4MGEyMzk1YWViNCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS03ZWNjODNjYS1mZmI2LTRkODAtODg2Mi0xNWFjNjIyMWM0ZDEiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL05pZ2h0K093bC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS03ZWNjODNjYS1mZmI2LTRkODAtODg2Mi0xNWFjNjIyMWM0ZDEiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9OaWdodCtPd2wiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Cb3JpcytCcmVqY2hhL18vTmlnaHQrT3dsIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJNb25kYXkgMyBEZWMgMjAxOCwgNTowMHBtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBEZWMgMjAxOCwgNTowMHBtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9Ijk0ZTEzYTZjMjZlNTViOTk5NDk2YzM3ZjMzODk2ZmNjIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvMjIiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2VkYTI5NTk2YzUwNzczZDdmOGUzMDZhZWYyZTI2MWRlLmpwZyIKICAgICAgICAgICAgYWx0PSIyMiIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJlZDI1NGJlMGFiNTVjODg4MDEyMDQ0YTZlYzg2MzdhNyIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImVkMjU0YmUwYWI1NWM4ODgwMTIwNDRhNmVjODYzN2E3IgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9PbmUrRGF5IgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iT25lIERheSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5PbmUgRGF5PC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQm9yaXMgQnJlamNoYSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Qm9yaXMgQnJlamNoYTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy02M2Q3MDE2NS0xNzA4LTQzMmYtYjcyNC0xYjk0YTBmODNlMTIiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9PbmUrRGF5LytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy02M2Q3MDE2NS0xNzA4LTQzMmYtYjcyNC0xYjk0YTBmODNlMTIiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtY2JlMzBiNmYtN2U2Ny00YjVlLThmN2YtYTcxZTNlMzZjY2RmIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9PbmUrRGF5LytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWNiZTMwYjZmLTdlNjctNGI1ZS04ZjdmLWE3MWUzZTM2Y2NkZiIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL09uZStEYXkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Cb3JpcytCcmVqY2hhL18vT25lK0RheSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JvcmlzK0JyZWpjaGEiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxvdmVkIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iTW9uZGF5IDMgRGVjIDIwMTgsIDM6NDRwbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMgRGVjIDIwMTgsIDM6NDRwbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY2hhcnRsaXN0LXJvdy0taW50ZXJsaXN0LWFkIGJ1ZmZlci1zdGFuZGFyZCIgZGF0YS1hZC1jb250YWluZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im1vYmlsZV9wb3NfMyIgZGF0YS1hZD0ibW9iaWxlX3Bvc18zIiBjbGFzcz0ibW9iaWxlX3Bvc18zIGxhc3RmbS1hZC1tb2JpbGUiIGRhdGEtYWRzLXBsYWNlbWVudD0neyYjMzQ7aWQmIzM0OzogJiMzNDttb2JpbGVfcG9zXzMmIzM0OywgJiMzNDtzaXplcyYjMzQ7OiBbWzMwMCwgMjUwXSwgWzMyMCwgNTBdXSwgJiMzNDtpc19tb2JpbGUmIzM0OzogdHJ1ZSwgJiMzNDt0YXJnZXRpbmcmIzM0OzogeyYjMzQ7cG9zJiMzNDs6ICYjMzQ7MyYjMzQ7fX0nPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iOGExNGJlNzhkNzYwNGMyOGRhMGQwMjA3NjE5MjI2ODMiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dG5UT3VFeWN0cnMiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0idG5UT3VFeWN0cnMiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXRuVE91RXljdHJzIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iUGlsbGVua8OkZmVyIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vUGlsbGVuayVDMyVBNGZlciIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IkJvcmlzIEJyZWpjaGEiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvMjIiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2VkYTI5NTk2YzUwNzczZDdmOGUzMDZhZWYyZTI2MWRlLmpwZyIKICAgICAgICAgICAgYWx0PSIyMiIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI0MTdlYTdmYTQxNmZiMTM5ZjZiNDc4ZWU3NzBkNGEwMyIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjQxN2VhN2ZhNDE2ZmIxMzlmNmI0NzhlZTc3MGQ0YTAzIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9QaWxsZW5rJUMzJUE0ZmVyIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGlsbGVua8OkZmVyIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlBpbGxlbmvDpGZlcjwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkJvcmlzIEJyZWpjaGEiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkJvcmlzIEJyZWpjaGE8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNmQ2ODUwZGYtYWRlZi00MmVmLTkwNmYtYTc4OGEzYTYwMmFkIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vUGlsbGVuayVDMyVBNGZlci8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtNmQ2ODUwZGYtYWRlZi00MmVmLTkwNmYtYTc4OGEzYTYwMmFkIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLWJjNjI0Yjc4LTFkMDItNGUyNS1iZmZiLTQ1YThjM2NiMDIwMSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vUGlsbGVuayVDMyVBNGZlci8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1iYzYyNGI3OC0xZDAyLTRlMjUtYmZmYi00NWE4YzNjYjAyMDEiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9QaWxsZW5rJUMzJUE0ZmVyIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1BpbGxlbmslQzMlQTRmZXIiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsb3ZlZCIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9Ik1vbmRheSAzIERlYyAyMDE4LCAyOjI4cG0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzIERlYyAyMDE4LCAyOjI4cG0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iODlkNmU3MTg0MTFkOTRkZmNlN2UwMDc5MGVkZjlmYzYiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYS8yMiIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvZWRhMjk1OTZjNTA3NzNkN2Y4ZTMwNmFlZjJlMjYxZGUuanBnIgogICAgICAgICAgICBhbHQ9IjIyIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjlkMzI3NDVkNGRhYWNmYTZmNGI5YzNiNTU2OWU0MmJmIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iOWQzMjc0NWQ0ZGFhY2ZhNmY0YjljM2I1NTY5ZTQyYmYiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL0tpbGxpbmcrTWUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJLaWxsaW5nIE1lIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPktpbGxpbmcgTWU8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJCb3JpcyBCcmVqY2hhIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Cb3JpcyBCcmVqY2hhPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTc3ZDEwZjJjLTRhYmMtNDk4OC05NWE3LTJmYjY2ZGZlZTg3OCIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL0tpbGxpbmcrTWUvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTc3ZDEwZjJjLTRhYmMtNDk4OC05NWE3LTJmYjY2ZGZlZTg3OCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0xNTZiNzkxMi02YTBmLTRmZTktYjQxOC05YzJmNDA3Zjc0MjgiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL0tpbGxpbmcrTWUvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtMTU2Yjc5MTItNmEwZi00ZmU5LWI0MTgtOWMyZjQwN2Y3NDI4IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vS2lsbGluZytNZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JvcmlzK0JyZWpjaGEvXy9LaWxsaW5nK01lIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJNb25kYXkgMyBEZWMgMjAxOCwgMjoyN3BtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBEZWMgMjAxOCwgMjoyN3BtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9ImM5YWM3N2FjMzdlYWZmOTExM2Q1MGYzYjQwZTY0YzA4IgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iVG8gdGhlIG1vb24gYW5kIGJhY2siCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZDcyMTkyZTM5N2ViMjNmM2EwYzgyYmIxMjgxMDMzZDUiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJkNzIxOTJlMzk3ZWIyM2YzYTBjODJiYjEyODEwMzNkNSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vVG8rdGhlK21vb24rYW5kK2JhY2siCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJUbyB0aGUgbW9vbiBhbmQgYmFjayIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5UbyB0aGUgbW9vbiBhbmQgYmFjazwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkJvcmlzIEJyZWpjaGEiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkJvcmlzIEJyZWpjaGE8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNzE1MjZhNTUtZjBiYS00MGRmLTk4ODMtNzY2MTJkMzNhMjA0IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vVG8rdGhlK21vb24rYW5kK2JhY2svK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTcxNTI2YTU1LWYwYmEtNDBkZi05ODgzLTc2NjEyZDMzYTIwNCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1kN2Y4OWUyMi01ODE0LTQ4Y2YtYWY0YS0wMWNiZThlMWIyYzQiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RvK3RoZSttb29uK2FuZCtiYWNrLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWQ3Zjg5ZTIyLTU4MTQtNDhjZi1hZjRhLTAxY2JlOGUxYjJjNCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RvK3RoZSttb29uK2FuZCtiYWNrIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RvK3RoZSttb29uK2FuZCtiYWNrIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJNb25kYXkgMyBEZWMgMjAxOCwgMTo0NnBtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBEZWMgMjAxOCwgMTo0NnBtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9ImE1ZGEzNGRhYTgwNWNhYTdkOTNiMGY5Y2M3M2Y4MjlmIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iVGhlIFRyb3VibGVtYWtlcnoiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYTIzMmEzZjViZWIyZGViMWM0ZDZkMzNhZTIzMzRkYTUiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJhMjMyYTNmNWJlYjJkZWIxYzRkNmQzM2FlMjMzNGRhNSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vVGhlK1Ryb3VibGVtYWtlcnoiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJUaGUgVHJvdWJsZW1ha2VyeiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5UaGUgVHJvdWJsZW1ha2VyejwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkJvcmlzIEJyZWpjaGEiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkJvcmlzIEJyZWpjaGE8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNDRkZTgwZDctMmE4NC00YTk0LWE1YWEtNmZhYzIwY2I1M2M0IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vVGhlK1Ryb3VibGVtYWtlcnovK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTQ0ZGU4MGQ3LTJhODQtNGE5NC1hNWFhLTZmYWMyMGNiNTNjNCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0yNWU1ZjRhYi1mMjlkLTQ1OTEtYTYzMC0wNjVhOWZjZTRhZDciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RoZStUcm91YmxlbWFrZXJ6LytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTI1ZTVmNGFiLWYyOWQtNDU5MS1hNjMwLTA2NWE5ZmNlNGFkNyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RoZStUcm91YmxlbWFrZXJ6IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RoZStUcm91YmxlbWFrZXJ6IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJNb25kYXkgMyBEZWMgMjAxOCwgMTA6NTdhbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMgRGVjIDIwMTgsIDEwOjU3YW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iMmFiOTA4YjY4MjY4MzRjYzVlZjU5MzFjNzJhMWVmNWUiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJOb3RoaW5nIFNlZW1zIFRvIEJlIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9Ijk1M2YxOGMzZDRiODlhMjA2NWRmMjA2ZGMwMThiMDNhIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iOTUzZjE4YzNkNGI4OWEyMDY1ZGYyMDZkYzAxOGIwM2EiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL05vdGhpbmcrU2VlbXMrVG8rQmUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJOb3RoaW5nIFNlZW1zIFRvIEJlIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPk5vdGhpbmcgU2VlbXMgVG8gQmU8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJCb3JpcyBCcmVqY2hhIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Cb3JpcyBCcmVqY2hhPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTZmYWZmNzA3LTk2YjktNDBhNS1iM2Y0LTM5MDc5YjM3YTE1OSIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL05vdGhpbmcrU2VlbXMrVG8rQmUvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTZmYWZmNzA3LTk2YjktNDBhNS1iM2Y0LTM5MDc5YjM3YTE1OSIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS01MGE3Y2E4Yy1kZWQwLTQyZTgtODU4Mi1kOGEyNzBkNTZmZjEiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL05vdGhpbmcrU2VlbXMrVG8rQmUvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNTBhN2NhOGMtZGVkMC00MmU4LTg1ODItZDhhMjcwZDU2ZmYxIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vTm90aGluZytTZWVtcytUbytCZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JvcmlzK0JyZWpjaGEvXy9Ob3RoaW5nK1NlZW1zK1RvK0JlIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbG92ZWQiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJNb25kYXkgMyBEZWMgMjAxOCwgOTo0OGFtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBEZWMgMjAxOCwgOTo0OGFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCiAgICAgICAgPC90Ym9keT4KICAgIDwvdGFibGU+CgoKICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAoKICAgICAgICAKCiAgICAgICAgPG5hdiBjbGFzcz0icGFnaW5hdGlvbiI+CiAgICAgICAgICAgIDxoMiBjbGFzcz0ic3Itb25seSI+UGFnaW5hdGlvbjwvaDI+CgogICAgICAgICAgICA8dWwgY2xhc3M9InBhZ2luYXRpb24tbGlzdCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uLXBhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtY3VycmVudD0icGFnZSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+MTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb24tcGFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI/cGFnZT0yIj4yPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbi1wYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9wYWdlPTMiPjM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uLXBhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iP3BhZ2U9NCI+NDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb24tcGFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbi1wYWdlLS1oaWRlLW1vYmlsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI/cGFnZT01Ij41PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbi1wYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uLXBhZ2UtLWhpZGUtbW9iaWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9wYWdlPTYiPjY8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uLXBhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uLXBhZ2UtLWVsbGlwc2lzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+4oCmPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb24tcGFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI/cGFnZT0zNCI+MzQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWdpbmF0aW9uLW5leHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI/cGFnZT0yIj5OZXh0PC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC91bD4KICAgICAgICA8L25hdj4KICAgIAoKICAgICAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNpZGViYXIgY29sLXNpZGViYXItLWxvbmciPgogICAgICAgICAgICAKICAgIAoKICAgIAoKICAgIAogICAgCgoKICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgaWQ9Im1wdV90b3AiIGRhdGEtYWQ9Im1wdV90b3AiIGNsYXNzPSJtcHVfdG9wIGxhc3RmbS1hZCIgZGF0YS1hZHMtcGxhY2VtZW50PSd7JiMzNDtpZCYjMzQ7OiAmIzM0O21wdV90b3AmIzM0OywgJiMzNDtzaXplcyYjMzQ7OiBbWzMwMCwgMjUwXSwgWzMwMCwgNjAwXV0sICYjMzQ7dGFyZ2V0aW5nJiMzNDs6IHsmIzM0O3BvcyYjMzQ7OiAmIzM0O3RvcCYjMzQ7fSwgJiMzNDthZGJsb2NrX21lc3NhZ2UmIzM0OzogdHJ1ZX0nPjwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8cCBjbGFzcz0ibXB1LXN1YnNjcmlwdGlvbi11cHNlbGwgbXB1LXN1YnNjcmlwdGlvbi11cHNlbGwtLW1wdSI+CiAgICAgICAgICAgICAgICBEb24ndCB3YW50IHRvIHNlZSBhZHM/IDxhIGhyZWY9Ii9zdWJzY3JpYmUiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3Vic2NyaWJlQ2xpY2siIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBZFVwc2VsbENUQSI+U3Vic2NyaWJlIG5vdzwvYT4KICAgICAgICAgICAgPC9wPgogICAgICAgIAogICAgCgoKICAgIAoKICAgIAogICAgICAgIAogICAgCiAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICB0b25lZnV6ZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgdG9uZWZ1emUtLWRlc2t0b3AKICAgICAgICAgICAgICAgICAgICBoaWRkZW4teHMKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICIKICAgICAgICAgICAgZGF0YS1yZXF1aXJlPSJhZHMvdG9uZWZ1emUiCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlkPSJ0b25lZnV6ZS1kZXNrdG9wLWIxMDQ2YTg4LWRjODQtNDhjMy1hMzdiLTAzOGZhZWYxMDJhMyIKICAgICAgICAgICAgICAgIGRhdGEtdG9uZWZ1emUtaWQ9IjEwMDAwMDA1NCIKICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS10b25lZnV6ZS1hcnRpc3Q9IlRoZSBCZWF0bGVzIgogICAgICAgICAgICAKICAgICAgICA+PC9kaXY+CiAgICAKCiAgICAKCiAgICAKICAgICAgICAKICAgIAogICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgdG9uZWZ1emUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHRvbmVmdXplLS1tb2JpbGUKICAgICAgICAgICAgICAgICAgICB2aXNpYmxlLXhzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAiCiAgICAgICAgICAgIGRhdGEtcmVxdWlyZT0iYWRzL3RvbmVmdXplIgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZD0idG9uZWZ1emUtbW9iaWxlLTRiNzAyMjEyLTg1YzgtNDg3Mi1iNmEyLTAxNDJiZTc4ZDQ1MyIKICAgICAgICAgICAgICAgIGRhdGEtdG9uZWZ1emUtaWQ9IjEwMDAwMDA1NSIKICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS10b25lZnV6ZS1hcnRpc3Q9IktlbmRyaWNrIExhbWFyIgogICAgICAgICAgICAKICAgICAgICA+PC9kaXY+CiAgICAKCiAgICAKCiAgICAKICAgIAoKCiAgICAKCiAgICAgICAgCiAgICAKCiAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0icmVsYXRlZC1jb250ZW50IiBpZD0idGFib29sYS1yaWdodC1yYWlsLXRodW1ibmFpbHMiIGRhdGEtcmVxdWlyZT0iYWRzL3RhYm9vbGEiIGRhdGEtdGFib29sYS1sYXlvdXQ9Ik5vbmUiPjwvZGl2PgogICAgCgogICAgICAgIAogICAgPGRpdiBjbGFzcz0icmVsYXRlZC1hZHMiPgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLXNlYXJjaGxpbmtzLWRlc2t0b3AKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgaWQ9Im1vYmlsZV9wb3NfNCIgZGF0YS1hZD0ibW9iaWxlX3Bvc180IiBjbGFzcz0ibW9iaWxlX3Bvc180IGxhc3RmbS1hZC1tb2JpbGUiIGRhdGEtYWRzLXBsYWNlbWVudD0neyYjMzQ7aWQmIzM0OzogJiMzNDttb2JpbGVfcG9zXzQmIzM0OywgJiMzNDtzaXplcyYjMzQ7OiBbWzMwMCwgMjUwXSwgWzMyMCwgNTBdXSwgJiMzNDtpc19tb2JpbGUmIzM0OzogdHJ1ZSwgJiMzNDt0YXJnZXRpbmcmIzM0OzogeyYjMzQ7cG9zJiMzNDs6ICYjMzQ7NCYjMzQ7fX0nPjwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgCgoKICAgIAoKICAgIAogICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBpZD0ibXB1X2JvdHRvbSIgZGF0YS1hZD0ibXB1X2JvdHRvbSIgY2xhc3M9Im1wdV9ib3R0b20gbGFzdGZtLWFkIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7bXB1X2JvdHRvbSYjMzQ7LCAmIzM0O3NpemVzJiMzNDs6IFtbMzAwLCAyNTBdXSwgJiMzNDt0YXJnZXRpbmcmIzM0OzogeyYjMzQ7cG9zJiMzNDs6ICYjMzQ7Ym90dG9tJiMzNDt9fSc+PC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAKCgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPC9kaXY+CgoKICAgICAgICAKCgogICAgICAgIAogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJsZWFkZXJfYm90dG9tIiBkYXRhLWFkPSJsZWFkZXJfYm90dG9tIiBjbGFzcz0ibGVhZGVyX2JvdHRvbSBsYXN0Zm0tYWQiIGRhdGEtYWRzLXBsYWNlbWVudD0neyYjMzQ7aWQmIzM0OzogJiMzNDtsZWFkZXJfYm90dG9tJiMzNDssICYjMzQ7c2l6ZXMmIzM0OzogW1s3MjgsIDkwXSwgWzk3MCwgNjZdLCBbNzI4LCA5Ml1dLCAmIzM0O3RhcmdldGluZyYjMzQ7OiB7JiMzNDtwb3MmIzM0OzogJiMzNDtib3R0b20mIzM0O319Jz48L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgIAoKICAgIDwvZGl2PgoKCiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBwYWdlLWNvbnRlbnQgdmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9InJlbGF0ZWQtYWRzIj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWFyY2hsaW5rcy1tb2JpbGUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIDxkaXYgaWQ9InFhLXBhZ2UtbG9hZCI+PC9kaXY+CgogICAgCiAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAKICAgIAogICAgCiAgICA8ZGl2CiAgICAgICAgY2xhc3M9ImxhenktZmVhdHVyZXMtZm9vdGVyIgogICAgICAgIGRhdGEtcmVxdWlyZT0iY29tcG9uZW50cy9sYXp5LWxvYWQtdjIiCiAgICAgICAgZGF0YS1sYXp5LWxvYWQtY29udGVudD0iL2ZlYXR1cmVzL3BhcnRpYWwvZm9vdGVyIgogICAgICAgIGRhdGEtbGF6eS1sb2FkLXdoZW4tb24tc2NyZWVuCiAgICA+PC9kaXY+CgogICAgICAgIAogICAgCgoKICAgIAogICAgPGZvb3RlciBjbGFzcz0iZm9vdGVyIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09yZ2FuaXphdGlvbiI+CiAgICAgICAgPGxpbmsgaXRlbXByb3A9InVybCIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci10b3AiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXRvcC1yb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci10b3AtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJmb290ZXItaGVhZGluZyI+Q29tcGFueTwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZm9vdGVyLWxpbmtzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYWJvdXQiPkFib3V0IExhc3QuZm08L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYWJvdXQvY29udGFjdCI+Q29udGFjdCBVczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hYm91dC9qb2JzIj5Kb2JzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci10b3AtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJmb290ZXItaGVhZGluZyI+SGVscDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZm9vdGVyLWxpbmtzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYWJvdXQvdHJhY2tteW11c2ljIj5UcmFjayBNeSBNdXNpYzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2V0c2F0aXNmYWN0aW9uLmNvbS9sYXN0Zm0iIHRhcmdldD0iX0JMQU5LIj5Db21tdW5pdHkgU3VwcG9ydDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2hlbHAvZ3VpZGVsaW5lcyI+Q29tbXVuaXR5IEd1aWRlbGluZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwOi8vY2JzaS5mb3JjZS5jb20vQ0JTaS9sYXN0Zm0iIHRhcmdldD0iX0JMQU5LIj5IZWxwPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXRvcC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImZvb3Rlci1oZWFkaW5nIj5Hb29kaWVzPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJmb290ZXItbGlua3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hYm91dC90cmFja215bXVzaWMiPkRvd25sb2FkIFNjcm9iYmxlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hcGkiPkRldmVsb3BlciBBUEk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbXVzaWMvK2ZyZWUtbXVzaWMtZG93bmxvYWRzIj5GcmVlIE11c2ljIERvd25sb2FkczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vc3RvcmUubGFzdC5mbSI+TWVyY2hhbmRpc2U8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXRvcC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImZvb3Rlci1oZWFkaW5nIj5BY2NvdW50PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJmb290ZXItbGlua3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9qb2luIj5Kb2luPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4iPkxvZ2luPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9zdWJzY3JpYmUiPlN1YnNjcmliZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci10b3AtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJmb290ZXItaGVhZGluZyI+Rm9sbG93IFVzPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJmb290ZXItbGlua3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vbGFzdGZtIj5GYWNlYm9vazwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2xhc3RmbSI+VHdpdHRlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2xhc3RfZm0iPkluc3RhZ3JhbTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL2xhc3RmbSI+WW91VHViZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItYm90dG9tIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS05Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGlkPSJsYW5ndWFnZS1zZWxlY3RvciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UtLWFjdGl2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5FbmdsaXNoPC9zdHJvbmc+PHNwYW4gY2xhc3M9InNyLW9ubHkiPmN1cnJlbnQgbGFuZ3VhZ2U8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J2tYZW5PeHZzam9HSU1mY3NvVndBN2xXazJVMHVOcWtMJyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0iZGUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0iZGUiIHR5cGU9InN1Ym1pdCI+RGV1dHNjaDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3Rlci1sYW5ndWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvb3Rlci1sYW5ndWFnZS1mb3JtIiBhY3Rpb249Ii9pMThuL3NldGxhbmcvIiBtZXRob2Q9InBvc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J2NzcmZtaWRkbGV3YXJldG9rZW4nIHZhbHVlPSdrWGVuT3h2c2pvR0lNZmNzb1Z3QTdsV2syVTB1TnFrTCcgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJsYW5ndWFnZSIgdmFsdWU9ImVzIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im1pbWljLWxpbmsiIG5hbWU9ImVzIiB0eXBlPSJzdWJtaXQiPkVzcGHDsW9sPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J2tYZW5PeHZzam9HSU1mY3NvVndBN2xXazJVMHVOcWtMJyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0iZnIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0iZnIiIHR5cGU9InN1Ym1pdCI+RnJhbsOnYWlzPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J2tYZW5PeHZzam9HSU1mY3NvVndBN2xXazJVMHVOcWtMJyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0iaXQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0iaXQiIHR5cGU9InN1Ym1pdCI+SXRhbGlhbm88L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb290ZXItbGFuZ3VhZ2UtZm9ybSIgYWN0aW9uPSIvaTE4bi9zZXRsYW5nLyIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdjc3JmbWlkZGxld2FyZXRva2VuJyB2YWx1ZT0na1hlbk94dnNqb0dJTWZjc29Wd0E3bFdrMlUwdU5xa0wnIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibGFuZ3VhZ2UiIHZhbHVlPSJqYSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtaW1pYy1saW5rIiBuYW1lPSJqYSIgdHlwZT0ic3VibWl0Ij7ml6XmnKzoqp48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb290ZXItbGFuZ3VhZ2UtZm9ybSIgYWN0aW9uPSIvaTE4bi9zZXRsYW5nLyIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdjc3JmbWlkZGxld2FyZXRva2VuJyB2YWx1ZT0na1hlbk94dnNqb0dJTWZjc29Wd0E3bFdrMlUwdU5xa0wnIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibGFuZ3VhZ2UiIHZhbHVlPSJwbCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtaW1pYy1saW5rIiBuYW1lPSJwbCIgdHlwZT0ic3VibWl0Ij5Qb2xza2k8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb290ZXItbGFuZ3VhZ2UtZm9ybSIgYWN0aW9uPSIvaTE4bi9zZXRsYW5nLyIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdjc3JmbWlkZGxld2FyZXRva2VuJyB2YWx1ZT0na1hlbk94dnNqb0dJTWZjc29Wd0E3bFdrMlUwdU5xa0wnIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibGFuZ3VhZ2UiIHZhbHVlPSJwdCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtaW1pYy1saW5rIiBuYW1lPSJwdCIgdHlwZT0ic3VibWl0Ij5Qb3J0dWd1w6pzPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J2tYZW5PeHZzam9HSU1mY3NvVndBN2xXazJVMHVOcWtMJyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0icnUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0icnUiIHR5cGU9InN1Ym1pdCI+0KDRg9GB0YHQutC40Lk8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb290ZXItbGFuZ3VhZ2UtZm9ybSIgYWN0aW9uPSIvaTE4bi9zZXRsYW5nLyIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdjc3JmbWlkZGxld2FyZXRva2VuJyB2YWx1ZT0na1hlbk94dnNqb0dJTWZjc29Wd0E3bFdrMlUwdU5xa0wnIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibGFuZ3VhZ2UiIHZhbHVlPSJzdiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtaW1pYy1saW5rIiBuYW1lPSJzdiIgdHlwZT0ic3VibWl0Ij5TdmVuc2thPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J2tYZW5PeHZzam9HSU1mY3NvVndBN2xXazJVMHVOcWtMJyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0idHIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0idHIiIHR5cGU9InN1Ym1pdCI+VMO8cmvDp2U8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb290ZXItbGFuZ3VhZ2UtZm9ybSIgYWN0aW9uPSIvaTE4bi9zZXRsYW5nLyIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdjc3JmbWlkZGxld2FyZXRva2VuJyB2YWx1ZT0na1hlbk94dnNqb0dJTWZjc29Wd0E3bFdrMlUwdU5xa0wnIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibGFuZ3VhZ2UiIHZhbHVlPSJ6aCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtaW1pYy1saW5rIiBuYW1lPSJ6aCIgdHlwZT0ic3VibWl0Ij7nroDkvZPkuK3mloc8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImZvb3Rlci10aW1lem9uZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaW1lIHpvbmU6IDxzdHJvbmc+UGFjaWZpYy9Ob3VtZWE8L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItbGVnYWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyLWxlZ2FsLWl0ZW0iPjxhIHJlbD0ibm9mb2xsb3ciIGhyZWY9Imh0dHA6Ly93d3cuY2JzaW50ZXJhY3RpdmUuY29tLyI+Q0JTIEludGVyYWN0aXZlPC9hPiDCqSAyMDE5IDxzcGFuIGl0ZW1wcm9wPSJuYW1lIj5MYXN0LmZtPC9zcGFuPiBMdGQuIEFsbCByaWdodHMgcmVzZXJ2ZWQ8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyLWxlZ2FsLWl0ZW0iPjxhIGhyZWY9Ii9sZWdhbC90ZXJtcyI+VGVybXMgb2YgVXNlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXItbGVnYWwtaXRlbSI+PGEgaHJlZj0iL2xlZ2FsL3ByaXZhY3kiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXItbGVnYWwtaXRlbSI+PGEgaHJlZj0iL2xlZ2FsIj5MZWdhbCBQb2xpY2llczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyLWxlZ2FsLWl0ZW0iPjxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwOi8vd3d3LmNic2ludGVyYWN0aXZlLmNvbS9jYXJlZXJzIj5Kb2JzIGF0IENCU2k8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlci1sZWdhbC1pdGVtIj48YSByZWw9Im5vZm9sbG93IiBocmVmPSJodHRwOi8vd3d3Lmxhc3QuZm0iPkxhc3QuZm0gTXVzaWM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2dvIGNvbC14cy0xMiBjb2wtc20tMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkF1ZGlvc2Nyb2JibGVyPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3N0YXRpYy9pbWFnZXMvZm9vdGVyX2xvZ29AMnguNDljYTUxOTQ4YjBhLnBuZyIgd2lkdGg9IjM3IiBoZWlnaHQ9IjIwIiBhbHQ9Ikxhc3QuZm0gJ2FzJyBsb2dvIj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZmVlZGJhY2stbWVzc2FnZSI+CiAgICA8ZGl2IGNsYXNzPSJmZWVkYmFjay1tZXNzYWdlLWlubmVyIj4KICAgICAgICA8cD4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhpZGRlbi14cyI+CiAgICAgICAgICAgICAgICBMZXQgdXMga25vdyB3aGF0IHlvdSB0aGluayBvZiB0aGUgTGFzdC5mbSB3ZWJzaXRlLgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly9jYnNpLmZvcmNlLmNvbS9DQlNpL3RlbXBsYXRlX2xmbWZiaz9wX3VzZXJpZD0iIHRhcmdldD0iX2JsYW5rIj5MZWF2ZSBmZWVkYmFjazwvYT4KICAgICAgICA8L3A+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8L2Zvb3Rlcj4KCgogICAgPHNlY3Rpb24gY2xhc3M9ImRlYnVnLWxvZyI+CiAgICA8aDIgY2xhc3M9ImRlYnVnLWxvZy1oZWFkaW5nIj5BUEkgQ2FsbHM8L2gyPgogICAgCjwvc2VjdGlvbj4KCgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCiAgICAgICAgPGRpdgogICAgICAgICAgICBkYXRhLWFkcy1iZWFjb24KICAgICAgICAgICAgZGF0YS1hZHMtdGFyZ2V0aW5nPSd7JiMzNDtnZW8mIzM0OzogJiMzNDtOQyYjMzQ7LCAmIzM0O2xhbmcmIzM0OzogJiMzNDtlbiYjMzQ7LCAmIzM0O2JldGEmIzM0OzogJiMzNDt5ZXMmIzM0OywgJiMzNDtwdHlwZSYjMzQ7OiAmIzM0O3VzZXJfbG92ZWQmIzM0OywgJiMzNDthciYjMzQ7OiAmIzM0OyYjMzQ7fScKICAgICAgICAgICAgZGF0YS1hZHMtdW5pdG5hbWU9Jy84MjY0L3Jvdy1sYXN0Zm0vdXNlci9sb3ZlZCcKICAgICAgICAgICAgZGF0YS1hZHMtdW5pdG5hbWUtbW9iaWxlPScvODI2NC9tYXctbGFzdGZtL3VzZXIvbG92ZWQnCiAgICAgICAgPjwvZGl2PgogICAgCgogICAgPC9kaXY+CgogICAgCiAgICAgICAgPGRpdgogICAgICAgICAgICBkYXRhLXJlcXVpcmU9InBsYXllci9wcm92aWRlcnMvc3BvdGlmeS9zcG90aWZ5LXByb3ZpZGVyIgogICAgICAgICAgICBkYXRhLXNwb3RpZnktYXV0aC1tb2RhbD0iL3BsYXllci9tb2RhbC9zcG90aWZ5IgogICAgICAgICAgICBkYXRhLXNwb3RpZnktcHJlbWl1bS1tb2RhbD0iL3BsYXllci9tb2RhbC9zcG90aWZ5LXByZW1pdW0iCiAgICAgICAgICAgIGRhdGEtc3BvdGlmeS1pbmFjdGl2ZS1tb2RhbD0iL3BsYXllci9tb2RhbC9zcG90aWZ5LWluYWN0aXZlIgogICAgICAgICAgICBkYXRhLXNwb3RpZnktaW5pdGlhbC1kZXZpY2UtbW9kYWw9Ii9wbGF5ZXIvbW9kYWwvc3BvdGlmeS1pbml0aWFsLWRldmljZS1kZXRlY3Rpb24iCiAgICAgICAgPjwvZGl2PgoKICAgICAgICA8ZGl2CiAgICAgICAgICAgIGRhdGEtcmVxdWlyZT0icGxheWVyL3Byb3ZpZGVycy95b3V0dWJlL3lvdXR1YmUtcHJvdmlkZXIiCiAgICAgICAgICAgIGNsYXNzPSJ2aWRlby1wbGF5ZXIiCiAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICBpZD0ieW91dHViZS12aWRlbyIKICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InZpZGVvLXBsYXllci1pbm5lci13cmFwIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InZpZGVvLXBsYXllci1lbWJlZCBqcy1wbGF5ZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgdmlkZW8tcGxheWVyLWNsb3NlCiAgICAgICAgICAgICAgICAgICAganMtY2xvc2UtcGxheWVyCiAgICAgICAgICAgICAgICAiPkNsb3NlPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgCgogICAgCiAgICAgICAgCiAgICAKCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBpZD0iaW50cm9tZXJjaWFsIiBkYXRhLWFkPSJpbnRyb21lcmNpYWwiIGNsYXNzPSJpbnRyb21lcmNpYWwgbGFzdGZtLWFkIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7aW50cm9tZXJjaWFsJiMzNDssICYjMzQ7b3V0X29mX3BhZ2UmIzM0OzogdHJ1ZX0nPjwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJtb2JpbGVfaW50cm9tZXJjaWFsIiBkYXRhLWFkPSJtb2JpbGVfaW50cm9tZXJjaWFsIiBjbGFzcz0ibW9iaWxlX2ludHJvbWVyY2lhbCBsYXN0Zm0tYWQtbW9iaWxlIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7bW9iaWxlX2ludHJvbWVyY2lhbCYjMzQ7LCAmIzM0O2lzX21vYmlsZSYjMzQ7OiB0cnVlLCAmIzM0O291dF9vZl9wYWdlJiMzNDs6IHRydWV9Jz48L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAKCiAgICAgICAgPHNjcmlwdCBjbGFzcz0ianMtbW9kYWwtdGVtcGxhdGUiIHR5cGU9InRleHQvdGVtcGxhdGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciIHJvbGU9ImRpYWxvZyIgYXJpYS1sYWJlbGxlZGJ5PSJtb2RhbC1sYWJlbCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtb2RhbC1kaXNtaXNzIGpzLWNsb3NlIj5DbG9zZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxoMgogICAgICAgICAgICAgICAgICAgICAgICBpZD0ibW9kYWwtbGFiZWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtb2RhbC10aXRsZSBqcy1tb2RhbC10aXRsZSIKICAgICAgICAgICAgICAgICAgICA+PC9oMj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IGpzLW1vZGFsLWJvZHkiPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvc2NyaXB0PgoKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPHNjcmlwdCBjbGFzcz0ianMtYWRibG9jay1tZXNzYWdlLXRlbXBsYXRlIiB0eXBlPSJ0ZXh0L3RlbXBsYXRlIj4KICAgICAgICAgICAgICAgIAogICAgCiAgICA8ZGl2PjxkaXY+CiAgICAgICAgPHNlY3Rpb24gY2xhc3M9IgogICAgICAgICAgICBhZGJsb2NrLW1lc3NhZ2UKICAgICAgICAgICAgYWRibG9jay1tZXNzYWdlLS1hZGZyZWUKICAgICAgICAgICAgbGluay1ibG9jawogICAgICAgICAgICBqcy1saW5rLWJsb2NrCiAgICAgICAgIj4KICAgICAgICAgICAgPHAgY2xhc3M9ImFkYmxvY2stbWVzc2FnZS1ib2R5Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+QnJvd3NlIGFkLWZyZWU8L3N0cm9uZz4gd2l0aCBhIHByZW1pdW0gTGFzdC5mbSBhY2NvdW50CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSJhZGJsb2NrLW1lc3NhZ2UtYnV0dG9uIGxpbmstYmxvY2stdGFyZ2V0IgogICAgICAgICAgICAgICAgaHJlZj0iL3N1YnNjcmliZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3Vic2NyaWJlQ2xpY2siCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQWRibG9ja01lc3NhZ2VBZGZyZWUiCiAgICAgICAgICAgID5GaW5kIG91dCBtb3JlPC9hPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgaHJlZj0iL3N1YnNjcmliZSIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBqcy1saW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICAgICBsaW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJTdWJzY3JpYmVDbGljayIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBZGJsb2NrTWVzc2FnZUFkZnJlZSIKICAgICAgICAgICAgPjwvYT4KICAgICAgICA8L3NlY3Rpb24+CiAgICA8L2Rpdj48L2Rpdj4KCiAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICA8c2NyaXB0IGNsYXNzPSJqcy1hZGJsb2NrLW1lc3NhZ2UtdGVtcGxhdGUiIHR5cGU9InRleHQvdGVtcGxhdGUiPgogICAgICAgICAgICAgICAgCiAgICAKICAgIDxkaXY+PGRpdj4KICAgICAgICA8c2VjdGlvbiBjbGFzcz0iCiAgICAgICAgICAgIGFkYmxvY2stbWVzc2FnZQogICAgICAgICAgICBhZGJsb2NrLW1lc3NhZ2UtLXN1cHBvcnQKICAgICAgICAgICAgbGluay1ibG9jawogICAgICAgICAgICBqcy1saW5rLWJsb2NrCiAgICAgICAgIj4KICAgICAgICAgICAgPHAgY2xhc3M9ImFkYmxvY2stbWVzc2FnZS1ib2R5Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+U2hvdyB5b3VyIHN1cHBvcnQ8L3N0cm9uZz4gd2l0aCBhIHByZW1pdW0gTGFzdC5mbSBhY2NvdW50CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSJhZGJsb2NrLW1lc3NhZ2UtYnV0dG9uIGxpbmstYmxvY2stdGFyZ2V0IgogICAgICAgICAgICAgICAgaHJlZj0iL3N1YnNjcmliZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3Vic2NyaWJlQ2xpY2siCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQWRibG9ja01lc3NhZ2VTdXBwb3J0IgogICAgICAgICAgICA+RmluZCBvdXQgbW9yZTwvYT4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGhyZWY9Ii9zdWJzY3JpYmUiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAganMtbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAgICAgbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3Vic2NyaWJlQ2xpY2siCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQWRibG9ja01lc3NhZ2VTdXBwb3J0IgogICAgICAgICAgICA+PC9hPgogICAgICAgIDwvc2VjdGlvbj4KICAgIDwvZGl2PjwvZGl2PgoKICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgIDxzY3JpcHQgY2xhc3M9ImpzLWFkYmxvY2stbWVzc2FnZS10ZW1wbGF0ZSIgdHlwZT0idGV4dC90ZW1wbGF0ZSI+CiAgICAgICAgICAgICAgICAKICAgIAogICAgPGRpdj48ZGl2PgogICAgICAgIDxzZWN0aW9uIGNsYXNzPSIKICAgICAgICAgICAgYWRibG9jay1tZXNzYWdlCiAgICAgICAgICAgIGFkYmxvY2stbWVzc2FnZS0tYmVuZWZpdHMKICAgICAgICAgICAgbGluay1ibG9jawogICAgICAgICAgICBqcy1saW5rLWJsb2NrCiAgICAgICAgIj4KICAgICAgICAgICAgPHAgY2xhc3M9ImFkYmxvY2stbWVzc2FnZS1ib2R5Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+R2V0IGV4Y2x1c2l2ZSBiZW5lZml0czwvc3Ryb25nPiB3aXRoIGEgcHJlbWl1bSBMYXN0LmZtIGFjY291bnQKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9ImFkYmxvY2stbWVzc2FnZS1idXR0b24gbGluay1ibG9jay10YXJnZXQiCiAgICAgICAgICAgICAgICBocmVmPSIvc3Vic2NyaWJlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJTdWJzY3JpYmVDbGljayIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBZGJsb2NrTWVzc2FnZUJlbmVmaXRzIgogICAgICAgICAgICA+RmluZCBvdXQgbW9yZTwvYT4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGhyZWY9Ii9zdWJzY3JpYmUiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAganMtbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAgICAgbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3Vic2NyaWJlQ2xpY2siCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQWRibG9ja01lc3NhZ2VCZW5lZml0cyIKICAgICAgICAgICAgPjwvYT4KICAgICAgICA8L3NlY3Rpb24+CiAgICA8L2Rpdj48L2Rpdj4KCiAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgIAoKICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICB3aW5kb3cubGZtRG9tUmVhZHlDYWxsYmFjayAmJiB3aW5kb3cubGZtRG9tUmVhZHlDYWxsYmFjaygpOwogICAgICAgICAgICB3aW5kb3cubGZtRG9tUmVhZHkgPSB0cnVlOwogICAgICAgIDwvc2NyaXB0PgogICAgICAgIAogICAgICAgICAgICA8bGluayBocmVmPSIvc3RhdGljL3N0eWxlcy9idWlsZC9iN2Q2ZmZlZDcwLmI3ZDZmZmVkNzAxNi5jc3MiIHJlbD0icHJlbG9hZCIgYXM9InN0eWxlIiBjaGFyc2V0PSJ1dGYtOCIgZGF0YS1yZXF1aXJlPSJzaGltL3JlbC1wcmVsb2FkIj4KICAgICAgICAKICAgIDwvYm9keT4KPC9odG1sPg==
    http_version: 
  recorded_at: Fri, 12 Jul 2019 08:30:00 GMT
recorded_with: VCR 5.0.0
