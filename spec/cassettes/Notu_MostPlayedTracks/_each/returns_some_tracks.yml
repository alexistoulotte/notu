---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/user/alexistoulotte
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/user/alexistoulotte
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      X-Served-By:
      - ws344
      Vary:
      - Accept-Encoding
      - User-Agent
      - cookie
      Expires:
      - Fri, 12 Jul 2019 08:28:00 GMT
      Cache-Control:
      - max-age=0, no-cache, no-store
      Pragma:
      - no-cache
      Date:
      - Fri, 12 Jul 2019 08:28:00 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Set-Cookie:
      - csrftoken=KBNcyQqM5YqTdcS4D3jEhf70BirVI01u; expires=Fri, 10-Jul-2020 08:28:00
        GMT; Max-Age=31449600; Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=.eJw1jUEKwjAUBe-StQEtsb927Q3qQhAJSf-LCdRWmqRWxLtbkW5nePPeQpucvM4Ro_YmelELhjO5S2IjImIMQ68DLxhcOVRE0pFyUpElaVGyVJXF3uwAKmnZYG67zGCN-YEx3NGnKOrL9WdW8A-2xXOSODSnY8PZy7PXRfu6LYnJjMGk9Xj7-QICADeY:1hlquO:Hv6UxWaHu_BudcfUEkXK7SNsZFU;
        Domain=.last.fm; expires=Sat, 11-Jul-2020 08:28:00 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        CgoKCgoKPCFkb2N0eXBlIGh0bWw+CjxodG1sCiAgICBsYW5nPSJlbiIKICAgIGNsYXNzPSIKICAgICAgICBuby1qcwogICAgICAgIHBsYXliYXItbWFzdGhlYWQtcmVsZWFzZS1zaGltCiAgICAgICAgeW91dHViZS1wcm92aWRlci1ub3QtcmVhZHkKICAgICIKPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPih3aW5kb3cuTlJFVU18fChOUkVVTT17fSkpLmxvYWRlcl9jb25maWc9e3hwaWQ6IlV3WVBWMTVRR3dZRlhGbFhEZ1U9In07d2luZG93Lk5SRVVNfHwoTlJFVU09e30pLF9fbnJfcmVxdWlyZT1mdW5jdGlvbih0LG4sZSl7ZnVuY3Rpb24gcihlKXtpZighbltlXSl7dmFyIG89bltlXT17ZXhwb3J0czp7fX07dFtlXVswXS5jYWxsKG8uZXhwb3J0cyxmdW5jdGlvbihuKXt2YXIgbz10W2VdWzFdW25dO3JldHVybiByKG98fG4pfSxvLG8uZXhwb3J0cyl9cmV0dXJuIG5bZV0uZXhwb3J0c31pZigiZnVuY3Rpb24iPT10eXBlb2YgX19ucl9yZXF1aXJlKXJldHVybiBfX25yX3JlcXVpcmU7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspcihlW29dKTtyZXR1cm4gcn0oezE6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQpe3RyeXtzLmNvbnNvbGUmJmNvbnNvbGUubG9nKHQpfWNhdGNoKG4pe319dmFyIG8saT10KCJlZSIpLGE9dCgxOCkscz17fTt0cnl7bz1sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiX19ucl9mbGFncyIpLnNwbGl0KCIsIiksY29uc29sZSYmImZ1bmN0aW9uIj09dHlwZW9mIGNvbnNvbGUubG9nJiYocy5jb25zb2xlPSEwLG8uaW5kZXhPZigiZGV2IikhPT0tMSYmKHMuZGV2PSEwKSxvLmluZGV4T2YoIm5yX2RldiIpIT09LTEmJihzLm5yRGV2PSEwKSl9Y2F0Y2goYyl7fXMubnJEZXYmJmkub24oImludGVybmFsLWVycm9yIixmdW5jdGlvbih0KXtyKHQuc3RhY2spfSkscy5kZXYmJmkub24oImZuLWVyciIsZnVuY3Rpb24odCxuLGUpe3IoZS5zdGFjayl9KSxzLmRldiYmKHIoIk5SIEFHRU5UIElOIERFVkVMT1BNRU5UIE1PREUiKSxyKCJmbGFnczogIithKHMsZnVuY3Rpb24odCxuKXtyZXR1cm4gdH0pLmpvaW4oIiwgIikpKX0se31dLDI6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbixlLHIscyl7dHJ5e3A/cC09MTpvKHN8fG5ldyBVbmNhdWdodEV4Y2VwdGlvbih0LG4sZSksITApfWNhdGNoKGYpe3RyeXtpKCJpZXJyIixbZixjLm5vdygpLCEwXSl9Y2F0Y2goZCl7fX1yZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgdSYmdS5hcHBseSh0aGlzLGEoYXJndW1lbnRzKSl9ZnVuY3Rpb24gVW5jYXVnaHRFeGNlcHRpb24odCxuLGUpe3RoaXMubWVzc2FnZT10fHwiVW5jYXVnaHQgZXJyb3Igd2l0aCBubyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIix0aGlzLnNvdXJjZVVSTD1uLHRoaXMubGluZT1lfWZ1bmN0aW9uIG8odCxuKXt2YXIgZT1uP251bGw6Yy5ub3coKTtpKCJlcnIiLFt0LGVdKX12YXIgaT10KCJoYW5kbGUiKSxhPXQoMTkpLHM9dCgiZWUiKSxjPXQoImxvYWRlciIpLGY9dCgiZ29zIiksdT13aW5kb3cub25lcnJvcixkPSExLGw9Im5yQHNlZW5FcnJvciIscD0wO2MuZmVhdHVyZXMuZXJyPSEwLHQoMSksd2luZG93Lm9uZXJyb3I9cjt0cnl7dGhyb3cgbmV3IEVycm9yfWNhdGNoKGgpeyJzdGFjayJpbiBoJiYodCg4KSx0KDcpLCJhZGRFdmVudExpc3RlbmVyImluIHdpbmRvdyYmdCg1KSxjLnhocldyYXBwYWJsZSYmdCg5KSxkPSEwKX1zLm9uKCJmbi1zdGFydCIsZnVuY3Rpb24odCxuLGUpe2QmJihwKz0xKX0pLHMub24oImZuLWVyciIsZnVuY3Rpb24odCxuLGUpe2QmJiFlW2xdJiYoZihlLGwsZnVuY3Rpb24oKXtyZXR1cm4hMH0pLHRoaXMudGhyb3duPSEwLG8oZSkpfSkscy5vbigiZm4tZW5kIixmdW5jdGlvbigpe2QmJiF0aGlzLnRocm93biYmcD4wJiYocC09MSl9KSxzLm9uKCJpbnRlcm5hbC1lcnJvciIsZnVuY3Rpb24odCl7aSgiaWVyciIsW3QsYy5ub3coKSwhMF0pfSl9LHt9XSwzOltmdW5jdGlvbih0LG4sZSl7dCgibG9hZGVyIikuZmVhdHVyZXMuaW5zPSEwfSx7fV0sNDpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCl7fWlmKHdpbmRvdy5wZXJmb3JtYW5jZSYmd2luZG93LnBlcmZvcm1hbmNlLnRpbWluZyYmd2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUpe3ZhciBvPXQoImVlIiksaT10KCJoYW5kbGUiKSxhPXQoOCkscz10KDcpLGM9ImxlYXJSZXNvdXJjZVRpbWluZ3MiLGY9ImFkZEV2ZW50TGlzdGVuZXIiLHU9InJlc291cmNldGltaW5nYnVmZmVyZnVsbCIsZD0iYnN0UmVzb3VyY2UiLGw9InJlc291cmNlIixwPSItc3RhcnQiLGg9Ii1lbmQiLG09ImZuIitwLHc9ImZuIitoLHY9ImJzdFRpbWVyIix5PSJwdXNoU3RhdGUiLGc9dCgibG9hZGVyIik7Zy5mZWF0dXJlcy5zdG49ITAsdCg2KTt2YXIgeD1OUkVVTS5vLkVWO28ub24obSxmdW5jdGlvbih0LG4pe3ZhciBlPXRbMF07ZSBpbnN0YW5jZW9mIHgmJih0aGlzLmJzdFN0YXJ0PWcubm93KCkpfSksby5vbih3LGZ1bmN0aW9uKHQsbil7dmFyIGU9dFswXTtlIGluc3RhbmNlb2YgeCYmaSgiYnN0IixbZSxuLHRoaXMuYnN0U3RhcnQsZy5ub3coKV0pfSksYS5vbihtLGZ1bmN0aW9uKHQsbixlKXt0aGlzLmJzdFN0YXJ0PWcubm93KCksdGhpcy5ic3RUeXBlPWV9KSxhLm9uKHcsZnVuY3Rpb24odCxuKXtpKHYsW24sdGhpcy5ic3RTdGFydCxnLm5vdygpLHRoaXMuYnN0VHlwZV0pfSkscy5vbihtLGZ1bmN0aW9uKCl7dGhpcy5ic3RTdGFydD1nLm5vdygpfSkscy5vbih3LGZ1bmN0aW9uKHQsbil7aSh2LFtuLHRoaXMuYnN0U3RhcnQsZy5ub3coKSwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIl0pfSksby5vbih5K3AsZnVuY3Rpb24odCl7dGhpcy50aW1lPWcubm93KCksdGhpcy5zdGFydFBhdGg9bG9jYXRpb24ucGF0aG5hbWUrbG9jYXRpb24uaGFzaH0pLG8ub24oeStoLGZ1bmN0aW9uKHQpe2koImJzdEhpc3QiLFtsb2NhdGlvbi5wYXRobmFtZStsb2NhdGlvbi5oYXNoLHRoaXMuc3RhcnRQYXRoLHRoaXMudGltZV0pfSksZiBpbiB3aW5kb3cucGVyZm9ybWFuY2UmJih3aW5kb3cucGVyZm9ybWFuY2VbImMiK2NdP3dpbmRvdy5wZXJmb3JtYW5jZVtmXSh1LGZ1bmN0aW9uKHQpe2koZCxbd2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUobCldKSx3aW5kb3cucGVyZm9ybWFuY2VbImMiK2NdKCl9LCExKTp3aW5kb3cucGVyZm9ybWFuY2VbZl0oIndlYmtpdCIrdSxmdW5jdGlvbih0KXtpKGQsW3dpbmRvdy5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKGwpXSksd2luZG93LnBlcmZvcm1hbmNlWyJ3ZWJraXRDIitjXSgpfSwhMSkpLGRvY3VtZW50W2ZdKCJzY3JvbGwiLHIse3Bhc3NpdmU6ITB9KSxkb2N1bWVudFtmXSgia2V5cHJlc3MiLHIsITEpLGRvY3VtZW50W2ZdKCJjbGljayIsciwhMSl9fSx7fV0sNTpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCl7Zm9yKHZhciBuPXQ7biYmIW4uaGFzT3duUHJvcGVydHkodSk7KW49T2JqZWN0LmdldFByb3RvdHlwZU9mKG4pO24mJm8obil9ZnVuY3Rpb24gbyh0KXtzLmluUGxhY2UodCxbdSxkXSwiLSIsaSl9ZnVuY3Rpb24gaSh0LG4pe3JldHVybiB0WzFdfXZhciBhPXQoImVlIikuZ2V0KCJldmVudHMiKSxzPXQoMjEpKGEsITApLGM9dCgiZ29zIiksZj1YTUxIdHRwUmVxdWVzdCx1PSJhZGRFdmVudExpc3RlbmVyIixkPSJyZW1vdmVFdmVudExpc3RlbmVyIjtuLmV4cG9ydHM9YSwiZ2V0UHJvdG90eXBlT2YiaW4gT2JqZWN0PyhyKGRvY3VtZW50KSxyKHdpbmRvdykscihmLnByb3RvdHlwZSkpOmYucHJvdG90eXBlLmhhc093blByb3BlcnR5KHUpJiYobyh3aW5kb3cpLG8oZi5wcm90b3R5cGUpKSxhLm9uKHUrIi1zdGFydCIsZnVuY3Rpb24odCxuKXt2YXIgZT10WzFdLHI9YyhlLCJuckB3cmFwcGVkIixmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtpZigiZnVuY3Rpb24iPT10eXBlb2YgZS5oYW5kbGVFdmVudClyZXR1cm4gZS5oYW5kbGVFdmVudC5hcHBseShlLGFyZ3VtZW50cyl9dmFyIG49e29iamVjdDp0LCJmdW5jdGlvbiI6ZX1bdHlwZW9mIGVdO3JldHVybiBuP3MobiwiZm4tIixudWxsLG4ubmFtZXx8ImFub255bW91cyIpOmV9KTt0aGlzLndyYXBwZWQ9dFsxXT1yfSksYS5vbihkKyItc3RhcnQiLGZ1bmN0aW9uKHQpe3RbMV09dGhpcy53cmFwcGVkfHx0WzFdfSl9LHt9XSw2OltmdW5jdGlvbih0LG4sZSl7dmFyIHI9dCgiZWUiKS5nZXQoImhpc3RvcnkiKSxvPXQoMjEpKHIpO24uZXhwb3J0cz1yLG8uaW5QbGFjZSh3aW5kb3cuaGlzdG9yeSxbInB1c2hTdGF0ZSIsInJlcGxhY2VTdGF0ZSJdLCItIil9LHt9XSw3OltmdW5jdGlvbih0LG4sZSl7dmFyIHI9dCgiZWUiKS5nZXQoInJhZiIpLG89dCgyMSkociksaT0iZXF1ZXN0QW5pbWF0aW9uRnJhbWUiO24uZXhwb3J0cz1yLG8uaW5QbGFjZSh3aW5kb3csWyJyIitpLCJtb3pSIitpLCJ3ZWJraXRSIitpLCJtc1IiK2ldLCJyYWYtIiksci5vbigicmFmLXN0YXJ0IixmdW5jdGlvbih0KXt0WzBdPW8odFswXSwiZm4tIil9KX0se31dLDg6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbixlKXt0WzBdPWEodFswXSwiZm4tIixudWxsLGUpfWZ1bmN0aW9uIG8odCxuLGUpe3RoaXMubWV0aG9kPWUsdGhpcy50aW1lckR1cmF0aW9uPWlzTmFOKHRbMV0pPzA6K3RbMV0sdFswXT1hKHRbMF0sImZuLSIsdGhpcyxlKX12YXIgaT10KCJlZSIpLmdldCgidGltZXIiKSxhPXQoMjEpKGkpLHM9InNldFRpbWVvdXQiLGM9InNldEludGVydmFsIixmPSJjbGVhclRpbWVvdXQiLHU9Ii1zdGFydCIsZD0iLSI7bi5leHBvcnRzPWksYS5pblBsYWNlKHdpbmRvdyxbcywic2V0SW1tZWRpYXRlIl0scytkKSxhLmluUGxhY2Uod2luZG93LFtjXSxjK2QpLGEuaW5QbGFjZSh3aW5kb3csW2YsImNsZWFySW1tZWRpYXRlIl0sZitkKSxpLm9uKGMrdSxyKSxpLm9uKHMrdSxvKX0se31dLDk6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbil7ZC5pblBsYWNlKG4sWyJvbnJlYWR5c3RhdGVjaGFuZ2UiXSwiZm4tIixzKX1mdW5jdGlvbiBvKCl7dmFyIHQ9dGhpcyxuPXUuY29udGV4dCh0KTt0LnJlYWR5U3RhdGU+MyYmIW4ucmVzb2x2ZWQmJihuLnJlc29sdmVkPSEwLHUuZW1pdCgieGhyLXJlc29sdmVkIixbXSx0KSksZC5pblBsYWNlKHQseSwiZm4tIixzKX1mdW5jdGlvbiBpKHQpe2cucHVzaCh0KSxoJiYoYj9iLnRoZW4oYSk6dz93KGEpOihFPS1FLFIuZGF0YT1FKSl9ZnVuY3Rpb24gYSgpe2Zvcih2YXIgdD0wO3Q8Zy5sZW5ndGg7dCsrKXIoW10sZ1t0XSk7Zy5sZW5ndGgmJihnPVtdKX1mdW5jdGlvbiBzKHQsbil7cmV0dXJuIG59ZnVuY3Rpb24gYyh0LG4pe2Zvcih2YXIgZSBpbiB0KW5bZV09dFtlXTtyZXR1cm4gbn10KDUpO3ZhciBmPXQoImVlIiksdT1mLmdldCgieGhyIiksZD10KDIxKSh1KSxsPU5SRVVNLm8scD1sLlhIUixoPWwuTU8sbT1sLlBSLHc9bC5TSSx2PSJyZWFkeXN0YXRlY2hhbmdlIix5PVsib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbmxvYWRzdGFydCIsIm9ubG9hZGVuZCIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiXSxnPVtdO24uZXhwb3J0cz11O3ZhciB4PXdpbmRvdy5YTUxIdHRwUmVxdWVzdD1mdW5jdGlvbih0KXt2YXIgbj1uZXcgcCh0KTt0cnl7dS5lbWl0KCJuZXcteGhyIixbbl0sbiksbi5hZGRFdmVudExpc3RlbmVyKHYsbywhMSl9Y2F0Y2goZSl7dHJ5e3UuZW1pdCgiaW50ZXJuYWwtZXJyb3IiLFtlXSl9Y2F0Y2gocil7fX1yZXR1cm4gbn07aWYoYyhwLHgpLHgucHJvdG90eXBlPXAucHJvdG90eXBlLGQuaW5QbGFjZSh4LnByb3RvdHlwZSxbIm9wZW4iLCJzZW5kIl0sIi14aHItIixzKSx1Lm9uKCJzZW5kLXhoci1zdGFydCIsZnVuY3Rpb24odCxuKXtyKHQsbiksaShuKX0pLHUub24oIm9wZW4teGhyLXN0YXJ0IixyKSxoKXt2YXIgYj1tJiZtLnJlc29sdmUoKTtpZighdyYmIW0pe3ZhciBFPTEsUj1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShFKTtuZXcgaChhKS5vYnNlcnZlKFIse2NoYXJhY3RlckRhdGE6ITB9KX19ZWxzZSBmLm9uKCJmbi1lbmQiLGZ1bmN0aW9uKHQpe3RbMF0mJnRbMF0udHlwZT09PXZ8fGEoKX0pfSx7fV0sMTA6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKCl7dmFyIHQ9d2luZG93Lk5SRVVNLG49dC5pbmZvLmFjY291bnRJRHx8bnVsbCxlPXQuaW5mby5hZ2VudElEfHxudWxsLHI9dC5pbmZvLnRydXN0S2V5fHxudWxsLGk9ImJ0b2EiaW4gd2luZG93JiYiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93LmJ0b2E7aWYoIW58fCFlfHwhaSlyZXR1cm4gbnVsbDt2YXIgYT17djpbMCwxXSxkOnt0eToiQnJvd3NlciIsYWM6bixhcDplLGlkOm8uZ2VuZXJhdGVDYXRJZCgpLHRyOm8uZ2VuZXJhdGVDYXRJZCgpLHRpOkRhdGUubm93KCl9fTtyZXR1cm4gciYmbiE9PXImJihhLmQudGs9ciksYnRvYShKU09OLnN0cmluZ2lmeShhKSl9dmFyIG89dCgxNik7bi5leHBvcnRzPXtnZW5lcmF0ZVRyYWNlSGVhZGVyOnJ9fSx7fV0sMTE6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQpe3ZhciBuPXRoaXMucGFyYW1zLGU9dGhpcy5tZXRyaWNzO2lmKCF0aGlzLmVuZGVkKXt0aGlzLmVuZGVkPSEwO2Zvcih2YXIgcj0wO3I8cDtyKyspdC5yZW1vdmVFdmVudExpc3RlbmVyKGxbcl0sdGhpcy5saXN0ZW5lciwhMSk7bi5hYm9ydGVkfHwoZS5kdXJhdGlvbj1zLm5vdygpLXRoaXMuc3RhcnRUaW1lLHRoaXMubG9hZENhcHR1cmVDYWxsZWR8fDQhPT10LnJlYWR5U3RhdGU/bnVsbD09bi5zdGF0dXMmJihuLnN0YXR1cz0wKTphKHRoaXMsdCksZS5jYlRpbWU9dGhpcy5jYlRpbWUsZC5lbWl0KCJ4aHItZG9uZSIsW3RdLHQpLGMoInhociIsW24sZSx0aGlzLnN0YXJ0VGltZV0pKX19ZnVuY3Rpb24gbyh0LG4pe3ZhciBlPXQucmVzcG9uc2VUeXBlO2lmKCJqc29uIj09PWUmJm51bGwhPT1uKXJldHVybiBuO3ZhciByPSJhcnJheWJ1ZmZlciI9PT1lfHwiYmxvYiI9PT1lfHwianNvbiI9PT1lP3QucmVzcG9uc2U6dC5yZXNwb25zZVRleHQ7cmV0dXJuIHcocil9ZnVuY3Rpb24gaSh0LG4pe3ZhciBlPWYobikscj10LnBhcmFtcztyLmhvc3Q9ZS5ob3N0bmFtZSsiOiIrZS5wb3J0LHIucGF0aG5hbWU9ZS5wYXRobmFtZSx0LnNhbWVPcmlnaW49ZS5zYW1lT3JpZ2lufWZ1bmN0aW9uIGEodCxuKXt0LnBhcmFtcy5zdGF0dXM9bi5zdGF0dXM7dmFyIGU9byhuLHQubGFzdFNpemUpO2lmKGUmJih0Lm1ldHJpY3MucnhTaXplPWUpLHQuc2FtZU9yaWdpbil7dmFyIHI9bi5nZXRSZXNwb25zZUhlYWRlcigiWC1OZXdSZWxpYy1BcHAtRGF0YSIpO3ImJih0LnBhcmFtcy5jYXQ9ci5zcGxpdCgiLCAiKS5wb3AoKSl9dC5sb2FkQ2FwdHVyZUNhbGxlZD0hMH12YXIgcz10KCJsb2FkZXIiKTtpZihzLnhocldyYXBwYWJsZSl7dmFyIGM9dCgiaGFuZGxlIiksZj10KDEyKSx1PXQoMTApLmdlbmVyYXRlVHJhY2VIZWFkZXIsZD10KCJlZSIpLGw9WyJsb2FkIiwiZXJyb3IiLCJhYm9ydCIsInRpbWVvdXQiXSxwPWwubGVuZ3RoLGg9dCgiaWQiKSxtPXQoMTUpLHc9dCgxNCksdj13aW5kb3cuWE1MSHR0cFJlcXVlc3Q7cy5mZWF0dXJlcy54aHI9ITAsdCg5KSxkLm9uKCJuZXcteGhyIixmdW5jdGlvbih0KXt2YXIgbj10aGlzO24udG90YWxDYnM9MCxuLmNhbGxlZD0wLG4uY2JUaW1lPTAsbi5lbmQ9cixuLmVuZGVkPSExLG4ueGhyR3VpZHM9e30sbi5sYXN0U2l6ZT1udWxsLG4ubG9hZENhcHR1cmVDYWxsZWQ9ITEsdC5hZGRFdmVudExpc3RlbmVyKCJsb2FkIixmdW5jdGlvbihlKXthKG4sdCl9LCExKSxtJiYobT4zNHx8bTwxMCl8fHdpbmRvdy5vcGVyYXx8dC5hZGRFdmVudExpc3RlbmVyKCJwcm9ncmVzcyIsZnVuY3Rpb24odCl7bi5sYXN0U2l6ZT10LmxvYWRlZH0sITEpfSksZC5vbigib3Blbi14aHItc3RhcnQiLGZ1bmN0aW9uKHQpe3RoaXMucGFyYW1zPXttZXRob2Q6dFswXX0saSh0aGlzLHRbMV0pLHRoaXMubWV0cmljcz17fX0pLGQub24oIm9wZW4teGhyLWVuZCIsZnVuY3Rpb24odCxuKXsibG9hZGVyX2NvbmZpZyJpbiBOUkVVTSYmInhwaWQiaW4gTlJFVU0ubG9hZGVyX2NvbmZpZyYmdGhpcy5zYW1lT3JpZ2luJiZuLnNldFJlcXVlc3RIZWFkZXIoIlgtTmV3UmVsaWMtSUQiLE5SRVVNLmxvYWRlcl9jb25maWcueHBpZCk7dmFyIGU9ITE7aWYoImluaXQiaW4gTlJFVU0mJiJkaXN0cmlidXRlZF90cmFjaW5nImluIE5SRVVNLmluaXQmJihlPSEhTlJFVU0uaW5pdC5kaXN0cmlidXRlZF90cmFjaW5nLmVuYWJsZWQpLGUmJnRoaXMuc2FtZU9yaWdpbil7dmFyIHI9dSgpO3ImJm4uc2V0UmVxdWVzdEhlYWRlcigibmV3cmVsaWMiLHIpfX0pLGQub24oInNlbmQteGhyLXN0YXJ0IixmdW5jdGlvbih0LG4pe3ZhciBlPXRoaXMubWV0cmljcyxyPXRbMF0sbz10aGlzO2lmKGUmJnIpe3ZhciBpPXcocik7aSYmKGUudHhTaXplPWkpfXRoaXMuc3RhcnRUaW1lPXMubm93KCksdGhpcy5saXN0ZW5lcj1mdW5jdGlvbih0KXt0cnl7ImFib3J0IiE9PXQudHlwZXx8by5sb2FkQ2FwdHVyZUNhbGxlZHx8KG8ucGFyYW1zLmFib3J0ZWQ9ITApLCgibG9hZCIhPT10LnR5cGV8fG8uY2FsbGVkPT09by50b3RhbENicyYmKG8ub25sb2FkQ2FsbGVkfHwiZnVuY3Rpb24iIT10eXBlb2Ygbi5vbmxvYWQpKSYmby5lbmQobil9Y2F0Y2goZSl7dHJ5e2QuZW1pdCgiaW50ZXJuYWwtZXJyb3IiLFtlXSl9Y2F0Y2gocil7fX19O2Zvcih2YXIgYT0wO2E8cDthKyspbi5hZGRFdmVudExpc3RlbmVyKGxbYV0sdGhpcy5saXN0ZW5lciwhMSl9KSxkLm9uKCJ4aHItY2ItdGltZSIsZnVuY3Rpb24odCxuLGUpe3RoaXMuY2JUaW1lKz10LG4/dGhpcy5vbmxvYWRDYWxsZWQ9ITA6dGhpcy5jYWxsZWQrPTEsdGhpcy5jYWxsZWQhPT10aGlzLnRvdGFsQ2JzfHwhdGhpcy5vbmxvYWRDYWxsZWQmJiJmdW5jdGlvbiI9PXR5cGVvZiBlLm9ubG9hZHx8dGhpcy5lbmQoZSl9KSxkLm9uKCJ4aHItbG9hZC1hZGRlZCIsZnVuY3Rpb24odCxuKXt2YXIgZT0iIitoKHQpKyEhbjt0aGlzLnhockd1aWRzJiYhdGhpcy54aHJHdWlkc1tlXSYmKHRoaXMueGhyR3VpZHNbZV09ITAsdGhpcy50b3RhbENicys9MSl9KSxkLm9uKCJ4aHItbG9hZC1yZW1vdmVkIixmdW5jdGlvbih0LG4pe3ZhciBlPSIiK2godCkrISFuO3RoaXMueGhyR3VpZHMmJnRoaXMueGhyR3VpZHNbZV0mJihkZWxldGUgdGhpcy54aHJHdWlkc1tlXSx0aGlzLnRvdGFsQ2JzLT0xKX0pLGQub24oImFkZEV2ZW50TGlzdGVuZXItZW5kIixmdW5jdGlvbih0LG4pe24gaW5zdGFuY2VvZiB2JiYibG9hZCI9PT10WzBdJiZkLmVtaXQoInhoci1sb2FkLWFkZGVkIixbdFsxXSx0WzJdXSxuKX0pLGQub24oInJlbW92ZUV2ZW50TGlzdGVuZXItZW5kIixmdW5jdGlvbih0LG4pe24gaW5zdGFuY2VvZiB2JiYibG9hZCI9PT10WzBdJiZkLmVtaXQoInhoci1sb2FkLXJlbW92ZWQiLFt0WzFdLHRbMl1dLG4pfSksZC5vbigiZm4tc3RhcnQiLGZ1bmN0aW9uKHQsbixlKXtuIGluc3RhbmNlb2YgdiYmKCJvbmxvYWQiPT09ZSYmKHRoaXMub25sb2FkPSEwKSwoImxvYWQiPT09KHRbMF0mJnRbMF0udHlwZSl8fHRoaXMub25sb2FkKSYmKHRoaXMueGhyQ2JTdGFydD1zLm5vdygpKSl9KSxkLm9uKCJmbi1lbmQiLGZ1bmN0aW9uKHQsbil7dGhpcy54aHJDYlN0YXJ0JiZkLmVtaXQoInhoci1jYi10aW1lIixbcy5ub3coKS10aGlzLnhockNiU3RhcnQsdGhpcy5vbmxvYWQsbl0sbil9KX19LHt9XSwxMjpbZnVuY3Rpb24odCxuLGUpe24uZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIiksZT13aW5kb3cubG9jYXRpb24scj17fTtuLmhyZWY9dCxyLnBvcnQ9bi5wb3J0O3ZhciBvPW4uaHJlZi5zcGxpdCgiOi8vIik7IXIucG9ydCYmb1sxXSYmKHIucG9ydD1vWzFdLnNwbGl0KCIvIilbMF0uc3BsaXQoIkAiKS5wb3AoKS5zcGxpdCgiOiIpWzFdKSxyLnBvcnQmJiIwIiE9PXIucG9ydHx8KHIucG9ydD0iaHR0cHMiPT09b1swXT8iNDQzIjoiODAiKSxyLmhvc3RuYW1lPW4uaG9zdG5hbWV8fGUuaG9zdG5hbWUsci5wYXRobmFtZT1uLnBhdGhuYW1lLHIucHJvdG9jb2w9b1swXSwiLyIhPT1yLnBhdGhuYW1lLmNoYXJBdCgwKSYmKHIucGF0aG5hbWU9Ii8iK3IucGF0aG5hbWUpO3ZhciBpPSFuLnByb3RvY29sfHwiOiI9PT1uLnByb3RvY29sfHxuLnByb3RvY29sPT09ZS5wcm90b2NvbCxhPW4uaG9zdG5hbWU9PT1kb2N1bWVudC5kb21haW4mJm4ucG9ydD09PWUucG9ydDtyZXR1cm4gci5zYW1lT3JpZ2luPWkmJighbi5ob3N0bmFtZXx8YSkscn19LHt9XSwxMzpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIoKXt9ZnVuY3Rpb24gbyh0LG4sZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGkodCxbZi5ub3coKV0uY29uY2F0KHMoYXJndW1lbnRzKSksbj9udWxsOnRoaXMsZSksbj92b2lkIDA6dGhpc319dmFyIGk9dCgiaGFuZGxlIiksYT10KDE4KSxzPXQoMTkpLGM9dCgiZWUiKS5nZXQoInRyYWNlciIpLGY9dCgibG9hZGVyIiksdT1OUkVVTTsidW5kZWZpbmVkIj09dHlwZW9mIHdpbmRvdy5uZXdyZWxpYyYmKG5ld3JlbGljPXUpO3ZhciBkPVsic2V0UGFnZVZpZXdOYW1lIiwic2V0Q3VzdG9tQXR0cmlidXRlIiwic2V0RXJyb3JIYW5kbGVyIiwiZmluaXNoZWQiLCJhZGRUb1RyYWNlIiwiaW5saW5lSGl0IiwiYWRkUmVsZWFzZSJdLGw9ImFwaS0iLHA9bCsiaXhuLSI7YShkLGZ1bmN0aW9uKHQsbil7dVtuXT1vKGwrbiwhMCwiYXBpIil9KSx1LmFkZFBhZ2VBY3Rpb249byhsKyJhZGRQYWdlQWN0aW9uIiwhMCksdS5zZXRDdXJyZW50Um91dGVOYW1lPW8obCsicm91dGVOYW1lIiwhMCksbi5leHBvcnRzPW5ld3JlbGljLHUuaW50ZXJhY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHIpLmdldCgpfTt2YXIgaD1yLnByb3RvdHlwZT17Y3JlYXRlVHJhY2VyOmZ1bmN0aW9uKHQsbil7dmFyIGU9e30scj10aGlzLG89ImZ1bmN0aW9uIj09dHlwZW9mIG47cmV0dXJuIGkocCsidHJhY2VyIixbZi5ub3coKSx0LGVdLHIpLGZ1bmN0aW9uKCl7aWYoYy5lbWl0KChvPyIiOiJuby0iKSsiZm4tc3RhcnQiLFtmLm5vdygpLHIsb10sZSksbyl0cnl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKHQpe3Rocm93IGMuZW1pdCgiZm4tZXJyIixbYXJndW1lbnRzLHRoaXMsdF0sZSksdH1maW5hbGx5e2MuZW1pdCgiZm4tZW5kIixbZi5ub3coKV0sZSl9fX19O2EoImFjdGlvblRleHQsc2V0TmFtZSxzZXRBdHRyaWJ1dGUsc2F2ZSxpZ25vcmUsb25FbmQsZ2V0Q29udGV4dCxlbmQsZ2V0Ii5zcGxpdCgiLCIpLGZ1bmN0aW9uKHQsbil7aFtuXT1vKHArbil9KSxuZXdyZWxpYy5ub3RpY2VFcnJvcj1mdW5jdGlvbih0LG4peyJzdHJpbmciPT10eXBlb2YgdCYmKHQ9bmV3IEVycm9yKHQpKSxpKCJlcnIiLFt0LGYubm93KCksITEsbl0pfX0se31dLDE0OltmdW5jdGlvbih0LG4sZSl7bi5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKCJzdHJpbmciPT10eXBlb2YgdCYmdC5sZW5ndGgpcmV0dXJuIHQubGVuZ3RoO2lmKCJvYmplY3QiPT10eXBlb2YgdCl7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiZ0LmJ5dGVMZW5ndGgpcmV0dXJuIHQuYnl0ZUxlbmd0aDtpZigidW5kZWZpbmVkIiE9dHlwZW9mIEJsb2ImJnQgaW5zdGFuY2VvZiBCbG9iJiZ0LnNpemUpcmV0dXJuIHQuc2l6ZTtpZighKCJ1bmRlZmluZWQiIT10eXBlb2YgRm9ybURhdGEmJnQgaW5zdGFuY2VvZiBGb3JtRGF0YSkpdHJ5e3JldHVybiBKU09OLnN0cmluZ2lmeSh0KS5sZW5ndGh9Y2F0Y2gobil7cmV0dXJufX19fSx7fV0sMTU6W2Z1bmN0aW9uKHQsbixlKXt2YXIgcj0wLG89bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRmlyZWZveFtcL1xzXShcZCtcLlxkKykvKTtvJiYocj0rb1sxXSksbi5leHBvcnRzPXJ9LHt9XSwxNjpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIoKXtmdW5jdGlvbiB0KCl7cmV0dXJuIG4/MTUmbltlKytdOjE2Kk1hdGgucmFuZG9tKCl8MH12YXIgbj1udWxsLGU9MCxyPXdpbmRvdy5jcnlwdG98fHdpbmRvdy5tc0NyeXB0bztyJiZyLmdldFJhbmRvbVZhbHVlcyYmKG49ci5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMzEpKSk7Zm9yKHZhciBvLGk9Inh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCIsYT0iIixzPTA7czxpLmxlbmd0aDtzKyspbz1pW3NdLCJ4Ij09PW8/YSs9dCgpLnRvU3RyaW5nKDE2KToieSI9PT1vPyhvPTMmdCgpfDgsYSs9by50b1N0cmluZygxNikpOmErPW87cmV0dXJuIGF9ZnVuY3Rpb24gbygpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gbj8xNSZuW2UrK106MTYqTWF0aC5yYW5kb20oKXwwfXZhciBuPW51bGwsZT0wLHI9d2luZG93LmNyeXB0b3x8d2luZG93Lm1zQ3J5cHRvO3ImJnIuZ2V0UmFuZG9tVmFsdWVzJiZVaW50OEFycmF5JiYobj1yLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgzMSkpKTtmb3IodmFyIG89W10saT0wO2k8MTY7aSsrKW8ucHVzaCh0KCkudG9TdHJpbmcoMTYpKTtyZXR1cm4gby5qb2luKCIiKX1uLmV4cG9ydHM9e2dlbmVyYXRlVXVpZDpyLGdlbmVyYXRlQ2F0SWQ6b319LHt9XSwxNzpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCxuKXtpZighbylyZXR1cm4hMTtpZih0IT09bylyZXR1cm4hMTtpZighbilyZXR1cm4hMDtpZighaSlyZXR1cm4hMTtmb3IodmFyIGU9aS5zcGxpdCgiLiIpLHI9bi5zcGxpdCgiLiIpLGE9MDthPHIubGVuZ3RoO2ErKylpZihyW2FdIT09ZVthXSlyZXR1cm4hMTtyZXR1cm4hMH12YXIgbz1udWxsLGk9bnVsbCxhPS9WZXJzaW9uXC8oXFMrKVxzK1NhZmFyaS87aWYobmF2aWdhdG9yLnVzZXJBZ2VudCl7dmFyIHM9bmF2aWdhdG9yLnVzZXJBZ2VudCxjPXMubWF0Y2goYSk7YyYmcy5pbmRleE9mKCJDaHJvbWUiKT09PS0xJiZzLmluZGV4T2YoIkNocm9taXVtIik9PT0tMSYmKG89IlNhZmFyaSIsaT1jWzFdKX1uLmV4cG9ydHM9e2FnZW50Om8sdmVyc2lvbjppLG1hdGNoOnJ9fSx7fV0sMTg6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbil7dmFyIGU9W10scj0iIixpPTA7Zm9yKHIgaW4gdClvLmNhbGwodCxyKSYmKGVbaV09bihyLHRbcl0pLGkrPTEpO3JldHVybiBlfXZhciBvPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7bi5leHBvcnRzPXJ9LHt9XSwxOTpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCxuLGUpe258fChuPTApLCJ1bmRlZmluZWQiPT10eXBlb2YgZSYmKGU9dD90Lmxlbmd0aDowKTtmb3IodmFyIHI9LTEsbz1lLW58fDAsaT1BcnJheShvPDA/MDpvKTsrK3I8bzspaVtyXT10W24rcl07cmV0dXJuIGl9bi5leHBvcnRzPXJ9LHt9XSwyMDpbZnVuY3Rpb24odCxuLGUpe24uZXhwb3J0cz17ZXhpc3RzOiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93LnBlcmZvcm1hbmNlJiZ3aW5kb3cucGVyZm9ybWFuY2UudGltaW5nJiYidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0fX0se31dLDIxOltmdW5jdGlvbih0LG4sZSl7ZnVuY3Rpb24gcih0KXtyZXR1cm4hKHQmJnQgaW5zdGFuY2VvZiBGdW5jdGlvbiYmdC5hcHBseSYmIXRbYV0pfXZhciBvPXQoImVlIiksaT10KDE5KSxhPSJuckBvcmlnaW5hbCIscz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGM9ITE7bi5leHBvcnRzPWZ1bmN0aW9uKHQsbil7ZnVuY3Rpb24gZSh0LG4sZSxvKXtmdW5jdGlvbiBucldyYXBwZXIoKXt2YXIgcixhLHMsYzt0cnl7YT10aGlzLHI9aShhcmd1bWVudHMpLHM9ImZ1bmN0aW9uIj09dHlwZW9mIGU/ZShyLGEpOmV8fHt9fWNhdGNoKGYpe2woW2YsIiIsW3IsYSxvXSxzXSl9dShuKyJzdGFydCIsW3IsYSxvXSxzKTt0cnl7cmV0dXJuIGM9dC5hcHBseShhLHIpfWNhdGNoKGQpe3Rocm93IHUobisiZXJyIixbcixhLGRdLHMpLGR9ZmluYWxseXt1KG4rImVuZCIsW3IsYSxjXSxzKX19cmV0dXJuIHIodCk/dDoobnx8KG49IiIpLG5yV3JhcHBlclthXT10LGQodCxucldyYXBwZXIpLG5yV3JhcHBlcil9ZnVuY3Rpb24gZih0LG4sbyxpKXtvfHwobz0iIik7dmFyIGEscyxjLGY9Ii0iPT09by5jaGFyQXQoMCk7Zm9yKGM9MDtjPG4ubGVuZ3RoO2MrKylzPW5bY10sYT10W3NdLHIoYSl8fCh0W3NdPWUoYSxmP3MrbzpvLGkscykpfWZ1bmN0aW9uIHUoZSxyLG8pe2lmKCFjfHxuKXt2YXIgaT1jO2M9ITA7dHJ5e3QuZW1pdChlLHIsbyxuKX1jYXRjaChhKXtsKFthLGUscixvXSl9Yz1pfX1mdW5jdGlvbiBkKHQsbil7aWYoT2JqZWN0LmRlZmluZVByb3BlcnR5JiZPYmplY3Qua2V5cyl0cnl7dmFyIGU9T2JqZWN0LmtleXModCk7cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkobixlLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtlXX0sc2V0OmZ1bmN0aW9uKG4pe3JldHVybiB0W2VdPW4sbn19KX0pLG59Y2F0Y2gocil7bChbcl0pfWZvcih2YXIgbyBpbiB0KXMuY2FsbCh0LG8pJiYobltvXT10W29dKTtyZXR1cm4gbn1mdW5jdGlvbiBsKG4pe3RyeXt0LmVtaXQoImludGVybmFsLWVycm9yIixuKX1jYXRjaChlKXt9fXJldHVybiB0fHwodD1vKSxlLmluUGxhY2U9ZixlLmZsYWc9YSxlfX0se31dLGVlOltmdW5jdGlvbih0LG4sZSl7ZnVuY3Rpb24gcigpe31mdW5jdGlvbiBvKHQpe2Z1bmN0aW9uIG4odCl7cmV0dXJuIHQmJnQgaW5zdGFuY2VvZiByP3Q6dD9jKHQscyxpKTppKCl9ZnVuY3Rpb24gZShlLHIsbyxpKXtpZighbC5hYm9ydGVkfHxpKXt0JiZ0KGUscixvKTtmb3IodmFyIGE9bihvKSxzPW0oZSksYz1zLmxlbmd0aCxmPTA7ZjxjO2YrKylzW2ZdLmFwcGx5KGEscik7dmFyIGQ9dVtnW2VdXTtyZXR1cm4gZCYmZC5wdXNoKFt4LGUscixhXSksYX19ZnVuY3Rpb24gcCh0LG4pe3lbdF09bSh0KS5jb25jYXQobil9ZnVuY3Rpb24gaCh0LG4pe3ZhciBlPXlbdF07aWYoZSlmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyllW3JdPT09biYmZS5zcGxpY2UociwxKX1mdW5jdGlvbiBtKHQpe3JldHVybiB5W3RdfHxbXX1mdW5jdGlvbiB3KHQpe3JldHVybiBkW3RdPWRbdF18fG8oZSl9ZnVuY3Rpb24gdih0LG4pe2YodCxmdW5jdGlvbih0LGUpe249bnx8ImZlYXR1cmUiLGdbZV09bixuIGluIHV8fCh1W25dPVtdKX0pfXZhciB5PXt9LGc9e30seD17b246cCxhZGRFdmVudExpc3RlbmVyOnAscmVtb3ZlRXZlbnRMaXN0ZW5lcjpoLGVtaXQ6ZSxnZXQ6dyxsaXN0ZW5lcnM6bSxjb250ZXh0Om4sYnVmZmVyOnYsYWJvcnQ6YSxhYm9ydGVkOiExfTtyZXR1cm4geH1mdW5jdGlvbiBpKCl7cmV0dXJuIG5ldyByfWZ1bmN0aW9uIGEoKXsodS5hcGl8fHUuZmVhdHVyZSkmJihsLmFib3J0ZWQ9ITAsdT1sLmJhY2tsb2c9e30pfXZhciBzPSJuckBjb250ZXh0IixjPXQoImdvcyIpLGY9dCgxOCksdT17fSxkPXt9LGw9bi5leHBvcnRzPW8oKTtsLmJhY2tsb2c9dX0se31dLGdvczpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCxuLGUpe2lmKG8uY2FsbCh0LG4pKXJldHVybiB0W25dO3ZhciByPWUoKTtpZihPYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5rZXlzKXRyeXtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbix7dmFsdWU6cix3cml0YWJsZTohMCxlbnVtZXJhYmxlOiExfSkscn1jYXRjaChpKXt9cmV0dXJuIHRbbl09cixyfXZhciBvPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7bi5leHBvcnRzPXJ9LHt9XSxoYW5kbGU6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbixlLHIpe28uYnVmZmVyKFt0XSxyKSxvLmVtaXQodCxuLGUpfXZhciBvPXQoImVlIikuZ2V0KCJoYW5kbGUiKTtuLmV4cG9ydHM9cixyLmVlPW99LHt9XSxpZDpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCl7dmFyIG49dHlwZW9mIHQ7cmV0dXJuIXR8fCJvYmplY3QiIT09biYmImZ1bmN0aW9uIiE9PW4/LTE6dD09PXdpbmRvdz8wOmEodCxpLGZ1bmN0aW9uKCl7cmV0dXJuIG8rK30pfXZhciBvPTEsaT0ibnJAaWQiLGE9dCgiZ29zIik7bi5leHBvcnRzPXJ9LHt9XSxsb2FkZXI6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKCl7aWYoIUUrKyl7dmFyIHQ9Yi5pbmZvPU5SRVVNLmluZm8sbj1wLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKVswXTtpZihzZXRUaW1lb3V0KHUuYWJvcnQsM2U0KSwhKHQmJnQubGljZW5zZUtleSYmdC5hcHBsaWNhdGlvbklEJiZuKSlyZXR1cm4gdS5hYm9ydCgpO2YoZyxmdW5jdGlvbihuLGUpe3Rbbl18fCh0W25dPWUpfSksYygibWFyayIsWyJvbmxvYWQiLGEoKStiLm9mZnNldF0sbnVsbCwiYXBpIik7dmFyIGU9cC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTtlLnNyYz0iaHR0cHM6Ly8iK3QuYWdlbnQsbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLG4pfX1mdW5jdGlvbiBvKCl7ImNvbXBsZXRlIj09PXAucmVhZHlTdGF0ZSYmaSgpfWZ1bmN0aW9uIGkoKXtjKCJtYXJrIixbImRvbUNvbnRlbnQiLGEoKStiLm9mZnNldF0sbnVsbCwiYXBpIil9ZnVuY3Rpb24gYSgpe3JldHVybiBSLmV4aXN0cyYmcGVyZm9ybWFuY2Uubm93P01hdGgucm91bmQocGVyZm9ybWFuY2Uubm93KCkpOihzPU1hdGgubWF4KChuZXcgRGF0ZSkuZ2V0VGltZSgpLHMpKS1iLm9mZnNldH12YXIgcz0obmV3IERhdGUpLmdldFRpbWUoKSxjPXQoImhhbmRsZSIpLGY9dCgxOCksdT10KCJlZSIpLGQ9dCgxNyksbD13aW5kb3cscD1sLmRvY3VtZW50LGg9ImFkZEV2ZW50TGlzdGVuZXIiLG09ImF0dGFjaEV2ZW50Iix3PWwuWE1MSHR0cFJlcXVlc3Qsdj13JiZ3LnByb3RvdHlwZTtOUkVVTS5vPXtTVDpzZXRUaW1lb3V0LFNJOmwuc2V0SW1tZWRpYXRlLENUOmNsZWFyVGltZW91dCxYSFI6dyxSRVE6bC5SZXF1ZXN0LEVWOmwuRXZlbnQsUFI6bC5Qcm9taXNlLE1POmwuTXV0YXRpb25PYnNlcnZlcn07dmFyIHk9IiIrbG9jYXRpb24sZz17YmVhY29uOiJiYW0ubnItZGF0YS5uZXQiLGVycm9yQmVhY29uOiJiYW0ubnItZGF0YS5uZXQiLGFnZW50OiJqcy1hZ2VudC5uZXdyZWxpYy5jb20vbnItMTEyMy5taW4uanMifSx4PXcmJnYmJnZbaF0mJiEvQ3JpT1MvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksYj1uLmV4cG9ydHM9e29mZnNldDpzLG5vdzphLG9yaWdpbjp5LGZlYXR1cmVzOnt9LHhocldyYXBwYWJsZTp4LHVzZXJBZ2VudDpkfTt0KDEzKSxwW2hdPyhwW2hdKCJET01Db250ZW50TG9hZGVkIixpLCExKSxsW2hdKCJsb2FkIixyLCExKSk6KHBbbV0oIm9ucmVhZHlzdGF0ZWNoYW5nZSIsbyksbFttXSgib25sb2FkIixyKSksYygibWFyayIsWyJmaXJzdGJ5dGUiLHNdLG51bGwsImFwaSIpO3ZhciBFPTAsUj10KDIwKX0se31dfSx7fSxbImxvYWRlciIsMiwxMSw0LDNdKTs8L3NjcmlwdD48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+d2luZG93Lk5SRVVNfHwoTlJFVU09e30pO05SRVVNLmluZm89eyJiZWFjb24iOiJiYW0ubnItZGF0YS5uZXQiLCJlcnJvckJlYWNvbiI6ImJhbS5uci1kYXRhLm5ldCIsImxpY2Vuc2VLZXkiOiIwZWQwY2U1MGIwIiwiYXBwbGljYXRpb25JRCI6IjU1ODg1OTQiLCJ0cmFuc2FjdGlvbk5hbWUiOiJZMUJSYlVVRldrTUVXeFlNVjFvYWRVeFpCMEJaQ2xaTkNWNVpHMFJjVlVwRFJ4SVdBeFZJUnh0R1NsSVdHa1lNWFJVV0ZsbFVXbGNOTVVkVkYzY1VBRXBDWEZaT0dRTlJSQT09IiwicXVldWVUaW1lIjowLCJhcHBsaWNhdGlvblRpbWUiOjYyMCwiYWdlbnQiOiIifTwvc2NyaXB0PgogICAgICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CgogICAgICAgIDx0aXRsZSBhcmlhLWxpdmU9ImFzc2VydGl2ZSI+YWxleGlzdG91bG90dGXigJlzIE11c2ljIFByb2ZpbGUgfCBMYXN0LmZtPC90aXRsZT4KCiAgICAgICAgCiAgICA8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS91c2VyL2FsZXhpc3RvdWxvdHRlIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImVuIiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL3VzZXIvYWxleGlzdG91bG90dGUiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0iZGUiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vZGUvdXNlci9hbGV4aXN0b3Vsb3R0ZSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJlcyIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS9lcy91c2VyL2FsZXhpc3RvdWxvdHRlIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImZyIiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL2ZyL3VzZXIvYWxleGlzdG91bG90dGUiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0iaXQiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vaXQvdXNlci9hbGV4aXN0b3Vsb3R0ZSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJqYSIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS9qYS91c2VyL2FsZXhpc3RvdWxvdHRlIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9InBsIiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL3BsL3VzZXIvYWxleGlzdG91bG90dGUiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0icHQiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vcHQvdXNlci9hbGV4aXN0b3Vsb3R0ZSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJydSIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS9ydS91c2VyL2FsZXhpc3RvdWxvdHRlIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9InN2IiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL3N2L3VzZXIvYWxleGlzdG91bG90dGUiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0idHIiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vdHIvdXNlci9hbGV4aXN0b3Vsb3R0ZSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJ6aCIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS96aC91c2VyL2FsZXhpc3RvdWxvdHRlIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0ieC1kZWZhdWx0IiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL3VzZXIvYWxleGlzdG91bG90dGUiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJMaXN0ZW4gdG8gbXVzaWMgZnJvbSBhbGV4aXN0b3Vsb3R0ZeKAmXMgbGlicmFyeSAoODgsNTI0IHRyYWNrcyBwbGF5ZWQpLiBhbGV4aXN0b3Vsb3R0ZeKAmXMgdG9wIGFydGlzdHM6IExvbmRvbiBFbGVrdHJpY2l0eSwgQm9yaXMgQnJlamNoYSwgSGlnaCBDb250cmFzdC4gR2V0IHlvdXIgb3duIG11c2ljIHByb2ZpbGUgYXQgTGFzdC5mbSwgdGhlIHdvcmxk4oCZcyBsYXJnZXN0IHNvY2lhbCBtdXNpYyBwbGF0Zm9ybS4iIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnRpdGxlIiAgICAgICAgICAgY29udGVudD0iYWxleGlzdG91bG90dGXigJlzIE11c2ljIFByb2ZpbGUgfCBMYXN0LmZtIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIiAgICAgY29udGVudD0iTGlzdGVuIHRvIG11c2ljIGZyb20gYWxleGlzdG91bG90dGXigJlzIGxpYnJhcnkgKDg4LDUyNCB0cmFja3MgcGxheWVkKS4gYWxleGlzdG91bG90dGXigJlzIHRvcCBhcnRpc3RzOiBMb25kb24gRWxla3RyaWNpdHksIEJvcmlzIEJyZWpjaGEsIEhpZ2ggQ29udHJhc3QuIEdldCB5b3VyIG93biBtdXNpYyBwcm9maWxlIGF0IExhc3QuZm0sIHRoZSB3b3JsZOKAmXMgbGFyZ2VzdCBzb2NpYWwgbXVzaWMgcGxhdGZvcm0uIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiICAgICAgICAgICAgY29udGVudD0id2Vic2l0ZSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiICAgICAgIGNvbnRlbnQ9Ikxhc3QuZm0iIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiAgICAgICAgICAgICBjb250ZW50PSJodHRwczovL3d3dy5sYXN0LmZtL3VzZXIvYWxleGlzdG91bG90dGUiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgICAgICAgICAgIGNvbnRlbnQ9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvYXIwLzAwYjQ4YzNiMGFiODQ0ZmVjNDhkYTc1OTk3OTgyMzRmLnBuZyIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZTp3aWR0aCIgICAgIGNvbnRlbnQ9IjEyMDAiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6aGVpZ2h0IiAgICBjb250ZW50PSI2MzAiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CiAgICA8bWV0YSBwcm9wZXJ0eT0iZmI6YXBwX2lkIiAgICAgICAgICBjb250ZW50PSIxOTI5NTkzMjQwNDc4NjEiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KCiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOnRpdGxlIiAgICAgICAgICBjb250ZW50PSJhbGV4aXN0b3Vsb3R0ZeKAmXMgTXVzaWMgUHJvZmlsZSB8IExhc3QuZm0iIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmRlc2NyaXB0aW9uIiAgICBjb250ZW50PSJMaXN0ZW4gdG8gbXVzaWMgZnJvbSBhbGV4aXN0b3Vsb3R0ZeKAmXMgbGlicmFyeSAoODgsNTI0IHRyYWNrcyBwbGF5ZWQpLiBhbGV4aXN0b3Vsb3R0ZeKAmXMgdG9wIGFydGlzdHM6IExvbmRvbiBFbGVrdHJpY2l0eSwgQm9yaXMgQnJlamNoYSwgSGlnaCBDb250cmFzdC4gR2V0IHlvdXIgb3duIG11c2ljIHByb2ZpbGUgYXQgTGFzdC5mbSwgdGhlIHdvcmxk4oCZcyBsYXJnZXN0IHNvY2lhbCBtdXNpYyBwbGF0Zm9ybS4iIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmltYWdlIiAgICAgICAgICBjb250ZW50PSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91L2FyMC8wMGI0OGMzYjBhYjg0NGZlYzQ4ZGE3NTk5Nzk4MjM0Zi5wbmciIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmNhcmQiICAgICAgICAgICBjb250ZW50PSJzdW1tYXJ5IiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpzaXRlIiAgICAgICAgICAgY29udGVudD0iQGxhc3RmbSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZz4KCiAgICAKCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKCiAgICAgICAgPHNjcmlwdD4oZnVuY3Rpb24oZSkgeyBlLmNsYXNzTmFtZSA9IGUuY2xhc3NOYW1lLnJlcGxhY2UoL1xibm8tanNcYi8sJ2pzJyk7IH0pKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk8L3NjcmlwdD4KCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKPHNjcmlwdCBpZD0iaW5pdGlhbC10ZWFsaXVtLWRhdGEiIGRhdGEtdGVhbGl1bS1kYXRhPSJ7JiMzNDtzaXRlU2VjdGlvbiYjMzQ7OiAmIzM0O3VzZXImIzM0OywgJiMzNDtwYWdlVHlwZSYjMzQ7OiAmIzM0O3VzZXJfZG9vciYjMzQ7LCAmIzM0O3BhZ2VOYW1lJiMzNDs6ICYjMzQ7dXNlci9vdmVydmlldyYjMzQ7LCAmIzM0O25hdGl2ZUV2ZW50VHJhY2tpbmcmIzM0OzogdHJ1ZSwgJiMzNDt1c2VyU3RhdGUmIzM0OzogJiMzNDtub3QgYXV0aGVudGljYXRlZCYjMzQ7LCAmIzM0O3VzZXJUeXBlJiMzNDs6ICYjMzQ7YW5vbiYjMzQ7LCAmIzM0O2RldmljZVR5cGUmIzM0OzogJiMzNDtkZXNrdG9wJiMzNDssICYjMzQ7aXBHZW8mIzM0OzogJiMzNDtOQyYjMzQ7LCAmIzM0O3BhZ2VWaWV3R3VpZCYjMzQ7OiAmIzM0OzczNDFmZDJhLTNjZmYtNDFjZi1iZGQ0LTA4ZDA3OGFlMDU4MCYjMzQ7LCAmIzM0O3Rlc3QmIzM0OzogJiMzNDt1cy1jb250cm9sLWNhdGFsb2d1ZV9yZWRlc2lnbiYjMzQ7fSI+PC9zY3JpcHQ+CjxzY3JpcHQ+CiAgICB2YXIgaW5pdGlhbFRlYWxpdW1FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luaXRpYWwtdGVhbGl1bS1kYXRhJyk7CiAgICB3aW5kb3cudXRhZ19kYXRhID0gSlNPTi5wYXJzZShpbml0aWFsVGVhbGl1bUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRlYWxpdW0tZGF0YScpKTsKPC9zY3JpcHQ+Cgo8c2NyaXB0IGFzeW5jIHNyYz0iaHR0cHM6Ly90YWdzLnRpcWNkbi5jb20vdXRhZy9jYnNpL2xhc3RmbXNpdGUvcHJvZC91dGFnLmpzIj48L3NjcmlwdD4KICAgICAgICAKCiAgICAgICAgPGxpbmsgcmVsPSJpY29uIiBocmVmPSIvc3RhdGljL2ltYWdlcy9mYXZpY29uLjcwMmIyMzliNjE5NC5pY28iPgoKICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9zdGF0aWMvc3R5bGVzL2J1aWxkLzY1NTlmOTJjYmUuNjU1OWY5MmNiZWRlLmNzcyIgZGF0YS1zdHlsZXNoZWV0LW5hbWU9ImRlZmF1bHRzIiBjaGFyc2V0PSJ1dGYtOCI+CgogICAgICAgIAogICAgICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9zdGF0aWMvc3R5bGVzL2J1aWxkL2NkNzQ2ZGI3YTUuY2Q3NDZkYjdhNWNkLmNzcyIgZGF0YS1zdHlsZXNoZWV0LW5hbWU9ImFwcCIgY2hhcnNldD0idXRmLTgiPgogICAgICAgIAoKICAgICAgICAKICAgIAogICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL3N0YXRpYy9zdHlsZXMvYnVpbGQvMmI1NjljMTAzMC4yYjU2OWMxMDMwNTQuY3NzIiBjaGFyc2V0PSJ1dGYtOCI+CiAgICAKCgogICAgICAgIAogICAgICAgICAgICAKICAgIAogICAgCiAgICAgICAgPHNjcmlwdCBhc3luYyBkYXRhLW1haW49Ii9zdGF0aWMvanMtYnVpbGQvaW5pdC42NTlkYWMwZTFhNmIiIHNyYz0iL3N0YXRpYy9qcy1idWlsZC9saWIvcmVxdWlyZS9yZXF1aXJlLjUzYmM2NGM3MjllOS5qcyI+PC9zY3JpcHQ+CiAgICAKCiAgICAgICAgCgogICAgICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4KICAgICAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPgogICAgICAgIDwhLS1baWYgbHQgSUUgOV0+CiAgICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0PgogICAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4KICAgICAgICA8IVtlbmRpZl0tLT4KICAgIDwvaGVhZD4KICAgIDxib2R5CiAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAKICAgICAgICAgICAgYW5odjEKICAgICAgICAgICAgbmFtZXNwYWNlLS11c2VyX292ZXJ2aWV3CiAgICAgICAgICAgIAogICAgICAgICIKICAgICAgICBkYXRhLXJlcXVpcmU9ImFkcy9wYWdlLWFkcyxhZHMvc2VhcmNobGlua3MscGxheWVyL3BsYXlsaW5rLWhhbmRsZXIsZGV2L2dyaWQtb3ZlcmxheSxkZXYvdG9nZ2xlLXZlcnNpb24sZGV2L2RlYnVnLWxvZyxkZXYvZGVidWctaW1hZ2UtYW5hbHlzaXMsZGV2L2pzLWxvZyxkZXYvYWRzLXRvZ2dsZSxjb21wb25lbnRzL2xpbmstYmxvY2ssY29tcG9uZW50cy9hamF4LWZvcm0sY29yZS9tZWRpYS1zaXplLWV2ZW50cy12MiIKICAgICAgICBkYXRhLXBsYXllci1zdXBwb3J0ZWQ9InRydWUiCiAgICAgICAgZGF0YS1wZXJzaXN0ZW50LXBsYXllci1zdXBwb3J0ZWQ9InRydWUiCiAgICAgICAgZGF0YS1jb3VudHJ5LWNvZGU9Ik5DIgogICAgICAgIGRhdGEtaW5pdGlhbC12aWV3LWd1aWQ9IjczNDFmZDJhLTNjZmYtNDFjZi1iZGQ0LTA4ZDA3OGFlMDU4MCIKICAgICAgICBkYXRhLWNic2ktcGxheWVyLWNvbmZpZz0iL3N0YXRpYy9jb25maWcvdmlkZW8tcGxheWVyLjlhZTg4YTEzNzNkYS54bWwiCiAgICAgICAgZGF0YS1zZW5zaXRpdmUtcGF0aC1yZWdleD0iXi8oLi4vKT8oZ29vZ2xlYzNlYTFiMjUyNzc0ZTFhYlwuaHRtbHxhY2NvdW50X2RlbGV0ZWR8aW5ib3h8am9pbnxsb2dpbnxsb3N0cGFzc3dvcmQoL2NvbmZpcm0pP3xzdGFmZnxzdWJzY3JpYmV8c3VwcG9ydCg/IS9pbWFnZXN8L3Nob3V0c3wvc2hvdXQpfHNldHRpbmdzLyhhY2NvdW50fHdlYnNpdGV8c3Vic2NyaXB0aW9ufHBhc3N3b3JkfGxvc3RwYXNzd29yZCl8dXNlci8uKz8vc3VwcG9ydCkoLy4qKT8vPyQiCiAgICAgICAgZGF0YS1mYWNlYm9vay1hcHAtaWQ9IjE5Mjk1OTMyNDA0Nzg2MSIKICAgICAgICBkYXRhLWZhY2Vib29rLXBsYWNlbWVudC1pZD0iMTk1NjEyNDUxMDIyMDgwXzIyMDUwMjE1NTE5OTc3NiIKICAgICAgICBkYXRhLWdvb2dsZS1tYXBzLWFwaS1rZXk9IkFJemFTeUJYNi1JRTNsejRQcEpVU0JWSW9fZFBiMEJBeU1naS1WRSIKICAgID4KICAgICAgICA8ZGl2CiAgICAgICAgICAgIGRhdGEtcmVxdWlyZT0iY29tcG9uZW50cy9sb2FkaW5nLWluZGljYXRvciIKICAgICAgICAgICAgZGF0YS1sb2FkaW5nLWluZGljYXRvci1jb3B5PSJMb2FkaW5n4oCmIgogICAgICAgID48L2Rpdj4KICAgICAgICA8ZGl2CiAgICAgICAgICAgIGRhdGEtcmVxdWlyZT0iY29tcG9uZW50cy9vcGVuLW1vZGFsLGNvbXBvbmVudHMvc3VibWl0LXRvLW1vZGFsLGNvbXBvbmVudHMvc2hvdy1hbGVydCIKICAgICAgICAgICAgZGF0YS1zaG93LWFsZXJ0LW9rLWNvcHk9Ik9rYXkiCiAgICAgICAgPjwvZGl2PgogICAgICAgIAoKICAgIAogICAgICAgIDxkaXYgY2xhc3M9InRvcC1iYXIiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgPHNlY3Rpb24KICAgICAgICBkYXRhLXJlcXVpcmU9InBsYXllci9jb250cm9scyxwbGF5ZXIvc3RhdHVzLHBsYXllci90cmFja2luZyIKICAgICAgICBkYXRhLXBsYXllci1zdGF0dXMtYWQtcGxheWluZz0iQWQgcGxheWluZyIKICAgICAgICBkYXRhLXBsYXllci1zdGF0dXMtaW5hY3RpdmU9IiZuYnNwOyIKICAgICAgICBkYXRhLXBsYXllci1zdGF0dXMtbG9hZGluZy1zcG90aWZ5PSJDb25uZWN0aW5nIFNwb3RpZnnigKYiCiAgICAgICAgZGF0YS1wbGF5ZXItc3RhdHVzLXNwb3RpZnktYXV0aC1lcnJvcj0iQ291bGQgbm90IGF1dGhlbnRpY2F0ZSB3aXRoIFNwb3RpZnkuIgoKICAgICAgICBkYXRhLXBsYXllci1lcnJvci1jYW5ub3QtcGxheS1pdGVtPSJDYW5ub3QgcGxheSB0aGF0IGl0ZW0uIgogICAgICAgIGRhdGEtcGxheWVyLWVycm9yLXRyYWNrLXVuYXZhaWxhYmxlPSJUcmFjayB1bmF2YWlsYWJsZS4iCiAgICAgICAgZGF0YS1wbGF5ZXItbW9kYWwtdGl0bGU9IlBsYXkgdmlkZW8iCgogICAgICAgIAoKICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgIHBsYXllci1iYXIKICAgICAgICAgICAgaW5hY3RpdmUKICAgICAgICAiCiAgICAgICAgYXJpYS1sYWJlbD0iYXVkaW8gcGxheWVyIgogICAgICAgIGFyaWEtZGlzYWJsZWQ9InRydWUiCiAgICA+CiAgICAgICAgPGRpdiBjbGFzcz0icGxheWVyLWJhci1pbm5lci13cmFwIj4KICAgICAgICAgICAgPGEgY2xhc3M9InBsYXllci1iYXItYXJ0d29yayBqcy1hcnR3b3JrIj4KICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9IiIgc3JjPSIvc3RhdGljL2ltYWdlcy9kZWZhdWx0cy9wbGF5ZXJfZGVmYXVsdF9hbGJ1bS40MzAyMjM3MDZiMTQucG5nIiBhbHQ9IiIgLz4KICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgPHNwYW4gY2xhc3M9IgogICAgICAgICAgICAgICAgcGxheWVyLWJhci1zb3VyY2UKICAgICAgICAgICAgICAgIHBsYXllci1iYXItc291cmNlLS1zcG90aWZ5CiAgICAgICAgICAgICI+UGxheWluZyB2aWEgU3BvdGlmeTwvc3Bhbj4KCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSIKICAgICAgICAgICAgICAgIHBsYXllci1iYXItc291cmNlCiAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXNvdXJjZS0teW91dHViZQogICAgICAgICAgICAiPlBsYXlpbmcgdmlhIFlvdVR1YmU8L3NwYW4+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzb3VyY2UtaW5mbyI+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InBsYXllci1iYXItcGxheWJhY2stb3B0aW9ucy1idXR0b24iCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1ob3ZlcgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9InBsYXllci1iYXItcGxheWJhY2stb3B0aW9ucyIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICBQbGF5YmFjayBvcHRpb25zCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBpZD0icGxheWVyLWJhci1wbGF5YmFjay1vcHRpb25zIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1wbGF5YmFjay1vcHRpb25zLXdyYXAKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWRhcmsKICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1wbGF5YmFjay1vcHRpb25zLXNwb3RpZnkKICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duLW1lbnUtbm9uLWludGVyYWN0aXZlLWl0ZW0tZGFyayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGxheWVyLWJhci1saXN0ZW5pbmctb24taGVhZGluZyI+TGlzdGVuaW5nIG9u4oCmPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItbGlzdGVuaW5nLW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWVyLWJhci1saXN0ZW5pbmctb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGJ1dHRvbiBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWl0ZW0tZGFyawogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtc3dpdGNoLWRldmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1wbGF5YmFjay1vcHRpb25zLXN3aXRjaC1kZXZpY2UKICAgICAgICAgICAgICAgICAgICAgICAgIj5Td2l0Y2ggU3BvdGlmeSBkZXZpY2U8L2J1dHRvbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1zb3VyY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWl0ZW0tZGFyawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItcGxheWJhY2stb3B0aW9ucy1leHRlcm5hbC1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgICAgICAgICAgICAgICAgPk9wZW4gaW4gU3BvdGlmeSBXZWIgUGxheWVyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGxpIGNsYXNzPSJtZW51LXNlcGFyYXRvci0tZGFyayI+CiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3NldHRpbmdzL3dlYnNpdGUiCiAgICAgICAgICAgIAogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWl0ZW0tZGFyawogICAgICAgICAgICAgICAgcGxheWVyLWJhci1wbGF5YmFjay1vcHRpb25zLXNldHRpbmdzCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIENoYW5nZSBwbGF5YmFjayBzb3VyY2UKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtZGFyawogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXBsYXliYWNrLW9wdGlvbnMteW91dHViZQogICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtaXRlbS1kYXJrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganMtc291cmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1wbGF5YmFjay1vcHRpb25zLWV4dGVybmFsLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgICA+T3BlbiBvbiBZb3VUdWJlIHdlYnNpdGU8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9Im1lbnUtc2VwYXJhdG9yLS1kYXJrIj4KICAgICAgICA8YQogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vc2V0dGluZ3Mvd2Vic2l0ZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtaXRlbS1kYXJrCiAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXBsYXliYWNrLW9wdGlvbnMtc2V0dGluZ3MKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgQ2hhbmdlIHBsYXliYWNrIHNvdXJjZQogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBsYXllci1iYXItY29udHJvbHMiPgoKICAgICAgICAgICAgICAgIDx1bCBhcmlhLWxhYmVsPSJjb250cm9scyIgY2xhc3M9Im1lZGlhLWNvbnRyb2xzIj4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganMtcHJldmlvdXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItYnRuLS1wcmV2aW91cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5YmFyQmFja1RyYWNrIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmV2aW91cwogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5LXBhdXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLWJ0bi0tcGxheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zdHJpbmctcGF1c2U9IlBhdXNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5YmFyUmVzdW1lVHJhY2siCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb24tcGF1c2U9IlBsYXliYXJQYXVzZVRyYWNrIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGF5CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLW5leHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItYnRuLS1uZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXliYXJTa2lwVHJhY2siCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5leHQKICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CgogICAgICAgICAgICAgICAgPGEgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXNraXBsaW5rCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItc2tpcGxpbmstLXlvdXR1YmUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3lvdXR1YmUtdmlkZW8iCiAgICAgICAgICAgICAgICA+U2tpcCB0byBZb3VUdWJlIHZpZGVvPC9hPgoKICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwbGF5ZXItYmFyLW5vdy1wbGF5aW5nIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBsYXllci1iYXItbm93LXBsYXlpbmctaW5uZXItd3JhcCI+CiAgICAgICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InBsYXllci1iYXItdHJhY2sganMtcGxheWVyLXN0YXR1cyIKICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0ibm93IHBsYXlpbmciCiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWF0b21pYz0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIExvYWRpbmcgcGxheWVy4oCmCiAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icGxheWVyLWJhci1lcnJvciBqcy1wbGF5ZXItZXJyb3IgcGxheWVyLWJhci1zdGF0dXMtLWhpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGxheWVyLWJhci1lcnJvci1tZXNzYWdlIGpzLXBsYXllci1lcnJvci1tZXNzYWdlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJwbGF5ZXItYmFyLXByb2dyZXNzLXdyYXAiPgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzcz0icGxheWVyLWJhci1wcm9ncmVzcyIKICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9InByb2dyZXNzIgogICAgICAgICAgICAgICAgcm9sZT0idGltZXIiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXByb2dyZXNzLXNsdWcKICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1wcm9ncmVzcy1zbHVnCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLXByb2dyZXNzLXJlbWFpbmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1wcm9ncmVzcy1yZW1haW5pbmcKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJyZW1haW5pbmciCiAgICAgICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBkYXRhLXJlcXVpcmU9InBsYXllci9zY3JvYmJsZS1jbGllbnQiPjwvZGl2PgogICAgPC9zZWN0aW9uPgoKICAgICAgICAgICAgICAgICAgICAKICAgIDxkaXYKICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgIG1hc3RoZWFkLXBvcHVwCiAgICAgICAgICAgIG1hc3RoZWFkLXBvcHVwLS1zcG90aWZ5LXNjcm9iYmxpbmcKICAgICAgICAgICAgbWFzdGhlYWQtcG9wdXAtLWhpZGRlbgogICAgICAgICIKICAgICAgICBkYXRhLXJlcXVpcmU9ImNvbXBvbmVudHMvc3BvdGlmeS1zY3JvYmJsaW5nLXByb21wdCxjb21wb25lbnRzL2FsZXJ0LWRpc21pc3NhYmxlLGNvbXBvbmVudHMvc3BvdGlmeS1zY3JvYmJsaW5nLWJhbm5lciIKICAgICAgICBkYXRhLXNwb3RpZnktc2NvYmJsaW5nLXN1Y2Nlc3MtbW9kYWw9Ii9zb2NpYWxtb2RhbC9zcG90aWZ5LXNjcm9iYmxpbmctc3VjY2VzcyIKICAgICAgICBkYXRhLXNwb3RpZnktc2NvYmJsaW5nLWZhaWwtbW9kYWw9Ii9zb2NpYWxtb2RhbC9zcG90aWZ5LXNjcm9iYmxpbmctZmFpbCIKICAgID4KICAgICAgICA8ZGl2IGNsYXNzPSJtYXN0aGVhZC1wb3B1cC1pbm5lciI+CiAgICAgICAgICAgIDxoMz5TY3JvYmJsZSBmcm9tIFNwb3RpZnk/PC9oMz4KICAgICAgICAgICAgPHA+Q29ubmVjdCB5b3VyIFNwb3RpZnkgYWNjb3VudCB0byB5b3VyIExhc3QuZm0gYWNjb3VudCBhbmQgc2Nyb2JibGUgZXZlcnl0aGluZyB5b3UgbGlzdGVuIHRvLCBmcm9tIGFueSBTcG90aWZ5IGFwcCBvbiBhbnkgZGV2aWNlIG9yIHBsYXRmb3JtLjwvcD4KICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4tcHJpbWFyeSBqcy1zZXR1cC1zcG90aWZ5LXNjcm9iYmxpbmciCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3NldHRpbmdzL2FwcGxpY2F0aW9ucyIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICBDb25uZWN0IHRvIFNwb3RpZnkKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgaHJlZj0iL25hZ2Jhci9kaXNtaXNzL3Nwb3RpZnktc2Nyb2JibGluZy1wcm9tcHQ/cGVyaW9kPXBlcm1hbmVudCIKICAgICAgICAgICAgICAgIGNsYXNzPSJtYXN0aGVhZC1wb3B1cC1jbG9zZSBqcy1hbGVydC1kaXNtaXNzYWJsZS1jbG9zZSIKICAgICAgICAgICAgICAgIGRhdGEtY2xvc2UtYWpheAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBEaXNtaXNzCiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIAoKICAgIDxkaXYgaWQ9ImNvbnRlbnQiIGNsYXNzPSJtYWluLWNvbnRlbnQiIHJvbGU9Im1haW4iIGFyaWEtbGl2ZT0icG9saXRlIj4KICAgICAgICAKICAgIAoKICAgIDxkaXYgaWQ9InRsbWRhdGEiIGhpZGRlbiBjbGFzcz0iaGlkZGVuIgogICAgICAgICBkYXRhLXRlYWxpdW0tZGF0YT0neyYjMzQ7c2l0ZVNlY3Rpb24mIzM0OzogJiMzNDt1c2VyJiMzNDssICYjMzQ7cGFnZVR5cGUmIzM0OzogJiMzNDt1c2VyX2Rvb3ImIzM0OywgJiMzNDtwYWdlTmFtZSYjMzQ7OiAmIzM0O3VzZXIvb3ZlcnZpZXcmIzM0OywgJiMzNDtuYXRpdmVFdmVudFRyYWNraW5nJiMzNDs6IHRydWUsICYjMzQ7dXNlclN0YXRlJiMzNDs6ICYjMzQ7bm90IGF1dGhlbnRpY2F0ZWQmIzM0OywgJiMzNDt1c2VyVHlwZSYjMzQ7OiAmIzM0O2Fub24mIzM0OywgJiMzNDtkZXZpY2VUeXBlJiMzNDs6ICYjMzQ7ZGVza3RvcCYjMzQ7LCAmIzM0O2lwR2VvJiMzNDs6ICYjMzQ7TkMmIzM0OywgJiMzNDt0ZXN0JiMzNDs6ICYjMzQ7dXMtY29udHJvbC1jYXRhbG9ndWVfcmVkZXNpZ24mIzM0O30nPgogICAgIDwvZGl2PgoKICAgICAgICA8ZGl2CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAKICAgIDxkaXYKICAgICAgICBkYXRhLXJlcXVpcmU9ImNvbXBvbmVudHMvZGlzY2xvc2UtYmFzZSxjb21wb25lbnRzL2Rpc2Nsb3NlLWF1dG9jbG9zZS12Mixjb21wb25lbnRzL2Rpc2Nsb3NlLWRyb3Bkb3duLXYyLGNvbXBvbmVudHMvZGlzY2xvc2UtZHJvcGRvd24tbG9jYXRpb24tcGlja2VyLXYyLGNvbXBvbmVudHMvZGlzY2xvc2UtY29sbGFwc2luZy1uYXYtdjIsY29tcG9uZW50cy9kaXNjbG9zZS1hcnR3b3JrLGNvbXBvbmVudHMvZGlzY2xvc2UtcmVtb3ZlLGNvbXBvbmVudHMvZGlzY2xvc2Utc2VhcmNoLGNvbXBvbmVudHMvZGlzY2xvc2UtaG92ZXItdjMsY29tcG9uZW50cy9kaXNjbG9zZS1zZWxlY3QsY29tcG9uZW50cy9kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzLGNvbXBvbmVudHMvZm9jdXMtY29udHJvbHMsY29tcG9uZW50cy9wcmV2ZW50LXJlc3VibWl0LXYyLGNvbXBvbmVudHMvZWRpdC1zY3JvYmJsZSxjb21wb25lbnRzL3RvZ2dsZS1idXR0b25zLGNvbXBvbmVudHMvY2xpY2stcHJveHksY29tcG9uZW50cy9ib29rbWFyay1ub3RpZmljYXRpb24iCiAgICA+PC9kaXY+CgogICAgCiAgICAgICAgCgogICAgPG5hdiBjbGFzcz0ibWFzdGhlYWQiPjxkaXYgY2xhc3M9Im1hc3RoZWFkLWlubmVyLXdyYXAiPjxkaXYgY2xhc3M9Im1hc3RoZWFkLWxvZ28iPjxzcGFuIGNsYXNzPSJtYXN0aGVhZC1sb2dvLWxvYWRpbmciPjwvc3Bhbj48YSBocmVmPSIvIj4gTGFzdC5mbTwvYT48L2Rpdj48YQogICAgICAgIGNsYXNzPSJtYXN0aGVhZC1zZWFyY2gtdG9nZ2xlIiBocmVmPSIvc2VhcmNoIiBkYXRhLWRpc2Nsb3NlLXNlYXJjaCBhcmlhLWNvbnRyb2xzPSJtYXN0aGVhZC1zZWFyY2giPlNlYXJjaDwvYT48Zm9ybQogICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtc2VhcmNoLWZvcm0gZGlzY2xvc2UtaGlkZSBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5ICIgaWQ9Im1hc3RoZWFkLXNlYXJjaCIgYWN0aW9uPSIvc2VhcmNoIiBtZXRob2Q9ImdldCI+PGRpdiBjbGFzcz0ibWFzdGhlYWQtc2VhcmNoLWlubmVyLXdyYXAiPjxsYWJlbCBmb3I9Im1hc3RoZWFkLXNlYXJjaC1maWVsZCIgY2xhc3M9InNyLW9ubHkiPlNlYXJjaDwvbGFiZWw+PGlucHV0CiAgICAgICAgICAgICAgICBpZD0ibWFzdGhlYWQtc2VhcmNoLWZpZWxkIiBjbGFzcz0ibWFzdGhlYWQtc2VhcmNoLWZpZWxkIiB0eXBlPSJ0ZXh0IiBuYW1lPSJxIiBwbGFjZWhvbGRlcj0iU2VhcmNoIGZvciBtdXNpY+KApiIgLz48YnV0dG9uIGNsYXNzPSJtYXN0aGVhZC1zZWFyY2gtc3VibWl0IiB0eXBlPSJzdWJtaXQiPlNlYXJjaDwvYnV0dG9uPjwvZGl2PjwvZm9ybT48ZGl2IGNsYXNzPSJ2aXNpYmxlLXhzIj48YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtaGFtYnVyZ2VyLXRvZ2dsZSAiIGRhdGEtZGlzY2xvc2UtYXV0b2Nsb3NlIGFyaWEtY29udHJvbHM9Im1hc3RoZWFkLW5hdiI+VG9nZ2xlIG5hdmlnYXRpb248L2J1dHRvbj48dWwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1uYXYgZGlzY2xvc2UtaGlkZSBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5ICIgYXJpYS1sYWJlbD0iUHJpbWFyeSBuYXZpZ2F0aW9uIiBpZD0ibWFzdGhlYWQtbmF2Ij48bGkgY2xhc3M9Im1hc3RoZWFkLW5hdi1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1uYXYtY29udHJvbCAiIGhyZWY9Ii9kYXNoYm9hcmQiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJsaXZlIj5MaXZlPC9hPjwvbGk+PGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtbmF2LWNvbnRyb2wgIiBocmVmPSIvbXVzaWMiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJtdXNpYyI+TXVzaWM8L2E+PC9saT48bGkgY2xhc3M9Im1hc3RoZWFkLW5hdi1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1uYXYtY29udHJvbCAiIGhyZWY9Ii9jaGFydHMiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJjaGFydHMiPkNoYXJ0czwvYT48L2xpPjxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPjxhCiAgICAgICAgICAgICAgICBjbGFzcz0iIG1hc3RoZWFkLW5hdi1jb250cm9sICIgaHJlZj0iL2V2ZW50cyIgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJOYXZpZ2F0aW9uTGluayIgZGF0YS1hbmFseXRpY3MtbGFiZWw9ImV2ZW50cyI+RXZlbnRzPC9hPjwvbGk+PGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtbmF2LWNvbnRyb2wgIiBocmVmPSIvZmVhdHVyZXMiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJmZWF0dXJlcyI+RmVhdHVyZXM8L2E+PC9saT4KICAgIAogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9Im1hc3RoZWFkLW5hdi1pdGVtIj4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1hc3RoZWFkLW5hdi1jb250cm9sIgogICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9zdWJzY3JpYmUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InN1YnNjcmliZSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlVzZXJNZW51Q2xpY2siCiAgICAgICAgICAgICAgICA+U3Vic2NyaWJlPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgIDxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9Im1hc3RoZWFkLW5hdi1jb250cm9sIgogICAgICAgICAgICAgICAgaHJlZj0iL2pvaW4iCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlNpZ25VcENsaWNrIgogICAgICAgICAgICA+Sm9pbjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9Im1hc3RoZWFkLW5hdi1jb250cm9sIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbiIKICAgICAgICAgICAgPkxvZ2luPC9hPgogICAgICAgIDwvbGk+CiAgICAKPC91bD48L2Rpdj48ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiBuYXZsaXN0IG5hdmxpc3QtLW1vcmUgbWFzdGhlYWQtbmF2IGhpZGRlbi14cyAiIGRhdGEtcmVxdWlyZT0iY29tcG9uZW50cy9wcmltYXJ5LW5hdiIgZGF0YS1tb3JlLXN0cmluZz0iTW9yZeKApiI+PHVsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJqcy1uYXZsaXN0LWl0ZW1zIG5hdmxpc3QtaXRlbXMiIGFyaWEtbGFiZWw9IlByaW1hcnkgbmF2aWdhdGlvbiI+PGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtbmF2LWNvbnRyb2wgIiBocmVmPSIvZGFzaGJvYXJkIiBkYXRhLWFuYWx5dGljcy1hY3Rpb249Ik5hdmlnYXRpb25MaW5rIiBkYXRhLWFuYWx5dGljcy1sYWJlbD0ibGl2ZSI+TGl2ZTwvYT48L2xpPjxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPjxhCiAgICAgICAgICAgICAgICBjbGFzcz0iIG1hc3RoZWFkLW5hdi1jb250cm9sICIgaHJlZj0iL211c2ljIiBkYXRhLWFuYWx5dGljcy1hY3Rpb249Ik5hdmlnYXRpb25MaW5rIiBkYXRhLWFuYWx5dGljcy1sYWJlbD0ibXVzaWMiPk11c2ljPC9hPjwvbGk+PGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtbmF2LWNvbnRyb2wgIiBocmVmPSIvY2hhcnRzIiBkYXRhLWFuYWx5dGljcy1hY3Rpb249Ik5hdmlnYXRpb25MaW5rIiBkYXRhLWFuYWx5dGljcy1sYWJlbD0iY2hhcnRzIj5DaGFydHM8L2E+PC9saT48bGkgY2xhc3M9Im1hc3RoZWFkLW5hdi1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1uYXYtY29udHJvbCAiIGhyZWY9Ii9ldmVudHMiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJldmVudHMiPkV2ZW50czwvYT48L2xpPjxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPjxhCiAgICAgICAgICAgICAgICBjbGFzcz0iIG1hc3RoZWFkLW5hdi1jb250cm9sICIgaHJlZj0iL2ZlYXR1cmVzIiBkYXRhLWFuYWx5dGljcy1hY3Rpb249Ik5hdmlnYXRpb25MaW5rIiBkYXRhLWFuYWx5dGljcy1sYWJlbD0iZmVhdHVyZXMiPkZlYXR1cmVzPC9hPjwvbGk+PC91bD48L2Rpdj48dWwKICAgICAgICAgICAgY2xhc3M9IiBzaXRlLWF1dGggc2l0ZS1hdXRoLS1hbm9uIGhpZGRlbi14cyAiPgogICAgPGxpIGNsYXNzPSJzaXRlLWF1dGgtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSJzaXRlLWF1dGgtY29udHJvbCIgaHJlZj0iL2pvaW4iIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU2lnblVwQ2xpY2siPkpvaW48L2E+PC9saT48bGkgY2xhc3M9InNpdGUtYXV0aC1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9InNpdGUtYXV0aC1jb250cm9sIiBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luIj5Mb2dpbjwvYT48L2xpPgo8L3VsPjwvZGl2PjwvbmF2PgoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgCgoKICAgIAogICAgCgoKICAgIAoKICAgIAogICAgCiAgICAKICAgIDxkaXYKICAgICAgICBjbGFzcz0ibmFnLWJhciBuYWctYmFyLS1wbHliYXItbWFzdGhlYWQtcmVsZWFzZS13YXJuaW5nIgogICAgICAgIAogICAgICAgIHJvbGU9InN0YXR1cyIKICAgID4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAKICAgICAgICAgICAgPHAgY2xhc3M9Im5hZy1iYXItbWVzc2FnZSI+CiAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICBBIG5ldyB2ZXJzaW9uIG9mIExhc3QuZm0gaXMgYXZhaWxhYmxlLCB0byBrZWVwIGV2ZXJ5dGhpbmcgcnVubmluZyBzbW9vdGhseSwgcGxlYXNlIDxhIGhyZWY9ImphdmFzY3JpcHQ6d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpIj5yZWxvYWQ8L2E+IHRoZSBzaXRlLgogICAgCiAgICAKICAgICAgICAgICAgPC9wPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCiAgICAKCiAgICAKCiAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgCgoKICAgIAogICAgCgoKCgoKCgogICAgCiAgICAKCiAgICA8aGVhZGVyIGNsYXNzPSIKICAgICAgICBoZWFkZXIKICAgICAgICAKICAgICAgICAgICAgaGVhZGVyLS13aXRoLWF2YXRhcgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICBoZWFkZXItLW92ZXJ2aWV3CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIGhlYWRlci0tdXNlcgogICAgICAgIAogICAgICAgIAogICAgIj4KICAgICAgICAKICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGhlYWRlci1iYWNrZ3JvdW5kCiAgICAgICAgICAgICAgICAgICAgaGVhZGVyLWJhY2tncm91bmQtLWhhcy1pbWFnZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybChodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91L2FyMC83ZTc1MzFkYjNmNWI0MTA4YTU0YzBkNDFmYTFhNDYzMS5qcGcpOyIKICAgICAgICAgICAgPjwvZGl2PgogICAgICAgIAoKICAgICAgICAKICAgIAoKCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLWlubmVyLXdyYXAiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCgogICAgCgogICAgPGRpdiBjbGFzcz0iaGVhZGVyLWF2YXRhciI+CiAgICAgICAgPGRpdiBjbGFzcz0iZXhwYW5kLWltYWdlLXNob3ctb24tZm9jdXMgaGVhZGVyLWF2YXRhci1pbm5lci13cmFwIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIDxzcGFuCiAgICAKICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgIGF2YXRhcgogICAgICAgICAgICAKICAgICAgICAiCiAgICAgICAgCiAgICA+CiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvYXZhdGFyMTcwcy8wMGI0OGMzYjBhYjg0NGZlYzQ4ZGE3NTk5Nzk4MjM0Zi5wbmciCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgYWx0PSJBdmF0YXIgZm9yIGFsZXhpc3RvdWxvdHRlIgogICAgICAgICAgICAKICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KCiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9ImhlYWRlci1pbmZvLXByaW1hcnkgaGVhZGVyLWluZm8tcHJpbWFyeS0td2l0aC1jb2x1bW5zIj4KCiAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLWluZm8tcHJpbWFyeS1jb2wxIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLXRpdGxlLWNvbHVtbi1lbGxpcHNpcy13cmFwIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci10aXRsZS1sYWJlbC13cmFwIj4KICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9ImhlYWRlci10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPmFsZXhpc3RvdWxvdHRlPC9hPgogICAgICAgICAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLXN0YXR1cy1Ob25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaGVhZGVyLXRpdGxlLXNlY29uZGFyeSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhlYWRlci10aXRsZS1kaXNwbGF5LW5hbWUiPmFsCiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoZWFkZXItc2Nyb2JibGUtc2luY2UiPuKAoiBzY3JvYmJsaW5nIHNpbmNlIDE0IFNlcCAyMDA2CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICA8bmF2CiAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIG5hdmxpc3QKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlY29uZGFyeS1uYXYKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBuYXZsaXN0LS1tb3JlCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAiCiAgICAgICAgYXJpYS1sYWJlbD0iU2Vjb25kYXJ5IG5hdmlnYXRpb24iCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtcmVxdWlyZT0iY29tcG9uZW50cy9jb2xsYXBzaW5nLW5hdi12MiIKICAgICAgICAgICAgZGF0YS1tb3JlLXN0cmluZz0iTW9yZeKApiIKICAgICAgICAKICAgID4KICAgICAgICA8dWwgY2xhc3M9Im5hdmxpc3QtaXRlbXMganMtbmF2bGlzdC1pdGVtcyI+CiAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0tb3ZlcnZpZXcKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmstLWFjdGl2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgT3ZlcnZpZXcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij4oY3VycmVudCBzZWN0aW9uKTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT48bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLXdlZWsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpc3RlbmluZy1yZXBvcnQvd2VlayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0ZW5pbmcgUmVwb3J0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPjxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0tbGlicmFyeQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaWJyYXJ5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvbGk+PGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmxpc3QtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLS1mb2xsb3dpbmcKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2ZvbGxvd2luZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb2xsb3dpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT48bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLWZvbGxvd2VycwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvZm9sbG93ZXJzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvbGxvd2VycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPjxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0tbG92ZWQKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xvdmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvdmVkIFRyYWNrcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPjxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0tb2JzZXNzaW9ucwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvb2JzZXNzaW9ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYnNlc3Npb25zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvbGk+PGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmxpc3QtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLS1ldmVudHMKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2V2ZW50cyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT48bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLW5laWdoYm91cnMKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL25laWdoYm91cnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTmVpZ2hib3VycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPjxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0tdGFncwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvdGFncyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUYWdzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvbGk+PGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmxpc3QtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLS1zaG91dGJveAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvc2hvdXRib3giCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgU2hvdXRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvbGk+CiAgICAgICAgPC91bD4KICAgIDwvbmF2PgoKICAgIAoKICAgICAgICA8L2Rpdj4KCiAgICAgICAgCiAgICAKICAgIAoKICAgIAoKICAgIAogICAgCiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBoZWFkZXItZmVhdHVyZWQtdHJhY2sKICAgICAgICAgICAgICAgIGhlYWRlci1pbmZvLXByaW1hcnktY29sMgogICAgICAgICAgICAgICAgZmVhdHVyZWQtaXRlbS0tdHJ1bmNhdGVkCiAgICAgICAgICAgICAgICBmZWF0dXJlZC1pdGVtLS1yaWdodAogICAgICAgICAgICAKICAgICAgICAgICAgZmVhdHVyZWQtaXRlbQogICAgICAgICI+CiAgICAgICAgICAgIAogICAgPGRpdiBjbGFzcz0iZmVhdHVyZWQtaXRlbS1hcnQiPgogICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy85YzA5NGQ5ZmE2YzA0NDlhYjU0ZjE3OWU5YjI2OGUwNS5qcGciCiAgICAgICAgICAgIGFsdD0iU3luY29wYXRlZCBDaXR5IChTcGVjaWFsIEphcGFuIEVkaXRpb24pIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgaW1hZ2Utb3ZlcmxheS1wbGF5bGluay1saW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVdrYXpJYm8zOFFVIgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9IldrYXpJYm8zOFFVIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1Xa2F6SWJvMzhRVSIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9Ik1heWJlIEkgV2FzIFdyb25nIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkvXy9NYXliZStJK1dhcytXcm9uZyIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IkxvbmRvbiBFbGVrdHJpY2l0eSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5IG9uIHlvdXR1YmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iRmVhdHVyZWRUcmFja1BsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlZC1pdGVtLWRldGFpbHMiPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJmZWF0dXJlZC1pdGVtLWhlYWRpbmciPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBUb3AgVHJhY2sKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L18vTWF5YmUrSStXYXMrV3JvbmciCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJGZWF0dXJlZFRyYWNrVHJhY2tOYW1lIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iZmVhdHVyZWQtaXRlbS1uYW1lIgogICAgICAgICAgICAKICAgICAgICA+TWF5YmUgSSBXYXMgV3Jvbmc8L2E+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5IgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iRmVhdHVyZWRUcmFja0FydGlzdE5hbWUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJmZWF0dXJlZC1pdGVtLWFydGlzdCIKICAgICAgICAgICAgCiAgICAgICAgPkxvbmRvbiBFbGVrdHJpY2l0eTwvYT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIAoKCiAgICAgICAgCiAgICAKCiAgICA8L2Rpdj4KICAgIDxkaXYKICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgIGhlYWRlci1pbmZvLXNlY29uZGFyeQogICAgICAgICAgICAKICAgICAgICAiCiAgICA+CiAgICAgICAgCiAgICAgICAgCiAgICA8dWwgY2xhc3M9ImhlYWRlci1tZXRhZGF0YSI+CgogICAgICAgIAoKICAgICAgICAKICAgIAogICAgCiAgICAKICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSIKICAgICAgICAgICAgICAgIGhlYWRlci1tZXRhZGF0YS1pdGVtCiAgICAgICAgICAgICAgICBoZWFkZXItbWV0YWRhdGEtaXRlbS0tc2Nyb2JibGVzCiAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImhlYWRlci1tZXRhZGF0YS10aXRsZSI+U2Nyb2JibGVzPC9oND4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJoZWFkZXItbWV0YWRhdGEtZGlzcGxheSIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlRoYXQmIzM5O3MgYW4gYXZlcmFnZSBvZiAxOCBzY3JvYmJsZXMgcGVyIGRheSEiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+PGEgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+ODgsNTI0PC9hPjwvcD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSIKICAgICAgICAgICAgICAgIGhlYWRlci1tZXRhZGF0YS1pdGVtCiAgICAgICAgICAgICAgICBoZWFkZXItbWV0YWRhdGEtaXRlbS0tYXJ0aXN0cwogICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJoZWFkZXItbWV0YWRhdGEtdGl0bGUiPkFydGlzdHM8L2g0PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImhlYWRlci1tZXRhZGF0YS1kaXNwbGF5IgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPjxhIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvYXJ0aXN0cyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+Miw1MDQ8L2E+PC9wPgogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9IgogICAgICAgICAgICAgICAgaGVhZGVyLW1ldGFkYXRhLWl0ZW0KICAgICAgICAgICAgICAgIGhlYWRlci1tZXRhZGF0YS1pdGVtLS1sb3ZlZAogICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJoZWFkZXItbWV0YWRhdGEtdGl0bGUiPkxvdmVkIHRyYWNrczwvaDQ+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaGVhZGVyLW1ldGFkYXRhLWRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+PGEgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbG92ZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPjEsNjY2PC9hPjwvcD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIAoKCiAgICAgICAgCgogICAgICAgIAoKICAgICAgICAKICAgICAgICAKCiAgICAgICAgCgogICAgICAgIAogICAgICAgIAogICAgPC91bD4KCiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2hlYWRlcj4KCgoKICAgIAogICAgPGRpdiBpZD0ibWFudGxlX3NraW4iIGNsYXNzPSJhZGFwdGl2ZS1za2luLWNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0iYWRhcHRpdmUtc2tpbi13cmFwcGVyIj4KICAgICAgICAgICAgPGRpdiBpZD0iYWRTa2luTGVmdCIgY2xhc3M9ImFkYXB0aXZlLXNraW4tbGVmdCI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9ImFkU2tpblJpZ2h0IiBjbGFzcz0iYWRhcHRpdmUtc2tpbi1yaWdodCI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBpZD0ic2tpbiIgZGF0YS1hZD0ic2tpbiIgY2xhc3M9InNraW4gbGFzdGZtLWFkIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7c2tpbiYjMzQ7LCAmIzM0O3NpemVzJiMzNDs6IFtbMTYwMCwgMTAwMF1dLCAmIzM0O3RhcmdldGluZyYjMzQ7OiB7JiMzNDtwb3MmIzM0OzogJiMzNDt0b3AmIzM0O30sICYjMzQ7Y29sbGFwc2VfYmVmb3JlX2xvYWQmIzM0OzogdHJ1ZX0nPjwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgCgoKICAgICAgICAKCiAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJjb250ZW50LXRvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC10b3AtaW5uZXItd3JhcCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBpZD0ibGVhZGVyX3RvcCIgZGF0YS1hZD0ibGVhZGVyX3RvcCIgY2xhc3M9ImxlYWRlcl90b3AgbGFzdGZtLWFkIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7bGVhZGVyX3RvcCYjMzQ7LCAmIzM0O3NpemVzJiMzNDs6IFtbNzI4LCA5MF0sIFs5NzAsIDY2XSwgWzk3MCwgMjUwXSwgWzcyOCwgOTFdXSwgJiMzNDt0YXJnZXRpbmcmIzM0OzogeyYjMzQ7cG9zJiMzNDs6ICYjMzQ7dG9wJiMzNDt9LCAmIzM0O2FkYmxvY2tfbWVzc2FnZSYjMzQ7OiB0cnVlfSc+PC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgY29udGVudC10b3AtbG93ZXIiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKICAgICAgICAKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBwYWdlLWNvbnRlbnQiPgogICAgICAgIAogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWFpbiI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9InByb2ZpbGUtbW9iaWxlLWZlYXR1cmVkLXRyYWNrIj4KICAgICAgICAKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgICAgIDxkaXYgY2xhc3M9IgogICAgICAgICAgICBfYnVmZmVyCiAgICAgICAgICAgIGZlYXR1cmVkLWl0ZW0KICAgICAgICAiPgogICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9ImZlYXR1cmVkLWl0ZW0tYXJ0Ij4KICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvOWMwOTRkOWZhNmMwNDQ5YWI1NGYxNzllOWIyNjhlMDUuanBnIgogICAgICAgICAgICBhbHQ9IlN5bmNvcGF0ZWQgQ2l0eSAoU3BlY2lhbCBKYXBhbiBFZGl0aW9uKSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGltYWdlLW92ZXJsYXktcGxheWxpbmstbGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1Xa2F6SWJvMzhRVSIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJXa2F6SWJvMzhRVSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9V2theklibzM4UVUiCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJNYXliZSBJIFdhcyBXcm9uZyIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L18vTWF5YmUrSStXYXMrV3JvbmciCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJMb25kb24gRWxla3RyaWNpdHkiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5IgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IkZlYXR1cmVkVHJhY2tQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZWQtaXRlbS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iZmVhdHVyZWQtaXRlbS1oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgVG9wIFRyYWNrCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2g0PgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9fL01heWJlK0krV2FzK1dyb25nIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iRmVhdHVyZWRUcmFja1RyYWNrTmFtZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImZlYXR1cmVkLWl0ZW0tbmFtZSIKICAgICAgICAgICAgCiAgICAgICAgPk1heWJlIEkgV2FzIFdyb25nPC9hPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IkZlYXR1cmVkVHJhY2tBcnRpc3ROYW1lIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iZmVhdHVyZWQtaXRlbS1hcnRpc3QiCiAgICAgICAgICAgIAogICAgICAgID5Mb25kb24gRWxla3RyaWNpdHk8L2E+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAKCgogICAgICAgIAogICAgCgogICAgPC9kaXY+CgoKICAgICAgICAgICAgICAgIAogICAgCgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWNlbnQtdHJhY2tzLXNlY3Rpb24iCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyZml4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8aDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGV4dC1jb2xvdXItbGluayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+UmVjZW50IFRyYWNrczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKCiAgICAKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAoKICAgIDx0YWJsZQogICAgICAgIAogICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgY2hhcnRsaXN0CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtcGxheQogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtbW9iaWxlLXBsYXkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC0td2l0aC1pbWFnZQogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtbG92ZWQKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2hhcnRsaXN0LS13aXRoLWFydGlzdAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2hhcnRsaXN0LS13aXRoLW1vcmUKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC0td2l0aC1idXlsaW5rcwogICAgICAgICAgICAKICAgICAgICAiCiAgICA+CiAgICAgICAgPHRoZWFkIGNsYXNzPSJzci1vbmx5Ij4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHRoPlBsYXk8L3RoPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsYnVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dGg+TG92ZWQ8L3RoPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBUcmFjayBuYW1lCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RoPgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0aD5BcnRpc3QgbmFtZTwvdGg+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dGg+QnV5PC90aD4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0aD5PcHRpb25zPC90aD4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0aD5UaW1lc3RhbXA8L3RoPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgPC90aGVhZD4KICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJlY2VudHRyYWNrLWlkPSIxNTZkM2RmODNhOGNmNTQyYWNiMjBhZjExZmRkZTg4ZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aW1lc3RhbXA9IjE1NjI5MDQ5MTQiCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9ImFjMjRmM2FlYWM1NjhkYjA4NzgyNzNiMWI5OThmMTZlIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0RydW1zb3VuZCsmYW1wOytCYXNzbGluZStTbWl0aC9XYWxsK09mK1NvdW5kIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy81MDMyZGIzY2NkYzk0MWQ5YmQ0OGI5NmM5YThiNmM3Mi5qcGciCiAgICAgICAgICAgIGFsdD0iV2FsbCBPZiBTb3VuZCIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI0MWVlZWU3OGNiN2NmNTFiZjZhODQ3ZmYzYjBmNGE0NSIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI0MWVlZWU3OGNiN2NmNTFiZjZhODQ3ZmYzYjBmNGE0NSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RydW1zb3VuZCsmYW1wOytCYXNzbGluZStTbWl0aC9fL1dhbGwrT2YrU291bmQrKENvbnRpbnVvdXMrREorbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IldhbGwgT2YgU291bmQgKENvbnRpbnVvdXMgREogbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5XYWxsIE9mIFNvdW5kIChDb250aW51b3VzIERKIG1peCk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RydW1zb3VuZCsmYW1wOytCYXNzbGluZStTbWl0aCIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkRydW1zb3VuZCAmYW1wOyBCYXNzbGluZSBTbWl0aCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+RHJ1bXNvdW5kICZhbXA7IEJhc3NsaW5lIFNtaXRoPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTAxOTE4MGI0LWNmODUtNDZjYy1iNTJlLTdlMWMzM2ZmMDIwZSIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRHJ1bXNvdW5kKyZhbXA7K0Jhc3NsaW5lK1NtaXRoL18vV2FsbCtPZitTb3VuZCsoQ29udGludW91cytESittaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy0wMTkxODBiNC1jZjg1LTQ2Y2MtYjUyZS03ZTFjMzNmZjAyMGUiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtMTY5NzJlYWEtZWY3MS00MWYzLTgwYmItZWI2NzE4YTI1Njk5IgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0RydW1zb3VuZCsmYW1wOytCYXNzbGluZStTbWl0aC9fL1dhbGwrT2YrU291bmQrKENvbnRpbnVvdXMrREorbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS0xNjk3MmVhYS1lZjcxLTQxZjMtODBiYi1lYjY3MThhMjU2OTkiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RydW1zb3VuZCsmYW1wOytCYXNzbGluZStTbWl0aC9fL1dhbGwrT2YrU291bmQrKENvbnRpbnVvdXMrREorbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0RydW1zb3VuZCsmYW1wOytCYXNzbGluZStTbWl0aC9fL1dhbGwrT2YrU291bmQrKENvbnRpbnVvdXMrREorbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRHJ1bXNvdW5kKyZhbXA7K0Jhc3NsaW5lK1NtaXRoIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRHJ1bXNvdW5kKyZhbXA7K0Jhc3NsaW5lK1NtaXRoIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJGcmlkYXkgMTIgSnVsIDIwMTksIDM6MTVwbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDTCoGhvdXJzIGFnbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJlY2VudHRyYWNrLWlkPSJkYTBkZWNmOGQ5MTJmZjE1NDAzNDQwMWRhOGVhNGZiOCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aW1lc3RhbXA9IjE1NjI5MDQ5MTMiCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9IjQxZmQzZTgwNGFhY2YyY2U4ZWZlYzMwYTM5N2MwZjg3IgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL01ldHJpay9MaWZlKy0rVGhyaWxscyIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iTGlmZSAtIFRocmlsbHMiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iN2Q5ZDRkMWNjYjI3YzE1YzU5Y2M0MzJiNWM2NTQ3NzgiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iN2Q5ZDRkMWNjYjI3YzE1YzU5Y2M0MzJiNWM2NTQ3NzgiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9NZXRyaWsvXy9FbGVjdHJpYytFY2hvIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iRWxlY3RyaWMgRWNobyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5FbGVjdHJpYyBFY2hvPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9NZXRyaWsiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJNZXRyaWsiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPk1ldHJpazwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy05NjI2NTQ5ZC1lZTU2LTQzYWItOWQ5Zi1hMzdiZjAxY2QzYWIiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL01ldHJpay9fL0VsZWN0cmljK0VjaG8vK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTk2MjY1NDlkLWVlNTYtNDNhYi05ZDlmLWEzN2JmMDFjZDNhYiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1iYmNkMzhhNy0wNTgxLTRjZjgtYjBjMi05YzQ4ZjRkZTlkZGMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvTWV0cmlrL18vRWxlY3RyaWMrRWNoby8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1iYmNkMzhhNy0wNTgxLTRjZjgtYjBjMi05YzQ4ZjRkZTlkZGMiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL01ldHJpay9fL0VsZWN0cmljK0VjaG8iCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9NZXRyaWsvXy9FbGVjdHJpYytFY2hvIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9NZXRyaWsiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9NZXRyaWsiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IkZyaWRheSAxMiBKdWwgMjAxOSwgMzoxNXBtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNMKgaG91cnMgYWdvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmVjZW50dHJhY2staWQ9IjEzOTBmMGVhZDM5MGZmYThjYWNiZjI5NGExOWJlZWY5IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRpbWVzdGFtcD0iMTU2MjkwMzg5MCIKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iNDFmZDNlODA0YWFjZjJjZThlZmVjMzBhMzk3YzBmODciCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvTWV0cmlrL0xpZmUrLStUaHJpbGxzIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgYWx0PSJMaWZlIC0gVGhyaWxscyIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI3ZDlkNGQxY2NiMjdjMTVjNTljYzQzMmI1YzY1NDc3OCIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI3ZDlkNGQxY2NiMjdjMTVjNTljYzQzMmI1YzY1NDc3OCIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL01ldHJpay9fL0VsZWN0cmljK0VjaG8iCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJFbGVjdHJpYyBFY2hvIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkVsZWN0cmljIEVjaG88L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL01ldHJpayIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Ik1ldHJpayIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TWV0cmlrPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWVkYWViZWI4LWZkMTUtNGQ4YS05ZGY4LWJkYTNhOGJmYTJjNSIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvTWV0cmlrL18vRWxlY3RyaWMrRWNoby8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtZWRhZWJlYjgtZmQxNS00ZDhhLTlkZjgtYmRhM2E4YmZhMmM1IgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTgwOGY5MjJkLWM0ODctNDhjYi1iMmRkLTg5MTI2NWIxMmRjNSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9NZXRyaWsvXy9FbGVjdHJpYytFY2hvLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTgwOGY5MjJkLWM0ODctNDhjYi1iMmRkLTg5MTI2NWIxMmRjNSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTWV0cmlrL18vRWxlY3RyaWMrRWNobyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL01ldHJpay9fL0VsZWN0cmljK0VjaG8iCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL01ldHJpayIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL01ldHJpayIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZSIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iRnJpZGF5IDEyIEp1bCAyMDE5LCAyOjU4cG0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0wqBob3VycyBhZ28KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yZWNlbnR0cmFjay1pZD0iYjVhNGMxZWVlOGMxOTJlODkxYjNlNjdiOWQwNDBhOGMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGltZXN0YW1wPSIxNTYyOTAzODg3IgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSJjYzdhZWM1NTA0ODU4YThlMTBiNzQxMzBmYThjM2Y1OCIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9Zb3VzZWYvQnkrVGhlK1dheStZb3UrRGFuY2UiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2M2ZjU5YzFlNWU3MjQwYTRjMGQ0MjdhYmQ3MWYzZGJiIgogICAgICAgICAgICBhbHQ9IkJ5IFRoZSBXYXkgWW91IERhbmNlIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImM4ZDM5MjNmODA4ZGViNjUxYTc2ZWM5YmViOWM2NTQxIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImM4ZDM5MjNmODA4ZGViNjUxYTc2ZWM5YmViOWM2NTQxIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvWW91c2VmL18vRm9yK3RoZStUZXJyYWNlcyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkZvciB0aGUgVGVycmFjZXMiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Rm9yIHRoZSBUZXJyYWNlczwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvWW91c2VmIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iWW91c2VmIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Zb3VzZWY8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtN2M0YzQ3NjctNzIzZC00MGM3LWI5ODQtYmUwMDQ3MTc3ZGQzIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Zb3VzZWYvXy9Gb3IrdGhlK1RlcnJhY2VzLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy03YzRjNDc2Ny03MjNkLTQwYzctYjk4NC1iZTAwNDcxNzdkZDMiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtMTRiNWEzZGItY2Y5MS00NGVhLTg5YTEtMzJhYzJlNWY5NjZlIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1lvdXNlZi9fL0Zvcit0aGUrVGVycmFjZXMvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtMTRiNWEzZGItY2Y5MS00NGVhLTg5YTEtMzJhYzJlNWY5NjZlIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Zb3VzZWYvXy9Gb3IrdGhlK1RlcnJhY2VzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvWW91c2VmL18vRm9yK3RoZStUZXJyYWNlcyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvWW91c2VmIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvWW91c2VmIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJGcmlkYXkgMTIgSnVsIDIwMTksIDI6NThwbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDTCoGhvdXJzIGFnbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJlY2VudHRyYWNrLWlkPSIxN2UzOTBjNTdmNmJhOGUyYTdjOTliMDAxOTE1YjRlYyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aW1lc3RhbXA9IjE1NjI5MDI5MjciCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9ImNjN2FlYzU1MDQ4NThhOGUxMGI3NDEzMGZhOGMzZjU4IgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL1lvdXNlZi9CeStUaGUrV2F5K1lvdStEYW5jZSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iQnkgVGhlIFdheSBZb3UgRGFuY2UiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYzhkMzkyM2Y4MDhkZWI2NTFhNzZlYzliZWI5YzY1NDEiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYzhkMzkyM2Y4MDhkZWI2NTFhNzZlYzliZWI5YzY1NDEiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Zb3VzZWYvXy9Gb3IrdGhlK1RlcnJhY2VzIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iRm9yIHRoZSBUZXJyYWNlcyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Gb3IgdGhlIFRlcnJhY2VzPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Zb3VzZWYiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJZb3VzZWYiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPllvdXNlZjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy0yOGM3MzQ0My1mOWZiLTQ5MTItOWNlMC0zMzE4OWMyNjhiOWMiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1lvdXNlZi9fL0Zvcit0aGUrVGVycmFjZXMvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTI4YzczNDQzLWY5ZmItNDkxMi05Y2UwLTMzMTg5YzI2OGI5YyIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0yOGNiNmJmOC1kNDc0LTQyMTUtOWUwMC04YjhjNmMwNjlkNzgiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvWW91c2VmL18vRm9yK3RoZStUZXJyYWNlcy8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS0yOGNiNmJmOC1kNDc0LTQyMTUtOWUwMC04YjhjNmMwNjlkNzgiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1lvdXNlZi9fL0Zvcit0aGUrVGVycmFjZXMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Zb3VzZWYvXy9Gb3IrdGhlK1RlcnJhY2VzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Zb3VzZWYiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Zb3VzZWYiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IkZyaWRheSAxMiBKdWwgMjAxOSwgMjo0MnBtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNMKgaG91cnMgYWdvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJjaGFydGxpc3Qtcm93LS1pbnRlcmxpc3QtYWQgYnVmZmVyLXN0YW5kYXJkIiBkYXRhLWFkLWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ibW9iaWxlX3Bvc18xIiBkYXRhLWFkPSJtb2JpbGVfcG9zXzEiIGNsYXNzPSJtb2JpbGVfcG9zXzEgbGFzdGZtLWFkLW1vYmlsZSIgZGF0YS1hZHMtcGxhY2VtZW50PSd7JiMzNDtpZCYjMzQ7OiAmIzM0O21vYmlsZV9wb3NfMSYjMzQ7LCAmIzM0O3NpemVzJiMzNDs6IFtbMzAwLCAyNTBdLCBbMzIwLCA1MF1dLCAmIzM0O2lzX21vYmlsZSYjMzQ7OiB0cnVlLCAmIzM0O3RhcmdldGluZyYjMzQ7OiB7JiMzNDtwb3MmIzM0OzogJiMzNDsxJiMzNDt9LCAmIzM0O2FkYmxvY2tfbWVzc2FnZSYjMzQ7OiB0cnVlfSc+PC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxwIGNsYXNzPSJtcHUtc3Vic2NyaXB0aW9uLXVwc2VsbCBtcHUtc3Vic2NyaXB0aW9uLXVwc2VsbC0tbW9iaWxlX3Bvc18xIj4KICAgICAgICAgICAgICAgIERvbid0IHdhbnQgdG8gc2VlIGFkcz8gPGEgaHJlZj0iL3N1YnNjcmliZSIgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJTdWJzY3JpYmVDbGljayIgZGF0YS1hbmFseXRpY3MtbGFiZWw9IkFkVXBzZWxsQ1RBIj5TdWJzY3JpYmUgbm93PC9hPgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJlY2VudHRyYWNrLWlkPSIzZTg1ZDI0ZGUzNTM5NGM1M2QxOGE4NmJhMWNmMWI2OCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aW1lc3RhbXA9IjE1NjI5MDI4NzYiCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9IjE1YTJjNTg3NGJlMTE4Y2ZhNjY1ZjkzZmUyZmYzNGQ3IgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL1Bhc2NhbCtGRU9TL1NleCtvbit0aGUrYmVhdCIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iU2V4IG9uIHRoZSBiZWF0IgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjhkNTZhYjBmMjU5NzhlNmNhZWMzMGJmOWEyNTU4NjA5IgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iOGQ1NmFiMGYyNTk3OGU2Y2FlYzMwYmY5YTI1NTg2MDkiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvUGFzY2FsK0ZFT1MvXy9TZXgrT24rVGhlK0JlYXQrKFNhc2NoYStTb25pZG8rUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iU2V4IE9uIFRoZSBCZWF0IChTYXNjaGEgU29uaWRvIFJlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5TZXggT24gVGhlIEJlYXQgKFNhc2NoYSBTb25pZG8gUmVtaXgpPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9QYXNjYWwrRkVPUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBhc2NhbCBGRU9TIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5QYXNjYWwgRkVPUzwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1hMDU0NDZiYy1kZGFjLTQ5OTMtOGFmNS04YTY2YjVlN2U4NjEiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1Bhc2NhbCtGRU9TL18vU2V4K09uK1RoZStCZWF0KyhTYXNjaGErU29uaWRvK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtYTA1NDQ2YmMtZGRhYy00OTkzLThhZjUtOGE2NmI1ZTdlODYxIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTlhNmY1MWFjLWEwYTQtNGIwNS1hYjVlLWI0MTM4Y2Y3NTNkMCIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9QYXNjYWwrRkVPUy9fL1NleCtPbitUaGUrQmVhdCsoU2FzY2hhK1NvbmlkbytSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtOWE2ZjUxYWMtYTBhNC00YjA1LWFiNWUtYjQxMzhjZjc1M2QwIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9QYXNjYWwrRkVPUy9fL1NleCtPbitUaGUrQmVhdCsoU2FzY2hhK1NvbmlkbytSZW1peCkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9QYXNjYWwrRkVPUy9fL1NleCtPbitUaGUrQmVhdCsoU2FzY2hhK1NvbmlkbytSZW1peCkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1Bhc2NhbCtGRU9TIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvUGFzY2FsK0ZFT1MiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IkZyaWRheSAxMiBKdWwgMjAxOSwgMjo0MXBtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNMKgaG91cnMgYWdvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmVjZW50dHJhY2staWQ9IjhiMzFiMzk4MjgwMDUyZWJhMDQxYWRjNTE5YzllMjljIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRpbWVzdGFtcD0iMTU2MjkwMjQyMCIKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iMTVhMmM1ODc0YmUxMThjZmE2NjVmOTNmZTJmZjM0ZDciCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvUGFzY2FsK0ZFT1MvU2V4K29uK3RoZStiZWF0IiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgYWx0PSJTZXggb24gdGhlIGJlYXQiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iOGQ1NmFiMGYyNTk3OGU2Y2FlYzMwYmY5YTI1NTg2MDkiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI4ZDU2YWIwZjI1OTc4ZTZjYWVjMzBiZjlhMjU1ODYwOSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9QYXNjYWwrRkVPUy9fL1NleCtPbitUaGUrQmVhdCsoU2FzY2hhK1NvbmlkbytSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJTZXggT24gVGhlIEJlYXQgKFNhc2NoYSBTb25pZG8gUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlNleCBPbiBUaGUgQmVhdCAoU2FzY2hhIFNvbmlkbyBSZW1peCk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1Bhc2NhbCtGRU9TIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGFzY2FsIEZFT1MiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlBhc2NhbCBGRU9TPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWNkMGY5YzkxLWI1NzktNDZhNi04MzY1LTA2MmEyNTViNDJhZSIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvUGFzY2FsK0ZFT1MvXy9TZXgrT24rVGhlK0JlYXQrKFNhc2NoYStTb25pZG8rUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1jZDBmOWM5MS1iNTc5LTQ2YTYtODM2NS0wNjJhMjU1YjQyYWUiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtYjc4YzVlOTAtMDQ4Ni00Y2IzLWJjZjktNWEwMDZmMDYxMjI4IgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1Bhc2NhbCtGRU9TL18vU2V4K09uK1RoZStCZWF0KyhTYXNjaGErU29uaWRvK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1iNzhjNWU5MC0wNDg2LTRjYjMtYmNmOS01YTAwNmYwNjEyMjgiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1Bhc2NhbCtGRU9TL18vU2V4K09uK1RoZStCZWF0KyhTYXNjaGErU29uaWRvK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1Bhc2NhbCtGRU9TL18vU2V4K09uK1RoZStCZWF0KyhTYXNjaGErU29uaWRvK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvUGFzY2FsK0ZFT1MiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9QYXNjYWwrRkVPUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZSIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iRnJpZGF5IDEyIEp1bCAyMDE5LCAyOjMzcG0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0wqBob3VycyBhZ28KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yZWNlbnR0cmFjay1pZD0iNzY5ZTMxMTRlYjNkMGZlMzM2MzI0N2M0NDVhNTI1MzQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGltZXN0YW1wPSIxNTYyOTAyNDAwIgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lZGl0LXNjcm9iYmxlLWlkPSJlYzNlZDVmN2E2YWRiM2E5MjViOTQ1M2MzYzExZjk3MyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9EdWIrWi9Fc2NhcGUrUGxhbiIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iRXNjYXBlIFBsYW4iCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNDA5NTI5Y2I5Mzk1ZmJkMWVlNDA5MTYyNTI2MDc0MTEiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNDA5NTI5Y2I5Mzk1ZmJkMWVlNDA5MTYyNTI2MDc0MTEiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EdWIrWi9fL1J1bm5pbiIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlJ1bm5pbiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5SdW5uaW48L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0R1YitaIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iRHViIFoiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkR1YiBaPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWI5NTk5ZGU3LTY5MTItNGMyYi04ZmY2LWZkOGFhOGM3NjdmYiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRHViK1ovXy9SdW5uaW4vK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWI5NTk5ZGU3LTY5MTItNGMyYi04ZmY2LWZkOGFhOGM3NjdmYiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS01ZjYxZjE4OS1hYzc5LTRiNjEtODg0OC1mMDQ2NTY4ZTkzMGIiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRHViK1ovXy9SdW5uaW4vK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNWY2MWYxODktYWM3OS00YjYxLTg4NDgtZjA0NjU2OGU5MzBiIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EdWIrWi9fL1J1bm5pbiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0R1YitaL18vUnVubmluIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EdWIrWiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0R1YitaIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC10aW1lc3RhbXAtLWxhbmctZW4KICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJGcmlkYXkgMTIgSnVsIDIwMTksIDI6MzNwbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDTCoGhvdXJzIGFnbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJlY2VudHRyYWNrLWlkPSI0ZGYxMWRmYTcyNWY5NGMwZDcxMWM0ZTZiNWMzZjE0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aW1lc3RhbXA9IjE1NjI5MDIwNjQiCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVkaXQtc2Nyb2JibGUtaWQ9ImVjM2VkNWY3YTZhZGIzYTkyNWI5NDUzYzNjMTFmOTczIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0R1YitaL0VzY2FwZStQbGFuIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgYWx0PSJFc2NhcGUgUGxhbiIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI0MDk1MjljYjkzOTVmYmQxZWU0MDkxNjI1MjYwNzQxMSIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI0MDk1MjljYjkzOTVmYmQxZWU0MDkxNjI1MjYwNzQxMSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0R1YitaL18vUnVubmluIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUnVubmluIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlJ1bm5pbjwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRHViK1oiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJEdWIgWiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+RHViIFo8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtZDc4OGM0MDQtMzM1OS00NWI1LWFkYWItZmE4N2E4MjdkNTc5IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9EdWIrWi9fL1J1bm5pbi8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtZDc4OGM0MDQtMzM1OS00NWI1LWFkYWItZmE4N2E4MjdkNTc5IgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTQzNmM3MzMzLTZlM2YtNDI5Mi1hMmM2LTg2OTY5MzRiOWI2YiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9EdWIrWi9fL1J1bm5pbi8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS00MzZjNzMzMy02ZTNmLTQyOTItYTJjNi04Njk2OTM0YjliNmIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0R1YitaL18vUnVubmluIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRHViK1ovXy9SdW5uaW4iCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0R1YitaIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRHViK1oiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXRpbWVzdGFtcC0tbGFuZy1lbgogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IkZyaWRheSAxMiBKdWwgMjAxOSwgMjoyN3BtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNcKgaG91cnMgYWdvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmVjZW50dHJhY2staWQ9ImMyNjEwZDUwMjU5N2M5ZDNiNjlkYWU5ZDdlMzZlMjJiIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRpbWVzdGFtcD0iMTU2MjkwMjA0NCIKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZWRpdC1zY3JvYmJsZS1pZD0iN2UxMzUyMmNiMWU3OWUyYWY3NGEzNjc3NjNlNjRkZTgiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvQm9yZGVybGluZS9GbGFzaGVzK29mK3RoZStGdXR1cmUiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzE4YjNmNGM5MjZjNDViZTIxNWJkZWY5MjBlNzIyNTI3LmpwZyIKICAgICAgICAgICAgYWx0PSJGbGFzaGVzIG9mIHRoZSBGdXR1cmUiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iOGQ0OGJlMTgyYjI4ZGZkMTU2MTE2M2I0YWViODZiY2EiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iOGQ0OGJlMTgyYjI4ZGZkMTU2MTE2M2I0YWViODZiY2EiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JkZXJsaW5lL18vVGhlK1dhdGNoKyhmZWF0LitDb3BwYSkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJUaGUgV2F0Y2ggKGZlYXQuIENvcHBhKSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5UaGUgV2F0Y2ggKGZlYXQuIENvcHBhKTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yZGVybGluZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkJvcmRlcmxpbmUiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkJvcmRlcmxpbmU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtMDU2NmQyNzctNGFmMy00Y2M2LWFmYWMtZjM3Y2UyZWJkM2ZmIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Cb3JkZXJsaW5lL18vVGhlK1dhdGNoKyhmZWF0LitDb3BwYSkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTA1NjZkMjc3LTRhZjMtNGNjNi1hZmFjLWYzN2NlMmViZDNmZiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS01NTliMTRiNi00MDUyLTRkMzctYWVlYi0wMTdmYTFhZDQyNjMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yZGVybGluZS9fL1RoZStXYXRjaCsoZmVhdC4rQ29wcGEpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTU1OWIxNGI2LTQwNTItNGQzNy1hZWViLTAxN2ZhMWFkNDI2MyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yZGVybGluZS9fL1RoZStXYXRjaCsoZmVhdC4rQ29wcGEpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yZGVybGluZS9fL1RoZStXYXRjaCsoZmVhdC4rQ29wcGEpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JkZXJsaW5lIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yZGVybGluZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZSIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtdGltZXN0YW1wLS1sYW5nLWVuCiAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iRnJpZGF5IDEyIEp1bCAyMDE5LCAyOjI3cG0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1wqBob3VycyBhZ28KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKICAgICAgICA8L3Rib2R5PgogICAgPC90YWJsZT4KCgoKICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1vcmUtbGluayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTW9yZSB0cmFja3MKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgPGRpdiBjbGFzcz0iam9pbi1jdGEgbGluay1ibG9jayBqcy1saW5rLWJsb2NrIj4KICAgICAgICA8ZGl2IGNsYXNzPSJqb2luLWN0YS1kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgIDxoMz5XYW50IHlvdXIgb3duIHBlcnNvbmFsaXNlZCBtdXNpYyBjaGFydHM/PC9oMz4KICAgICAgICAgICAgPHA+Sm9pbiBMYXN0LmZtIGZvciBmcmVlIHRvIGdldCB5b3VyIG93biBtdXNpYyBwcm9maWxlITwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvam9pbiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgYnRuLXByaW1hcnkKICAgICAgICAgICAgICAgIGJ0bi1iaWcKICAgICAgICAgICAgICAgIGpvaW4tY3RhLWJ1dHRvbgogICAgICAgICAgICAgICAgbGluay1ibG9jay10YXJnZXQKICAgICAgICAgICAgIgogICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IkpvaW5DVEFDbGljayIKICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9IldhbnRZb3VyT3duTXVzaWNDaGFydHMiCiAgICAgICAgPkpvaW4gTGFzdC5mbTwvYT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvam9pbiIKICAgICAgICAgICAgY2xhc3M9ImpzLWxpbmstYmxvY2stY292ZXItbGluayBsaW5rLWJsb2NrLWNvdmVyLWxpbmsiCiAgICAgICAgICAgIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iSm9pbkNUQUNsaWNrIgogICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iV2FudFlvdXJPd25NdXNpY0NoYXJ0cyIKICAgICAgICA+PC9hPgogICAgPC9kaXY+CgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICA8c2VjdGlvbgogICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2aXNpYmxlLXhzCiAgICAgICAgICAgIAogICAgICAgICIKICAgID4KICAgICAgICA8aDI+TGlzdGVuaW5nIFJlcG9ydHM8L2gyPgoKICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSJsaXN0ZW5pbmctcmVwb3J0LXByb21vIGxpc3RlbmluZy1yZXBvcnQtcHJvbW8tLXdlZWsiCiAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saXN0ZW5pbmctcmVwb3J0L3dlZWsiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsaXN0ZW5pbmctcmVwb3J0LXByb21vLXRpdGxlIj5MYXN0LndlZWs8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGlzdGVuaW5nLXJlcG9ydC1wcm9tby1kYXRlIj4KICAgICAgICAgICAgICAgICAgICAyOCBKdW4g4oCUIDQgSnVsCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAKCiAgICAgICAgCgogICAgICAgIDxhCiAgICAgICAgICAgIGNsYXNzPSJsaXN0ZW5pbmctcmVwb3J0LXByb21vIGxpc3RlbmluZy1yZXBvcnQtcHJvbW8tLXllYXIiCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpc3RlbmluZy1yZXBvcnQveWVhciIKICAgICAgICA+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsaXN0ZW5pbmctcmVwb3J0LXByb21vLXRpdGxlIj5MYXN0LnllYXI8L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsaXN0ZW5pbmctcmVwb3J0LXByb21vLWRhdGUiPjIwMTg8L3NwYW4+CiAgICAgICAgPC9hPgogICAgPC9zZWN0aW9uPgoKCiAgICAgICAgICAgICAgICA8c2VjdGlvbgogICAgICAgICAgICAgICAgICAgIGlkPSJ0b3AtYXJ0aXN0cyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQtaXRlbXMtc2VjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLXdpdGgtY29udHJvbAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGgyPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGV4dC1jb2xvdXItbGluayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9hcnRpc3RzP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWZpbHRlci1tb3JlLWxpbms9ImFydGlzdHNfcmFuZ2UiCiAgICAgICAgICAgICAgICAgICAgICAgID5Ub3AgQXJ0aXN0czwvYT4KICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAKICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWJ1dHRvbgogICAgICAgICAgICAgICAgc2VjdGlvbi1jb250cm9sCiAgICAgICAgICAgICIKICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImFydGlzdHNfcmFuZ2UiCiAgICAgICAgICAgIGRhdGEtZGlzY2xvc2Utc2VsZWN0CiAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJyaWdodC02IGJvdHRvbSIKICAgICAgICA+PHNwYW4gY2xhc3M9InNyLW9ubHkiPlNvcnRlZCBieTogPC9zcGFuPkxhc3QgMzAgZGF5czwvYnV0dG9uPgogICAgCiAgICAKICAgIDx1bAogICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgCiAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICIKICAgICAgICBpZD0iYXJ0aXN0c19yYW5nZSIKICAgICAgICAKICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYWxpZ249InJpZ2h0IgogICAgICAgIAogICAgPgogICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGU/YXJ0aXN0c19kYXRlX3ByZXNldD1MQVNUXzdfREFZUyN0b3AtYXJ0aXN0cyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJ0aWFsLWhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL3BhcnRpYWwvYXJ0aXN0cz9hcnRpc3RzX2RhdGVfcHJlc2V0PUxBU1RfN19EQVlTIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPkxhc3QgNyBkYXlzPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0tLXNlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZT9hcnRpc3RzX2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyN0b3AtYXJ0aXN0cyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJ0aWFsLWhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL3BhcnRpYWwvYXJ0aXN0cz9hcnRpc3RzX2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID5MYXN0IDMwIGRheXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZT9hcnRpc3RzX2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyN0b3AtYXJ0aXN0cyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJ0aWFsLWhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL3BhcnRpYWwvYXJ0aXN0cz9hcnRpc3RzX2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID5MYXN0IDkwIGRheXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZT9hcnRpc3RzX2RhdGVfcHJlc2V0PUxBU1RfMTgwX0RBWVMjdG9wLWFydGlzdHMiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFydGlhbC1ocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9wYXJ0aWFsL2FydGlzdHM/YXJ0aXN0c19kYXRlX3ByZXNldD1MQVNUXzE4MF9EQVlTIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPkxhc3QgMTgwIGRheXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZT9hcnRpc3RzX2RhdGVfcHJlc2V0PUxBU1RfMzY1X0RBWVMjdG9wLWFydGlzdHMiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFydGlhbC1ocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9wYXJ0aWFsL2FydGlzdHM/YXJ0aXN0c19kYXRlX3ByZXNldD1MQVNUXzM2NV9EQVlTIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPkxhc3QgMzY1IGRheXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZT9hcnRpc3RzX2RhdGVfcHJlc2V0PUFMTCN0b3AtYXJ0aXN0cyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJ0aWFsLWhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL3BhcnRpYWwvYXJ0aXN0cz9hcnRpc3RzX2RhdGVfcHJlc2V0PUFMTCIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID5BbGwgdGltZTwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgoKICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidWZmZXItc3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmVxdWlyZT0iY29tcG9uZW50cy9sYXp5LWZpbHRlciIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWZpbHRlci1vcHRpb25zPSJhcnRpc3RzX3JhbmdlIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCgoKCgoKCgogICAgCiAgICAgICAgCiAgICAKICAgIAogICAgPG9sCiAgICAgICAgY2xhc3M9IgogICAgICAgICAgICBncmlkLWl0ZW1zCiAgICAgICAgICAgIAogICAgICAgICAgICBncmlkLWl0ZW1zLS1udW1iZXJlZAogICAgICAgICAgICBncmlkLWl0ZW1zLS1iaWctZmlyc3QKICAgICAgICAiCiAgICA+PGxpIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBncmlkLWl0ZW1zLWl0ZW0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1pdGVtLS1iaWcKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1pbWFnZQogICAgICAgICAgICAgICAgICAgIGpzLWxpbmstYmxvY2sKICAgICAgICAgICAgICAgICAgICBsaW5rLWJsb2NrCiAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1pbWFnZS1pbWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91L2F2YXRhcjMwMHMvYmExYjhhNmQ0NWYzNGI3ZWI2M2YxM2E2YjVkMWJkNjguanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iSW1hZ2UgZm9yICdMb25kb24gRWxla3RyaWNpdHknIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkLWl0ZW1zLWl0ZW0tZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJncmlkLWl0ZW1zLWl0ZW0tbWFpbi10ZXh0IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5IgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0ibGluay1ibG9jay10YXJnZXQiCiAgICAgICAgICAgIAogICAgICAgID5Mb25kb24gRWxla3RyaWNpdHk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLWF1eC10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5P2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgMzAgcGxheXMKICAgICAgICA8L2E+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWxpbmstYmxvY2stY292ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmstYmxvY2stY292ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiaW5kZXg9Ii0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+PGxpIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBncmlkLWl0ZW1zLWl0ZW0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1pbWFnZQogICAgICAgICAgICAgICAgICAgIGpzLWxpbmstYmxvY2sKICAgICAgICAgICAgICAgICAgICBsaW5rLWJsb2NrCiAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1pbWFnZS1pbWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91L2F2YXRhcjMwMHMvYTE0NTlkODIyNDlhNDJlZWEwOTZhMjg0MDAwN2RjY2UuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iSW1hZ2UgZm9yICdCb3JpcyBCcmVqY2hhJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLW1haW4tdGV4dCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJsaW5rLWJsb2NrLXRhcmdldCIKICAgICAgICAgICAgCiAgICAgICAgPkJvcmlzIEJyZWpjaGE8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLWF1eC10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYT9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgIDE1IHBsYXlzCiAgICAgICAgPC9hPgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganMtbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT48bGkgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGdyaWQtaXRlbXMtaXRlbQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBncmlkLWl0ZW1zLWNvdmVyLWltYWdlCiAgICAgICAgICAgICAgICAgICAganMtbGluay1ibG9jawogICAgICAgICAgICAgICAgICAgIGxpbmstYmxvY2sKICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmlkLWl0ZW1zLWNvdmVyLWltYWdlLWltYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvYXZhdGFyMzAwcy85ZTJhMTgwNTYxZDk0NDlhYTY5YzE1ZmI1OGYxYWZiZS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJJbWFnZSBmb3IgJ0hpZ2ggQ29udHJhc3QnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkLWl0ZW1zLWl0ZW0tZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJncmlkLWl0ZW1zLWl0ZW0tbWFpbi10ZXh0IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvSGlnaCtDb250cmFzdCIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImxpbmstYmxvY2stdGFyZ2V0IgogICAgICAgICAgICAKICAgICAgICA+SGlnaCBDb250cmFzdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJncmlkLWl0ZW1zLWl0ZW0tYXV4LXRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9IaWdoK0NvbnRyYXN0P2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgMTQgcGxheXMKICAgICAgICA8L2E+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvbXVzaWMvSGlnaCtDb250cmFzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1saW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPjxsaSBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1pdGVtCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGdyaWQtaXRlbXMtY292ZXItaW1hZ2UKICAgICAgICAgICAgICAgICAgICBqcy1saW5rLWJsb2NrCiAgICAgICAgICAgICAgICAgICAgbGluay1ibG9jawogICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQtaXRlbXMtY292ZXItaW1hZ2UtaW1hZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS9hdmF0YXIzMDBzL2JhZjAwZWQ3ZjY2YzQ4YTA4YzE3YWU0NGQxOWQ5MjdmLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkltYWdlIGZvciAnQXBocm9kaXRlJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLW1haW4tdGV4dCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0FwaHJvZGl0ZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImxpbmstYmxvY2stdGFyZ2V0IgogICAgICAgICAgICAKICAgICAgICA+QXBocm9kaXRlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImdyaWQtaXRlbXMtaXRlbS1hdXgtdGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0FwaHJvZGl0ZT9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgIDEyIHBsYXlzCiAgICAgICAgPC9hPgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL211c2ljL0FwaHJvZGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1saW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPjxsaSBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1pdGVtCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGdyaWQtaXRlbXMtY292ZXItaW1hZ2UKICAgICAgICAgICAgICAgICAgICBqcy1saW5rLWJsb2NrCiAgICAgICAgICAgICAgICAgICAgbGluay1ibG9jawogICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQtaXRlbXMtY292ZXItaW1hZ2UtaW1hZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS9hdmF0YXIzMDBzL2MzOTM4YjI1OTg2NTQ0ZjM5Y2JjMTJhNzk3MmMyNWFiLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkltYWdlIGZvciAnRHJ1bXNvdW5kICZhbXA7IEJhc3NsaW5lIFNtaXRoJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLW1haW4tdGV4dCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RydW1zb3VuZCsmYW1wOytCYXNzbGluZStTbWl0aCIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImxpbmstYmxvY2stdGFyZ2V0IgogICAgICAgICAgICAKICAgICAgICA+RHJ1bXNvdW5kICZhbXA7IEJhc3NsaW5lIFNtaXRoPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImdyaWQtaXRlbXMtaXRlbS1hdXgtdGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0RydW1zb3VuZCsmYW1wOytCYXNzbGluZStTbWl0aD9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgIDEyIHBsYXlzCiAgICAgICAgPC9hPgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL211c2ljL0RydW1zb3VuZCsmYW1wOytCYXNzbGluZStTbWl0aCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1saW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgPC9vbD4KCgoKICAgIAoKICAgIAogICAgPHAgY2xhc3M9Im1vcmUtbGluayI+CiAgICAgICAgPGEgZGF0YS1sYXp5LWZpbHRlci1tb3JlLWxpbmsgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9hcnRpc3RzP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyI+CiAgICAgICAgICAgIE1vcmUgYXJ0aXN0cwogICAgICAgIDwvYT4KICAgIDwvcD4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L3NlY3Rpb24+CgogICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBpZD0ibW9iaWxlX3Bvc18yIiBkYXRhLWFkPSJtb2JpbGVfcG9zXzIiIGNsYXNzPSJtb2JpbGVfcG9zXzIgbGFzdGZtLWFkLW1vYmlsZSIgZGF0YS1hZHMtcGxhY2VtZW50PSd7JiMzNDtpZCYjMzQ7OiAmIzM0O21vYmlsZV9wb3NfMiYjMzQ7LCAmIzM0O3NpemVzJiMzNDs6IFtbMzAwLCAyNTBdXSwgJiMzNDtpc19tb2JpbGUmIzM0OzogdHJ1ZSwgJiMzNDt0YXJnZXRpbmcmIzM0OzogeyYjMzQ7cG9zJiMzNDs6ICYjMzQ7MiYjMzQ7fSwgJiMzNDthZGJsb2NrX21lc3NhZ2UmIzM0OzogdHJ1ZX0nPjwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8cCBjbGFzcz0ibXB1LXN1YnNjcmlwdGlvbi11cHNlbGwgbXB1LXN1YnNjcmlwdGlvbi11cHNlbGwtLW1vYmlsZV9wb3NfMiI+CiAgICAgICAgICAgICAgICBEb24ndCB3YW50IHRvIHNlZSBhZHM/IDxhIGhyZWY9Ii9zdWJzY3JpYmUiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3Vic2NyaWJlQ2xpY2siIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBZFVwc2VsbENUQSI+U3Vic2NyaWJlIG5vdzwvYT4KICAgICAgICAgICAgPC9wPgogICAgICAgIAogICAgCgoKICAgICAgICAgICAgICAgIDxzZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgaWQ9InRvcC1hbGJ1bXMiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBncmlkLWl0ZW1zLXNlY3Rpb24KICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi13aXRoLWNvbnRyb2wKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxoMj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRleHQtY29sb3VyLWxpbmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvYWxidW1zP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWZpbHRlci1tb3JlLWxpbms9ImFsYnVtc19yYW5nZSIKICAgICAgICAgICAgICAgICAgICAgICAgPlRvcCBBbGJ1bXM8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgCiAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1idXR0b24KICAgICAgICAgICAgICAgIHNlY3Rpb24tY29udHJvbAogICAgICAgICAgICAiCiAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJhbGJ1bXNfcmFuZ2UiCiAgICAgICAgICAgIGRhdGEtZGlzY2xvc2Utc2VsZWN0CiAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJyaWdodC02IGJvdHRvbSIKICAgICAgICA+PHNwYW4gY2xhc3M9InNyLW9ubHkiPlNvcnRlZCBieTogPC9zcGFuPkxhc3QgMzAgZGF5czwvYnV0dG9uPgogICAgCiAgICAKICAgIDx1bAogICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgCiAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICIKICAgICAgICBpZD0iYWxidW1zX3JhbmdlIgogICAgICAgIAogICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hbGlnbj0icmlnaHQiCiAgICAgICAgCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZT9hbGJ1bXNfZGF0ZV9wcmVzZXQ9TEFTVF83X0RBWVMjdG9wLWFsYnVtcyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJ0aWFsLWhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL3BhcnRpYWwvYWxidW1zP2FsYnVtc19kYXRlX3ByZXNldD1MQVNUXzdfREFZUyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID5MYXN0IDcgZGF5czwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtLS1zZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGU/YWxidW1zX2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyN0b3AtYWxidW1zIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcnRpYWwtaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvcGFydGlhbC9hbGJ1bXM/YWxidW1zX2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID5MYXN0IDMwIGRheXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZT9hbGJ1bXNfZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTI3RvcC1hbGJ1bXMiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFydGlhbC1ocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9wYXJ0aWFsL2FsYnVtcz9hbGJ1bXNfZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPkxhc3QgOTAgZGF5czwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlP2FsYnVtc19kYXRlX3ByZXNldD1MQVNUXzE4MF9EQVlTI3RvcC1hbGJ1bXMiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFydGlhbC1ocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9wYXJ0aWFsL2FsYnVtcz9hbGJ1bXNfZGF0ZV9wcmVzZXQ9TEFTVF8xODBfREFZUyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID5MYXN0IDE4MCBkYXlzPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGU/YWxidW1zX2RhdGVfcHJlc2V0PUxBU1RfMzY1X0RBWVMjdG9wLWFsYnVtcyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJ0aWFsLWhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL3BhcnRpYWwvYWxidW1zP2FsYnVtc19kYXRlX3ByZXNldD1MQVNUXzM2NV9EQVlTIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPkxhc3QgMzY1IGRheXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZT9hbGJ1bXNfZGF0ZV9wcmVzZXQ9QUxMI3RvcC1hbGJ1bXMiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFydGlhbC1ocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9wYXJ0aWFsL2FsYnVtcz9hbGJ1bXNfZGF0ZV9wcmVzZXQ9QUxMIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPkFsbCB0aW1lPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCgogICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ1ZmZlci1zdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yZXF1aXJlPSJjb21wb25lbnRzL2xhenktZmlsdGVyIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktZmlsdGVyLW9wdGlvbnM9ImFsYnVtc19yYW5nZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAoKCgoKCgoKICAgIAogICAgICAgIAogICAgCiAgICAKICAgIDxvbAogICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgZ3JpZC1pdGVtcwogICAgICAgICAgICAKICAgICAgICAgICAgZ3JpZC1pdGVtcy0tbnVtYmVyZWQKICAgICAgICAgICAgZ3JpZC1pdGVtcy0tYmlnLWZpcnN0CiAgICAgICAgIgogICAgPjxsaSBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1pdGVtCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQtaXRlbXMtaXRlbS0tYmlnCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGdyaWQtaXRlbXMtY292ZXItaW1hZ2UKICAgICAgICAgICAgICAgICAgICBqcy1saW5rLWJsb2NrCiAgICAgICAgICAgICAgICAgICAgbGluay1ibG9jawogICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQtaXRlbXMtY292ZXItaW1hZ2UtaW1hZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS9hdmF0YXIzMDBzLzRhOTM3YTJhZjU2ODRjMTBhNTdhZDE2YTRjZjlhNGI0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkltYWdlIGZvciAnU3luY29wYXRlZCBDaXR5JyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLW1haW4tdGV4dCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9TeW5jb3BhdGVkK0NpdHkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJsaW5rLWJsb2NrLXRhcmdldCIKICAgICAgICAgICAgCiAgICAgICAgPlN5bmNvcGF0ZWQgQ2l0eTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJncmlkLWl0ZW1zLWl0ZW0tYXV4LXRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJncmlkLWl0ZW1zLWl0ZW0tYXV4LWJsb2NrIgogICAgICAgICAgICAKICAgICAgICA+TG9uZG9uIEVsZWt0cmljaXR5PC9hPgogICAgICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L1N5bmNvcGF0ZWQrQ2l0eT9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgIDIzIHBsYXlzCiAgICAgICAgPC9hPgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9TeW5jb3BhdGVkK0NpdHkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganMtbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy00ZGZkM2E0Ny0zYzAwLTQ3NzktOTJkMS1hMGExYzE0ODA4ODkiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9TeW5jb3BhdGVkK0NpdHkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTRkZmQzYTQ3LTNjMDAtNDc3OS05MmQxLWEwYTFjMTQ4MDg4OSIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+PGxpIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBncmlkLWl0ZW1zLWl0ZW0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1pbWFnZQogICAgICAgICAgICAgICAgICAgIGpzLWxpbmstYmxvY2sKICAgICAgICAgICAgICAgICAgICBsaW5rLWJsb2NrCiAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1pbWFnZS1pbWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1kZWZhdWx0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvYXZhdGFyMzAwcy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkltYWdlIGZvciAnU3VtbWVyIFNsYW1tZXJzIDIwMTEnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkLWl0ZW1zLWl0ZW0tZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJncmlkLWl0ZW1zLWl0ZW0tbWFpbi10ZXh0IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvVmlwZXIrUmVjb3JkaW5ncy9TdW1tZXIrU2xhbW1lcnMrMjAxMSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImxpbmstYmxvY2stdGFyZ2V0IgogICAgICAgICAgICAKICAgICAgICA+U3VtbWVyIFNsYW1tZXJzIDIwMTE8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLWF1eC10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvVmlwZXIrUmVjb3JkaW5ncyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImdyaWQtaXRlbXMtaXRlbS1hdXgtYmxvY2siCiAgICAgICAgICAgIAogICAgICAgID5WaXBlciBSZWNvcmRpbmdzPC9hPgogICAgICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvVmlwZXIrUmVjb3JkaW5ncy9TdW1tZXIrU2xhbW1lcnMrMjAxMT9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgIDE1IHBsYXlzCiAgICAgICAgPC9hPgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL211c2ljL1ZpcGVyK1JlY29yZGluZ3MvU3VtbWVyK1NsYW1tZXJzKzIwMTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganMtbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1hODdkMmY5Mi1kYWZkLTQ4MTAtOTg1Ni00NDY3NDAxM2FlZGEiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1ZpcGVyK1JlY29yZGluZ3MvU3VtbWVyK1NsYW1tZXJzKzIwMTEvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWE4N2QyZjkyLWRhZmQtNDgxMC05ODU2LTQ0Njc0MDEzYWVkYSIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+PGxpIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBncmlkLWl0ZW1zLWl0ZW0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1pbWFnZQogICAgICAgICAgICAgICAgICAgIGpzLWxpbmstYmxvY2sKICAgICAgICAgICAgICAgICAgICBsaW5rLWJsb2NrCiAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1pbWFnZS1pbWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1kZWZhdWx0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvYXZhdGFyMzAwcy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkltYWdlIGZvciAnRHJ1bSAmYW1wOyBCYXNzIEVzc2VudGlhbHMgMjAwNSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdyaWQtaXRlbXMtaXRlbS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImdyaWQtaXRlbXMtaXRlbS1tYWluLXRleHQiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9ESitIeXBlL0RydW0rJmFtcDsrQmFzcytFc3NlbnRpYWxzKzIwMDUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJsaW5rLWJsb2NrLXRhcmdldCIKICAgICAgICAgICAgCiAgICAgICAgPkRydW0gJmFtcDsgQmFzcyBFc3NlbnRpYWxzIDIwMDU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLWF1eC10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvREorSHlwZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImdyaWQtaXRlbXMtaXRlbS1hdXgtYmxvY2siCiAgICAgICAgICAgIAogICAgICAgID5ESiBIeXBlPC9hPgogICAgICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvREorSHlwZS9EcnVtKyZhbXA7K0Jhc3MrRXNzZW50aWFscysyMDA1P2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgOSBwbGF5cwogICAgICAgIDwvYT4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9ESitIeXBlL0RydW0rJmFtcDsrQmFzcytFc3NlbnRpYWxzKzIwMDUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganMtbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1jM2Y1MGYzNC1mZjc1LTQ2MjAtYTZhNi0yYTQxNWI1MjA5ZmMiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0RKK0h5cGUvRHJ1bSsmYW1wOytCYXNzK0Vzc2VudGlhbHMrMjAwNS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtYzNmNTBmMzQtZmY3NS00NjIwLWE2YTYtMmE0MTViNTIwOWZjIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT48bGkgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGdyaWQtaXRlbXMtaXRlbQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBncmlkLWl0ZW1zLWNvdmVyLWltYWdlCiAgICAgICAgICAgICAgICAgICAganMtbGluay1ibG9jawogICAgICAgICAgICAgICAgICAgIGxpbmstYmxvY2sKICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmlkLWl0ZW1zLWNvdmVyLWltYWdlLWltYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvYXZhdGFyMzAwcy9jOWNlNzgxZDRjMDY0NWYzYjBkODFmY2M0YTg5N2E0Ni5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJJbWFnZSBmb3IgJ05pZ2h0bGlmZSA2JyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLW1haW4tdGV4dCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0FuZHkrQy9OaWdodGxpZmUrNiIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImxpbmstYmxvY2stdGFyZ2V0IgogICAgICAgICAgICAKICAgICAgICA+TmlnaHRsaWZlIDY8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLWF1eC10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQW5keStDIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLWF1eC1ibG9jayIKICAgICAgICAgICAgCiAgICAgICAgPkFuZHkgQzwvYT4KICAgICAgICAKICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0FuZHkrQy9OaWdodGxpZmUrNj9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgIDggcGxheXMKICAgICAgICA8L2E+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvbXVzaWMvQW5keStDL05pZ2h0bGlmZSs2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWxpbmstYmxvY2stY292ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmstYmxvY2stY292ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiaW5kZXg9Ii0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtN2U4NTY0ZTMtOTI1Ni00YmFmLWJhMTQtYzQ2OTc4ZWM0YmMyIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9BbmR5K0MvTmlnaHRsaWZlKzYvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTdlODU2NGUzLTkyNTYtNGJhZi1iYTE0LWM0Njk3OGVjNGJjMiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+PGxpIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBncmlkLWl0ZW1zLWl0ZW0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1pbWFnZQogICAgICAgICAgICAgICAgICAgIGpzLWxpbmstYmxvY2sKICAgICAgICAgICAgICAgICAgICBsaW5rLWJsb2NrCiAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1pbWFnZS1pbWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC1pdGVtcy1jb3Zlci1kZWZhdWx0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvYXZhdGFyMzAwcy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkltYWdlIGZvciAnRHJ1bSAmYW1wOyBCYXNzIEFyZW5hIC0gVm9sdW1lIDMnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkLWl0ZW1zLWl0ZW0tZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJncmlkLWl0ZW1zLWl0ZW0tbWFpbi10ZXh0IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRmFiaW8rJmFtcDsrR3Jvb3ZlcmlkZXIvRHJ1bSsmYW1wOytCYXNzK0FyZW5hKy0rVm9sdW1lKzMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJsaW5rLWJsb2NrLXRhcmdldCIKICAgICAgICAgICAgCiAgICAgICAgPkRydW0gJmFtcDsgQmFzcyBBcmVuYSAtIFZvbHVtZSAzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImdyaWQtaXRlbXMtaXRlbS1hdXgtdGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0ZhYmlvKyZhbXA7K0dyb292ZXJpZGVyIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iZ3JpZC1pdGVtcy1pdGVtLWF1eC1ibG9jayIKICAgICAgICAgICAgCiAgICAgICAgPkZhYmlvICZhbXA7IEdyb292ZXJpZGVyPC9hPgogICAgICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRmFiaW8rJmFtcDsrR3Jvb3ZlcmlkZXIvRHJ1bSsmYW1wOytCYXNzK0FyZW5hKy0rVm9sdW1lKzM/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICA4IHBsYXlzCiAgICAgICAgPC9hPgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL211c2ljL0ZhYmlvKyZhbXA7K0dyb292ZXJpZGVyL0RydW0rJmFtcDsrQmFzcytBcmVuYSstK1ZvbHVtZSszIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWxpbmstYmxvY2stY292ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmstYmxvY2stY292ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiaW5kZXg9Ii0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNzYwNzlkYTAtY2ZmYy00ODIwLWEwYzctYWM3YmMzODY3NDY1IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9GYWJpbysmYW1wOytHcm9vdmVyaWRlci9EcnVtKyZhbXA7K0Jhc3MrQXJlbmErLStWb2x1bWUrMy8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtNzYwNzlkYTAtY2ZmYy00ODIwLWEwYzctYWM3YmMzODY3NDY1IgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgIDwvb2w+CgoKCiAgICAKCiAgICAKICAgIDxwIGNsYXNzPSJtb3JlLWxpbmsiPgogICAgICAgIDxhIGRhdGEtbGF6eS1maWx0ZXItbW9yZS1saW5rIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvYWxidW1zP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyI+CiAgICAgICAgICAgIE1vcmUgYWxidW1zCiAgICAgICAgPC9hPgogICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgICAgIDxzZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgaWQ9InRvcC10cmFja3MiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLXdpdGgtY29udHJvbAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGgyPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGV4dC1jb2xvdXItbGluayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3M/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktZmlsdGVyLW1vcmUtbGluaz0idHJhY2tzX3JhbmdlIgogICAgICAgICAgICAgICAgICAgICAgICA+VG9wIFRyYWNrczwvYT4KICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAKICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWJ1dHRvbgogICAgICAgICAgICAgICAgc2VjdGlvbi1jb250cm9sCiAgICAgICAgICAgICIKICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgIGFyaWEtY29udHJvbHM9InRyYWNrc19yYW5nZSIKICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1zZWxlY3QKICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9InJpZ2h0LTYgYm90dG9tIgogICAgICAgID48c3BhbiBjbGFzcz0ic3Itb25seSI+U29ydGVkIGJ5OiA8L3NwYW4+TGFzdCAzMCBkYXlzPC9idXR0b24+CiAgICAKICAgIAogICAgPHVsCiAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAKICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgIgogICAgICAgIGlkPSJ0cmFja3NfcmFuZ2UiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWFsaWduPSJyaWdodCIKICAgICAgICAKICAgID4KICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlP3RyYWNrc19kYXRlX3ByZXNldD1MQVNUXzdfREFZUyN0b3AtdHJhY2tzIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcnRpYWwtaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvcGFydGlhbC90cmFja3M/dHJhY2tzX2RhdGVfcHJlc2V0PUxBU1RfN19EQVlTIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPkxhc3QgNyBkYXlzPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0tLXNlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZT90cmFja3NfZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTI3RvcC10cmFja3MiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFydGlhbC1ocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9wYXJ0aWFsL3RyYWNrcz90cmFja3NfZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPkxhc3QgMzAgZGF5czwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlP3RyYWNrc19kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMjdG9wLXRyYWNrcyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJ0aWFsLWhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL3BhcnRpYWwvdHJhY2tzP3RyYWNrc19kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+TGFzdCA5MCBkYXlzPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGU/dHJhY2tzX2RhdGVfcHJlc2V0PUxBU1RfMTgwX0RBWVMjdG9wLXRyYWNrcyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJ0aWFsLWhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL3BhcnRpYWwvdHJhY2tzP3RyYWNrc19kYXRlX3ByZXNldD1MQVNUXzE4MF9EQVlTIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPkxhc3QgMTgwIGRheXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZT90cmFja3NfZGF0ZV9wcmVzZXQ9TEFTVF8zNjVfREFZUyN0b3AtdHJhY2tzIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcnRpYWwtaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvcGFydGlhbC90cmFja3M/dHJhY2tzX2RhdGVfcHJlc2V0PUxBU1RfMzY1X0RBWVMiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+TGFzdCAzNjUgZGF5czwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlP3RyYWNrc19kYXRlX3ByZXNldD1BTEwjdG9wLXRyYWNrcyIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJ0aWFsLWhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL3BhcnRpYWwvdHJhY2tzP3RyYWNrc19kYXRlX3ByZXNldD1BTEwiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+QWxsIHRpbWU8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKCiAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnVmZmVyLXN0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJlcXVpcmU9ImNvbXBvbmVudHMvbGF6eS1maWx0ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1maWx0ZXItb3B0aW9ucz0idHJhY2tzX3JhbmdlIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCgoKCgoKCiAgICAKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAoKICAgIDx0YWJsZQogICAgICAgIAogICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgY2hhcnRsaXN0CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC0td2l0aC1pbmRleAogICAgICAgICAgICAgICAgY2hhcnRsaXN0LS13aXRoLWluZGV4LS1sZW5ndGgtMgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtcGxheQogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtbW9iaWxlLXBsYXkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC0td2l0aC1pbWFnZQogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtbG92ZWQKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2hhcnRsaXN0LS13aXRoLWFydGlzdAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2hhcnRsaXN0LS13aXRoLW1vcmUKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC0td2l0aC1iYXIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtYnV5bGlua3MKICAgICAgICAgICAgCiAgICAgICAgIgogICAgPgogICAgICAgIDx0aGVhZCBjbGFzcz0ic3Itb25seSI+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0aD5SYW5rPC90aD4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0aD5QbGF5PC90aD4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGJ1bQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHRoPkxvdmVkPC90aD4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgVHJhY2sgbmFtZQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90aD4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dGg+QXJ0aXN0IG5hbWU8L3RoPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHRoPkJ1eTwvdGg+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dGg+T3B0aW9uczwvdGg+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dGg+U2Nyb2JibGVzPC90aD4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L3RyPgogICAgICAgIDwvdGhlYWQ+CiAgICAgICAgPHRib2R5PgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1Xa2F6SWJvMzhRVSIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJXa2F6SWJvMzhRVSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9V2theklibzM4UVUiCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJNYXliZSBJIFdhcyBXcm9uZyIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L18vTWF5YmUrSStXYXMrV3JvbmciCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJMb25kb24gRWxla3RyaWNpdHkiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5IgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L1N5bmNvcGF0ZWQrQ2l0eSsoU3BlY2lhbCtKYXBhbitFZGl0aW9uKSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvOWMwOTRkOWZhNmMwNDQ5YWI1NGYxNzllOWIyNjhlMDUuanBnIgogICAgICAgICAgICBhbHQ9IlN5bmNvcGF0ZWQgQ2l0eSAoU3BlY2lhbCBKYXBhbiBFZGl0aW9uKSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJjMWUyZWZjZDg4ODk3NWJmNDc4ZGQwYTU4YjVlM2VkMCIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImMxZTJlZmNkODg4OTc1YmY0NzhkZDBhNThiNWUzZWQwIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9fL01heWJlK0krV2FzK1dyb25nIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTWF5YmUgSSBXYXMgV3JvbmciCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TWF5YmUgSSBXYXMgV3Jvbmc8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkxvbmRvbiBFbGVrdHJpY2l0eSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TG9uZG9uIEVsZWt0cmljaXR5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTJlNjYwYTY2LWQwOWQtNDdhMC1iNjY3LTE2NWRhNzAyMGI1MSIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L18vTWF5YmUrSStXYXMrV3JvbmcvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTJlNjYwYTY2LWQwOWQtNDdhMC1iNjY3LTE2NWRhNzAyMGI1MSIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS01NTFhMTZmNy02MjJkLTRmMTYtYjJkMi1hNjlhNWYyZTkyMzIiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L18vTWF5YmUrSStXYXMrV3JvbmcvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNTUxYTE2ZjctNjIyZC00ZjE2LWIyZDItYTY5YTVmMmU5MjMyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkvXy9NYXliZStJK1dhcytXcm9uZyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9fL01heWJlK0krV2FzK1dyb25nP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5P2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZSIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkvXy9NYXliZStJK1dhcytXcm9uZz9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTAwLjAlOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgMjEgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVJsclg2QklHbFo0IgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9IlJsclg2QklHbFo0IgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1SbHJYNkJJR2xaNCIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9IkRpYWdvbmFsIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9HdXkrSi9fL0RpYWdvbmFsIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iR3V5IEoiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvR3V5K0oiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5IG9uIHlvdXR1YmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheVRyYWNrT25QYWdlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InlvdXR1YmUiCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIFBsYXkgdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9HdXkrSi9NRFErJTJGK0RpYWdvbmFsIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9hZDgwNTlkNTAwMzgzNmI2ZDE0YmFiYjJmNWRlMTI4Yy5qcGciCiAgICAgICAgICAgIGFsdD0iTURRIC8gRGlhZ29uYWwiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iOTQzYTUxY2Y3ZWMzYzBjZGE4N2FhN2VhMDBmOTViNWEiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI5NDNhNTFjZjdlYzNjMGNkYTg3YWE3ZWEwMGY5NWI1YSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9HdXkrSi9fL0RpYWdvbmFsIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iRGlhZ29uYWwiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+RGlhZ29uYWw8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0d1eStKIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iR3V5IEoiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkd1eSBKPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWQwOWQ0ZGU3LWRiOTktNGExZi1hOTA5LTY1ODc2YWFhMGEyYyIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvR3V5K0ovXy9EaWFnb25hbC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtZDA5ZDRkZTctZGI5OS00YTFmLWE5MDktNjU4NzZhYWEwYTJjIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLWMzYzY5MGRmLTA1NTQtNGQ0Ni05ZjMxLWZmNjdiOWMwNzU1MiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9HdXkrSi9fL0RpYWdvbmFsLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWMzYzY5MGRmLTA1NTQtNGQ0Ni05ZjMxLWZmNjdiOWMwNzU1MiIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR3V5K0ovXy9EaWFnb25hbCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0d1eStKL18vRGlhZ29uYWw/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9HdXkrSiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0d1eStKP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZSIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9HdXkrSi9fL0RpYWdvbmFsP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDozMy4zMzMzMzMzMzMzMzMzMyU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA3IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9IZW5yeStTYWl6L0luK1RoZStEaXN0YW5jZSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvZGE3Nzk1OGI3Mzk5NTBhZjcxMDRjZDJkZTRjYzRiZTcuanBnIgogICAgICAgICAgICBhbHQ9IkluIFRoZSBEaXN0YW5jZSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSIyNmM1ZmFmYmYwMjY2MTg0Yjk4MTNhZjJjY2Q4NDQwYiIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjI2YzVmYWZiZjAyNjYxODRiOTgxM2FmMmNjZDg0NDBiIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0hlbnJ5K1NhaXovXy9Jbit0aGUrRGlzdGFuY2UiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJJbiB0aGUgRGlzdGFuY2UiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+SW4gdGhlIERpc3RhbmNlPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9IZW5yeStTYWl6IgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iSGVucnkgU2FpeiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+SGVucnkgU2FpejwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy0zYWI0YTMyZS1kNzVjLTRmOTAtOGE5My0xYmM1ZDBlMzg2NjIiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0hlbnJ5K1NhaXovXy9Jbit0aGUrRGlzdGFuY2UvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTNhYjRhMzJlLWQ3NWMtNGY5MC04YTkzLTFiYzVkMGUzODY2MiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1kOWY2MTM1Ny04ZTZjLTRmNmMtYmYyNi01NDk0MzlkYmU3ZTYiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvSGVucnkrU2Fpei9fL0luK3RoZStEaXN0YW5jZS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1kOWY2MTM1Ny04ZTZjLTRmNmMtYmYyNi01NDk0MzlkYmU3ZTYiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0hlbnJ5K1NhaXovXy9Jbit0aGUrRGlzdGFuY2UiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9IZW5yeStTYWl6L18vSW4rdGhlK0Rpc3RhbmNlP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvSGVucnkrU2FpeiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0hlbnJ5K1NhaXo/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0hlbnJ5K1NhaXovXy9Jbit0aGUrRGlzdGFuY2U/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjMzLjMzMzMzMzMzMzMzMzMzJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDcgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTZfa1UyclJLeTY0IgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9IjZfa1UyclJLeTY0IgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj02X2tVMnJSS3k2NCIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9IlN5bmMgQmlnIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9LcnVuY2gvXy9TeW5jK0JpZyIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IktydW5jaCIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy9LcnVuY2giCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5IG9uIHlvdXR1YmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheVRyYWNrT25QYWdlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InlvdXR1YmUiCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIFBsYXkgdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9WYXJpb3VzK0FydGlzdHMvSVNSQWxpZW5zLCtWb2wuKzcrLStPcmlnaW4rRWFydGgiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzBjYjM2ZDA2NzE1NTQ2YWRjNjI3MWRlZjRkMDEwM2JjLmpwZyIKICAgICAgICAgICAgYWx0PSJJU1JBbGllbnMsIFZvbC4gNyAtIE9yaWdpbiBFYXJ0aCIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJlZDBmZGIyNmQ3Njc2MDIxMTFkYjJhMzJiNDFiNGQ4YSIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImVkMGZkYjI2ZDc2NzYwMjExMWRiMmEzMmI0MWI0ZDhhIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0tydW5jaC9fL1N5bmMrQmlnIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iU3luYyBCaWciCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+U3luYyBCaWc8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0tydW5jaCIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IktydW5jaCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+S3J1bmNoPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWQyZDNkNzIwLTkxZmUtNGE2Zi04NGMxLTMwMjFlNWNhYWMyNCIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvS3J1bmNoL18vU3luYytCaWcvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWQyZDNkNzIwLTkxZmUtNGE2Zi04NGMxLTMwMjFlNWNhYWMyNCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0zOTRhYjFhMy04YzA1LTQ0ODgtOGI2My00MzU1MGVkZmExNGIiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvS3J1bmNoL18vU3luYytCaWcvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtMzk0YWIxYTMtOGMwNS00NDg4LThiNjMtNDM1NTBlZGZhMTRiIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9LcnVuY2gvXy9TeW5jK0JpZyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0tydW5jaC9fL1N5bmMrQmlnP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvS3J1bmNoIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvS3J1bmNoP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZSIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9LcnVuY2gvXy9TeW5jK0JpZz9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MzMuMzMzMzMzMzMzMzMzMzMlOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNyA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJOb3cgU2hlJiMzOTtzIEdvbmUgKEogQm9zdHJvbiBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZmUxNzdhZjFiZjkyN2JkMmU3NzdhZWJhMDAwYTAxYTUiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJmZTE3N2FmMWJmOTI3YmQyZTc3N2FlYmEwMDBhMDFhNSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Db2xsaWUrQnVkZHovXy9Ob3crU2hlJTI3cytHb25lKyhKK0Jvc3Ryb24rUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTm93IFNoZSYjMzk7cyBHb25lIChKIEJvc3Ryb24gUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPk5vdyBTaGUmIzM5O3MgR29uZSAoSiBCb3N0cm9uIFJlbWl4KTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ29sbGllK0J1ZGR6IgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQ29sbGllIEJ1ZGR6IgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Db2xsaWUgQnVkZHo8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtZjJiOWI4YzEtMjczZS00YjgwLThmYjktMTQ4OTFkN2VmYjQ2IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Db2xsaWUrQnVkZHovXy9Ob3crU2hlJTI3cytHb25lKyhKK0Jvc3Ryb24rUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1mMmI5YjhjMS0yNzNlLTRiODAtOGZiOS0xNDg5MWQ3ZWZiNDYiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtZmExZmViMDgtZmYzYS00NjBhLWE0OTAtMmUyYzA4NzcwODc5IgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0NvbGxpZStCdWRkei9fL05vdytTaGUlMjdzK0dvbmUrKEorQm9zdHJvbitSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtZmExZmViMDgtZmYzYS00NjBhLWE0OTAtMmUyYzA4NzcwODc5IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Db2xsaWUrQnVkZHovXy9Ob3crU2hlJTI3cytHb25lKyhKK0Jvc3Ryb24rUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ29sbGllK0J1ZGR6L18vTm93K1NoZSUyN3MrR29uZSsoSitCb3N0cm9uK1JlbWl4KT9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0NvbGxpZStCdWRkeiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0NvbGxpZStCdWRkej9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ29sbGllK0J1ZGR6L18vTm93K1NoZSUyN3MrR29uZSsoSitCb3N0cm9uK1JlbWl4KT9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MjguNTcxNDI4NTcxNDI4NTclOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNiA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OGxOMHhCR1dMLUUiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iOGxOMHhCR1dMLUUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PThsTjB4QkdXTC1FIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iSGVhcnRiZWF0IExvdWQgKEV4dGVuZGVkIFZlcnNpb24pIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9BbmR5K0MrJmFtcDsrRmlvcmEvXy9IZWFydGJlYXQrTG91ZCsoRXh0ZW5kZWQrVmVyc2lvbikiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJBbmR5IEMgJmFtcDsgRmlvcmEiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvQW5keStDKyZhbXA7K0Zpb3JhIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJIZWFydGJlYXQgTG91ZCAoRXh0ZW5kZWQgVmVyc2lvbikiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNDVlYjZjYTRmNjY4NzRkNzYzNGJlNWNlNWY4Mjg5Y2MiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI0NWViNmNhNGY2Njg3NGQ3NjM0YmU1Y2U1ZjgyODljYyIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9BbmR5K0MrJmFtcDsrRmlvcmEvXy9IZWFydGJlYXQrTG91ZCsoRXh0ZW5kZWQrVmVyc2lvbikiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJIZWFydGJlYXQgTG91ZCAoRXh0ZW5kZWQgVmVyc2lvbikiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+SGVhcnRiZWF0IExvdWQgKEV4dGVuZGVkIFZlcnNpb24pPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9BbmR5K0MrJmFtcDsrRmlvcmEiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJBbmR5IEMgJmFtcDsgRmlvcmEiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkFuZHkgQyAmYW1wOyBGaW9yYTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1lYWJjN2E4My1iN2NlLTRiNjYtYmY0ZS1jNWE2MzU2MzBmNWEiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0FuZHkrQysmYW1wOytGaW9yYS9fL0hlYXJ0YmVhdCtMb3VkKyhFeHRlbmRlZCtWZXJzaW9uKS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtZWFiYzdhODMtYjdjZS00YjY2LWJmNGUtYzVhNjM1NjMwZjVhIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLWY4NmU0NDVlLTFkZjQtNGM2YS05NDM3LTRhYmEzZTkyZjM5YSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9BbmR5K0MrJmFtcDsrRmlvcmEvXy9IZWFydGJlYXQrTG91ZCsoRXh0ZW5kZWQrVmVyc2lvbikvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtZjg2ZTQ0NWUtMWRmNC00YzZhLTk0MzctNGFiYTNlOTJmMzlhIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9BbmR5K0MrJmFtcDsrRmlvcmEvXy9IZWFydGJlYXQrTG91ZCsoRXh0ZW5kZWQrVmVyc2lvbikiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9BbmR5K0MrJmFtcDsrRmlvcmEvXy9IZWFydGJlYXQrTG91ZCsoRXh0ZW5kZWQrVmVyc2lvbik/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9BbmR5K0MrJmFtcDsrRmlvcmEiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9BbmR5K0MrJmFtcDsrRmlvcmE/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0FuZHkrQysmYW1wOytGaW9yYS9fL0hlYXJ0YmVhdCtMb3VkKyhFeHRlbmRlZCtWZXJzaW9uKT9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MjMuODA5NTIzODA5NTIzODA3JTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDUgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDcKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iVGhlIFRyb3VibGVtYWtlcnoiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYTIzMmEzZjViZWIyZGViMWM0ZDZkMzNhZTIzMzRkYTUiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJhMjMyYTNmNWJlYjJkZWIxYzRkNmQzM2FlMjMzNGRhNSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vVGhlK1Ryb3VibGVtYWtlcnoiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJUaGUgVHJvdWJsZW1ha2VyeiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5UaGUgVHJvdWJsZW1ha2VyejwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkJvcmlzIEJyZWpjaGEiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkJvcmlzIEJyZWpjaGE8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtOGYwOTg3ZDktYmYxZC00M2YxLWE0MjgtZDFlNThlOTI0ZDM2IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vVGhlK1Ryb3VibGVtYWtlcnovK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLThmMDk4N2Q5LWJmMWQtNDNmMS1hNDI4LWQxZTU4ZTkyNGQzNiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1lMGY0YTA4Yy0yYTYxLTQ3ZmMtYjFjZi0xZjg5YWZjNDRmOGQiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RoZStUcm91YmxlbWFrZXJ6LytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWUwZjRhMDhjLTJhNjEtNDdmYy1iMWNmLTFmODlhZmM0NGY4ZCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RoZStUcm91YmxlbWFrZXJ6IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RoZStUcm91YmxlbWFrZXJ6P2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JvcmlzK0JyZWpjaGE/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JvcmlzK0JyZWpjaGEvXy9UaGUrVHJvdWJsZW1ha2Vyej9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTkuMDQ3NjE5MDQ3NjE5MDQ3JTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDQgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDgKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iVG8gdGhlIG1vb24gYW5kIGJhY2siCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZDcyMTkyZTM5N2ViMjNmM2EwYzgyYmIxMjgxMDMzZDUiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJkNzIxOTJlMzk3ZWIyM2YzYTBjODJiYjEyODEwMzNkNSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vVG8rdGhlK21vb24rYW5kK2JhY2siCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJUbyB0aGUgbW9vbiBhbmQgYmFjayIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5UbyB0aGUgbW9vbiBhbmQgYmFjazwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkJvcmlzIEJyZWpjaGEiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkJvcmlzIEJyZWpjaGE8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNzlkNjdlMTAtMTA5MC00MjkxLThmMzctYTE5MDY1YWMxNTNiIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vVG8rdGhlK21vb24rYW5kK2JhY2svK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTc5ZDY3ZTEwLTEwOTAtNDI5MS04ZjM3LWExOTA2NWFjMTUzYiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS04MTdiYjhkNS1iMTI5LTQwNWMtOGI0YS1jNjE3Y2FjYjViZWUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RvK3RoZSttb29uK2FuZCtiYWNrLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTgxN2JiOGQ1LWIxMjktNDA1Yy04YjRhLWM2MTdjYWNiNWJlZSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RvK3RoZSttb29uK2FuZCtiYWNrIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RvK3RoZSttb29uK2FuZCtiYWNrP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JvcmlzK0JyZWpjaGE/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JvcmlzK0JyZWpjaGEvXy9Ubyt0aGUrbW9vbithbmQrYmFjaz9kYXRlX3ByZXNldD1MQVNUXzMwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTkuMDQ3NjE5MDQ3NjE5MDQ3JTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDQgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDkKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVR5ZldiQm5EVjZvIgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9IlR5ZldiQm5EVjZvIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1UeWZXYkJuRFY2byIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9Ik5ldmVyIFN0b3AiCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL0RDK0JyZWFrcy9fL05ldmVyK1N0b3AiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJEQyBCcmVha3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvREMrQnJlYWtzIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvREMrQnJlYWtzL0RpZmZlcmVudCtCcmVlZCIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvMGJmZjViZmRhM2NlZDA1YjUxMmExNzkzYmE2YzA3NTMuanBnIgogICAgICAgICAgICBhbHQ9IkRpZmZlcmVudCBCcmVlZCIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJiNDMxMTZkNmQ4NDlhNTFjNjhjNzJkNGI3NzI1MzAzMCIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImI0MzExNmQ2ZDg0OWE1MWM2OGM3MmQ0Yjc3MjUzMDMwIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RDK0JyZWFrcy9fL05ldmVyK1N0b3AiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJOZXZlciBTdG9wIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPk5ldmVyIFN0b3A8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RDK0JyZWFrcyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkRDIEJyZWFrcyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+REMgQnJlYWtzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWYwNzYwZDE5LTIwNDQtNGI4My1iNjRmLTYyNTM3NjI3MmZjNiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvREMrQnJlYWtzL18vTmV2ZXIrU3RvcC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtZjA3NjBkMTktMjA0NC00YjgzLWI2NGYtNjI1Mzc2MjcyZmM2IgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLWY5YzJmMWQ4LTg5NzktNGM2OC04ZTVkLWEwODg5ZWI2YTg5NCIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9EQytCcmVha3MvXy9OZXZlcitTdG9wLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWY5YzJmMWQ4LTg5NzktNGM2OC04ZTVkLWEwODg5ZWI2YTg5NCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvREMrQnJlYWtzL18vTmV2ZXIrU3RvcCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0RDK0JyZWFrcy9fL05ldmVyK1N0b3A/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EQytCcmVha3MiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9EQytCcmVha3M/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0RDK0JyZWFrcy9fL05ldmVyK1N0b3A/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjE5LjA0NzYxOTA0NzYxOTA0NyU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA0IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvRWQrU29sby9Tb3VuZHN5c3RlbStFbnRlcnRhaW5lcisoZmVhdC4rTUMrU3B5ZGEpKy0rU2luZ2xlIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgYWx0PSJTb3VuZHN5c3RlbSBFbnRlcnRhaW5lciAoZmVhdC4gTUMgU3B5ZGEpIC0gU2luZ2xlIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjJlOTcyYmQ2N2FhNjgxNWNmN2YwMjY0MDJkYjMzOGMyIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMmU5NzJiZDY3YWE2ODE1Y2Y3ZjAyNjQwMmRiMzM4YzIiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRWQrU29sby9fL1NvdW5kc3lzdGVtK0VudGVydGFpbmVyKyhmZWF0LitNQytTcHlkYSkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJTb3VuZHN5c3RlbSBFbnRlcnRhaW5lciAoZmVhdC4gTUMgU3B5ZGEpIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlNvdW5kc3lzdGVtIEVudGVydGFpbmVyIChmZWF0LiBNQyBTcHlkYSk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0VkK1NvbG8iCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJFZCBTb2xvIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5FZCBTb2xvPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWJjZDY3MjYwLWM2N2YtNDMyZS1hOWQ5LTM4OWZjYjdhYWRlZiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRWQrU29sby9fL1NvdW5kc3lzdGVtK0VudGVydGFpbmVyKyhmZWF0LitNQytTcHlkYSkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWJjZDY3MjYwLWM2N2YtNDMyZS1hOWQ5LTM4OWZjYjdhYWRlZiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS02ZmI1YjZmMi1mNWFjLTQ5YzUtYWEwZS05MjVkNDJlNGNhZTQiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRWQrU29sby9fL1NvdW5kc3lzdGVtK0VudGVydGFpbmVyKyhmZWF0LitNQytTcHlkYSkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNmZiNWI2ZjItZjVhYy00OWM1LWFhMGUtOTI1ZDQyZTRjYWU0IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9FZCtTb2xvL18vU291bmRzeXN0ZW0rRW50ZXJ0YWluZXIrKGZlYXQuK01DK1NweWRhKSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0VkK1NvbG8vXy9Tb3VuZHN5c3RlbStFbnRlcnRhaW5lcisoZmVhdC4rTUMrU3B5ZGEpP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRWQrU29sbyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0VkK1NvbG8/ZGF0ZV9wcmVzZXQ9TEFTVF8zMF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0VkK1NvbG8vXy9Tb3VuZHN5c3RlbStFbnRlcnRhaW5lcisoZmVhdC4rTUMrU3B5ZGEpP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxOS4wNDc2MTkwNDc2MTkwNDclOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNCA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCiAgICAgICAgPC90Ym9keT4KICAgIDwvdGFibGU+CgoKCiAgICAKICAgIDxwIGNsYXNzPSJtb3JlLWxpbmsiPgogICAgICAgIDxhIGRhdGEtbGF6eS1maWx0ZXItbW9yZS1saW5rIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyI+CiAgICAgICAgICAgIE1vcmUgdHJhY2tzCiAgICAgICAgPC9hPgogICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJtb2JpbGVfcG9zXzMiIGRhdGEtYWQ9Im1vYmlsZV9wb3NfMyIgY2xhc3M9Im1vYmlsZV9wb3NfMyBsYXN0Zm0tYWQtbW9iaWxlIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7bW9iaWxlX3Bvc18zJiMzNDssICYjMzQ7c2l6ZXMmIzM0OzogW1szMDAsIDI1MF0sIFszMjAsIDUwXV0sICYjMzQ7aXNfbW9iaWxlJiMzNDs6IHRydWUsICYjMzQ7dGFyZ2V0aW5nJiMzNDs6IHsmIzM0O3BvcyYjMzQ7OiAmIzM0OzMmIzM0O319Jz48L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgIAoKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgaWQ9InNob3V0Ym94IgogICAgICAgIGNsYXNzPSJsYXp5LXNob3V0Ym94IHNlY3Rpb24td2l0aC1zZXBhcmF0b3IgYnVmZmVyLXN0YW5kYXJkLWlnbm9yZS1oaWRkZW4gIgogICAgICAgIGRhdGEtcmVxdWlyZT0iY29tcG9uZW50cy9sYXp5LWxvYWQtdjIiCiAgICAgICAgZGF0YS1sYXp5LWxvYWQtY29udGVudD0iL3VzZXIvYWxleGlzdG91bG90dGUvcGFydGlhbC9zaG91dGJveCIKICAgICAgICBkYXRhLWxhenktbG9hZC1lcnJvci1tZXNzYWdlPSJTaG91dGJveCBjb3VsZCBub3QgYmUgbG9hZGVkLCB0cnkgcmVsb2FkaW5nIHRoZSBwYWdlLiIKICAgICAgICBkYXRhLWxhenktbG9hZC13aGVuLW9uLXNjcmVlbgogICAgPjwvZGl2PgoKICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNpZGViYXIgY29sLXNpZGViYXItLWxvbmciPgogICAgICAgICAgICAKICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAKICAgICAgICA8c2VjdGlvbiBjbGFzcz0ic3RhdGlvbmxpbmtzIj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJzdGF0aW9ubGlua3MtaGVhZGVyIj5MaXN0ZW48L2gyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgPHVsIGNsYXNzPSJzdGF0aW9ubGluay1saXN0Ij4KICAgICAgICA8bGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKCiAgICAgICAgCgogICAgICAgIDxidXR0b24KICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgYnRuIHN0YXRpb25saW5rCiAgICAgICAgICAgICAgICBqcy1wbGF5bGluay1zdGF0aW9uCiAgICAgICAgICAgICIKICAgICAgICAgICAgZGF0YS1zdGF0aW9uLXVybD0iL3BsYXllci9zdGF0aW9uL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeSIKICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJTdGFydFN0YXRpb24iCiAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJsaWJyYXJ5IgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJMaXN0ZW4gdG8gbXVzaWMgYWxleGlzdG91bG90dGUgaGFzIHNjcm9iYmxlZCBiZWZvcmUiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIFBsYXkgYWxleGlzdG91bG90dGUncyBsaWJyYXJ5CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPC9idXR0b24+CiAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKCiAgICAgICAgCgogICAgICAgIDxidXR0b24KICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgYnRuIHN0YXRpb25saW5rCiAgICAgICAgICAgICAgICBqcy1wbGF5bGluay1zdGF0aW9uCiAgICAgICAgICAgICIKICAgICAgICAgICAgZGF0YS1zdGF0aW9uLXVybD0iL3BsYXllci9zdGF0aW9uL3VzZXIvYWxleGlzdG91bG90dGUvbWl4IgogICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlN0YXJ0U3RhdGlvbiIKICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9Im1peCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTGlzdGVuIHRvIGEgbWl4IG9mIG11c2ljIGFsZXhpc3RvdWxvdHRlIGhhcyBzY3JvYmJsZWQgYmVmb3JlIGFuZCByZWNvbW1lbmRhdGlvbnMgZnJvbSBMYXN0LmZtIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBQbGF5IGFsZXhpc3RvdWxvdHRlJ3MgbWl4CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPC9idXR0b24+CiAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKCiAgICAgICAgCgogICAgICAgIDxidXR0b24KICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgYnRuIHN0YXRpb25saW5rCiAgICAgICAgICAgICAgICBqcy1wbGF5bGluay1zdGF0aW9uCiAgICAgICAgICAgICIKICAgICAgICAgICAgZGF0YS1zdGF0aW9uLXVybD0iL3BsYXllci9zdGF0aW9uL3VzZXIvYWxleGlzdG91bG90dGUvcmVjb21tZW5kZWQiCiAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3RhcnRTdGF0aW9uIgogICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0icmVjb21tZW5kZWQiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Ikxpc3RlbiB0byBhbGV4aXN0b3Vsb3R0ZSdzIHJlY29tbWVuZGVkIG11c2ljIGZyb20gTGFzdC5mbSIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgUGxheSBhbGV4aXN0b3Vsb3R0ZSdzIHJlY29tbWVuZGF0aW9ucwogICAgICAgICAgICAgICAgICAgIAogICAgICAgIDwvYnV0dG9uPgogICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgICAgICAgICAgCiAgICAgICAgPC9zZWN0aW9uPgogICAgCgogICAgCiAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJtcHVfdG9wIiBkYXRhLWFkPSJtcHVfdG9wIiBjbGFzcz0ibXB1X3RvcCBsYXN0Zm0tYWQiIGRhdGEtYWRzLXBsYWNlbWVudD0neyYjMzQ7aWQmIzM0OzogJiMzNDttcHVfdG9wJiMzNDssICYjMzQ7c2l6ZXMmIzM0OzogW1szMDAsIDI1MF0sIFszMDAsIDYwMF1dLCAmIzM0O3RhcmdldGluZyYjMzQ7OiB7JiMzNDtwb3MmIzM0OzogJiMzNDt0b3AmIzM0O30sICYjMzQ7YWRibG9ja19tZXNzYWdlJiMzNDs6IHRydWV9Jz48L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPHAgY2xhc3M9Im1wdS1zdWJzY3JpcHRpb24tdXBzZWxsIG1wdS1zdWJzY3JpcHRpb24tdXBzZWxsLS1tcHUiPgogICAgICAgICAgICAgICAgRG9uJ3Qgd2FudCB0byBzZWUgYWRzPyA8YSBocmVmPSIvc3Vic2NyaWJlIiBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlN1YnNjcmliZUNsaWNrIiBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQWRVcHNlbGxDVEEiPlN1YnNjcmliZSBub3c8L2E+CiAgICAgICAgICAgIDwvcD4KICAgICAgICAKICAgIAoKICAgIAogICAgPHNlY3Rpb24KICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaGlkZGVuLXhzCiAgICAgICAgICAgIAogICAgICAgICIKICAgID4KICAgICAgICA8aDI+TGlzdGVuaW5nIFJlcG9ydHM8L2gyPgoKICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSJsaXN0ZW5pbmctcmVwb3J0LXByb21vIGxpc3RlbmluZy1yZXBvcnQtcHJvbW8tLXdlZWsiCiAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saXN0ZW5pbmctcmVwb3J0L3dlZWsiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsaXN0ZW5pbmctcmVwb3J0LXByb21vLXRpdGxlIj5MYXN0LndlZWs8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGlzdGVuaW5nLXJlcG9ydC1wcm9tby1kYXRlIj4KICAgICAgICAgICAgICAgICAgICAyOCBKdW4g4oCUIDQgSnVsCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAKCiAgICAgICAgCgogICAgICAgIDxhCiAgICAgICAgICAgIGNsYXNzPSJsaXN0ZW5pbmctcmVwb3J0LXByb21vIGxpc3RlbmluZy1yZXBvcnQtcHJvbW8tLXllYXIiCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpc3RlbmluZy1yZXBvcnQveWVhciIKICAgICAgICA+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsaXN0ZW5pbmctcmVwb3J0LXByb21vLXRpdGxlIj5MYXN0LnllYXI8L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsaXN0ZW5pbmctcmVwb3J0LXByb21vLWRhdGUiPjIwMTg8L3NwYW4+CiAgICAgICAgPC9hPgogICAgPC9zZWN0aW9uPgoKICAgIAogICAgCiAgICAKCiAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJtb2JpbGVfcG9zXzQiIGRhdGEtYWQ9Im1vYmlsZV9wb3NfNCIgY2xhc3M9Im1vYmlsZV9wb3NfNCBsYXN0Zm0tYWQtbW9iaWxlIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7bW9iaWxlX3Bvc180JiMzNDssICYjMzQ7c2l6ZXMmIzM0OzogW1szMDAsIDI1MF0sIFszMjAsIDUwXV0sICYjMzQ7aXNfbW9iaWxlJiMzNDs6IHRydWUsICYjMzQ7dGFyZ2V0aW5nJiMzNDs6IHsmIzM0O3BvcyYjMzQ7OiAmIzM0OzQmIzM0O319Jz48L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9InJlbGF0ZWQtY29udGVudCIgaWQ9InRhYm9vbGEtcmlnaHQtcmFpbC10aHVtYm5haWxzIiBkYXRhLXJlcXVpcmU9ImFkcy90YWJvb2xhIiBkYXRhLXRhYm9vbGEtbGF5b3V0PSJOb25lIj48L2Rpdj4KICAgIAoKICAgIAogICAgPGRpdiBjbGFzcz0icmVsYXRlZC1hZHMiPgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLXNlYXJjaGxpbmtzLWRlc2t0b3AKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBpZD0ibXB1X2JvdHRvbSIgZGF0YS1hZD0ibXB1X2JvdHRvbSIgY2xhc3M9Im1wdV9ib3R0b20gbGFzdGZtLWFkIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7bXB1X2JvdHRvbSYjMzQ7LCAmIzM0O3NpemVzJiMzNDs6IFtbMzAwLCAyNTBdXSwgJiMzNDt0YXJnZXRpbmcmIzM0OzogeyYjMzQ7cG9zJiMzNDs6ICYjMzQ7Ym90dG9tJiMzNDt9fSc+PC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAKCgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKICAgIDwvZGl2PgoKCiAgICAgICAgCgoKICAgICAgICAKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBpZD0ibGVhZGVyX2JvdHRvbSIgZGF0YS1hZD0ibGVhZGVyX2JvdHRvbSIgY2xhc3M9ImxlYWRlcl9ib3R0b20gbGFzdGZtLWFkIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7bGVhZGVyX2JvdHRvbSYjMzQ7LCAmIzM0O3NpemVzJiMzNDs6IFtbNzI4LCA5MF0sIFs5NzAsIDY2XSwgWzcyOCwgOTJdXSwgJiMzNDt0YXJnZXRpbmcmIzM0OzogeyYjMzQ7cG9zJiMzNDs6ICYjMzQ7Ym90dG9tJiMzNDt9fSc+PC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICA8L2Rpdj4KCgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgcGFnZS1jb250ZW50IHZpc2libGUteHMiPgogICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJyZWxhdGVkLWFkcyI+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtc2VhcmNobGlua3MtbW9iaWxlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPjwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICA8ZGl2IGlkPSJxYS1wYWdlLWxvYWQiPjwvZGl2PgoKICAgIAogICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgICAKICAgIAogICAgPGRpdgogICAgICAgIGNsYXNzPSJsYXp5LWZlYXR1cmVzLWZvb3RlciIKICAgICAgICBkYXRhLXJlcXVpcmU9ImNvbXBvbmVudHMvbGF6eS1sb2FkLXYyIgogICAgICAgIGRhdGEtbGF6eS1sb2FkLWNvbnRlbnQ9Ii9mZWF0dXJlcy9wYXJ0aWFsL2Zvb3RlciIKICAgICAgICBkYXRhLWxhenktbG9hZC13aGVuLW9uLXNjcmVlbgogICAgPjwvZGl2PgoKICAgICAgICAKICAgIAoKCiAgICAKICAgIDxmb290ZXIgY2xhc3M9ImZvb3RlciIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9Pcmdhbml6YXRpb24iPgogICAgICAgIDxsaW5rIGl0ZW1wcm9wPSJ1cmwiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0iPgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItdG9wIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci10b3Atcm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItdG9wLWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iZm9vdGVyLWhlYWRpbmciPkNvbXBhbnk8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImZvb3Rlci1saW5rcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2Fib3V0Ij5BYm91dCBMYXN0LmZtPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2Fib3V0L2NvbnRhY3QiPkNvbnRhY3QgVXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYWJvdXQvam9icyI+Sm9iczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItdG9wLWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iZm9vdGVyLWhlYWRpbmciPkhlbHA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImZvb3Rlci1saW5rcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2Fib3V0L3RyYWNrbXltdXNpYyI+VHJhY2sgTXkgTXVzaWM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL2dldHNhdGlzZmFjdGlvbi5jb20vbGFzdGZtIiB0YXJnZXQ9Il9CTEFOSyI+Q29tbXVuaXR5IFN1cHBvcnQ8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9oZWxwL2d1aWRlbGluZXMiPkNvbW11bml0eSBHdWlkZWxpbmVzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cDovL2Nic2kuZm9yY2UuY29tL0NCU2kvbGFzdGZtIiB0YXJnZXQ9Il9CTEFOSyI+SGVscDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci10b3AtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJmb290ZXItaGVhZGluZyI+R29vZGllczwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZm9vdGVyLWxpbmtzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYWJvdXQvdHJhY2tteW11c2ljIj5Eb3dubG9hZCBTY3JvYmJsZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYXBpIj5EZXZlbG9wZXIgQVBJPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL211c2ljLytmcmVlLW11c2ljLWRvd25sb2FkcyI+RnJlZSBNdXNpYyBEb3dubG9hZHM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL3N0b3JlLmxhc3QuZm0iPk1lcmNoYW5kaXNlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci10b3AtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJmb290ZXItaGVhZGluZyI+QWNjb3VudDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZm9vdGVyLWxpbmtzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvam9pbiI+Sm9pbjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luIj5Mb2dpbjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvc3Vic2NyaWJlIj5TdWJzY3JpYmU8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItdG9wLWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iZm9vdGVyLWhlYWRpbmciPkZvbGxvdyBVczwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZm9vdGVyLWxpbmtzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2xhc3RmbSI+RmFjZWJvb2s8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9sYXN0Zm0iPlR3aXR0ZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9sYXN0X2ZtIj5JbnN0YWdyYW08L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9sYXN0Zm0iPllvdVR1YmU8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWJvdHRvbSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtc20tOSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBpZD0ibGFuZ3VhZ2Utc2VsZWN0b3IiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3Rlci1sYW5ndWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlLS1hY3RpdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+RW5nbGlzaDwvc3Ryb25nPjxzcGFuIGNsYXNzPSJzci1vbmx5Ij5jdXJyZW50IGxhbmd1YWdlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3Rlci1sYW5ndWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvb3Rlci1sYW5ndWFnZS1mb3JtIiBhY3Rpb249Ii9pMThuL3NldGxhbmcvIiBtZXRob2Q9InBvc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J2NzcmZtaWRkbGV3YXJldG9rZW4nIHZhbHVlPSdLQk5jeVFxTTVZcVRkY1M0RDNqRWhmNzBCaXJWSTAxdScgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJsYW5ndWFnZSIgdmFsdWU9ImRlIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im1pbWljLWxpbmsiIG5hbWU9ImRlIiB0eXBlPSJzdWJtaXQiPkRldXRzY2g8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb290ZXItbGFuZ3VhZ2UtZm9ybSIgYWN0aW9uPSIvaTE4bi9zZXRsYW5nLyIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdjc3JmbWlkZGxld2FyZXRva2VuJyB2YWx1ZT0nS0JOY3lRcU01WXFUZGNTNEQzakVoZjcwQmlyVkkwMXUnIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibGFuZ3VhZ2UiIHZhbHVlPSJlcyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtaW1pYy1saW5rIiBuYW1lPSJlcyIgdHlwZT0ic3VibWl0Ij5Fc3Bhw7FvbDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3Rlci1sYW5ndWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvb3Rlci1sYW5ndWFnZS1mb3JtIiBhY3Rpb249Ii9pMThuL3NldGxhbmcvIiBtZXRob2Q9InBvc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J2NzcmZtaWRkbGV3YXJldG9rZW4nIHZhbHVlPSdLQk5jeVFxTTVZcVRkY1M0RDNqRWhmNzBCaXJWSTAxdScgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJsYW5ndWFnZSIgdmFsdWU9ImZyIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im1pbWljLWxpbmsiIG5hbWU9ImZyIiB0eXBlPSJzdWJtaXQiPkZyYW7Dp2FpczwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3Rlci1sYW5ndWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvb3Rlci1sYW5ndWFnZS1mb3JtIiBhY3Rpb249Ii9pMThuL3NldGxhbmcvIiBtZXRob2Q9InBvc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J2NzcmZtaWRkbGV3YXJldG9rZW4nIHZhbHVlPSdLQk5jeVFxTTVZcVRkY1M0RDNqRWhmNzBCaXJWSTAxdScgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJsYW5ndWFnZSIgdmFsdWU9Iml0IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im1pbWljLWxpbmsiIG5hbWU9Iml0IiB0eXBlPSJzdWJtaXQiPkl0YWxpYW5vPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J0tCTmN5UXFNNVlxVGRjUzREM2pFaGY3MEJpclZJMDF1JyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0iamEiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0iamEiIHR5cGU9InN1Ym1pdCI+5pel5pys6KqePC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J0tCTmN5UXFNNVlxVGRjUzREM2pFaGY3MEJpclZJMDF1JyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0icGwiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0icGwiIHR5cGU9InN1Ym1pdCI+UG9sc2tpPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J0tCTmN5UXFNNVlxVGRjUzREM2pFaGY3MEJpclZJMDF1JyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0icHQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0icHQiIHR5cGU9InN1Ym1pdCI+UG9ydHVndcOqczwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3Rlci1sYW5ndWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvb3Rlci1sYW5ndWFnZS1mb3JtIiBhY3Rpb249Ii9pMThuL3NldGxhbmcvIiBtZXRob2Q9InBvc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J2NzcmZtaWRkbGV3YXJldG9rZW4nIHZhbHVlPSdLQk5jeVFxTTVZcVRkY1M0RDNqRWhmNzBCaXJWSTAxdScgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJsYW5ndWFnZSIgdmFsdWU9InJ1IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im1pbWljLWxpbmsiIG5hbWU9InJ1IiB0eXBlPSJzdWJtaXQiPtCg0YPRgdGB0LrQuNC5PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J0tCTmN5UXFNNVlxVGRjUzREM2pFaGY3MEJpclZJMDF1JyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0ic3YiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0ic3YiIHR5cGU9InN1Ym1pdCI+U3ZlbnNrYTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3Rlci1sYW5ndWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvb3Rlci1sYW5ndWFnZS1mb3JtIiBhY3Rpb249Ii9pMThuL3NldGxhbmcvIiBtZXRob2Q9InBvc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J2NzcmZtaWRkbGV3YXJldG9rZW4nIHZhbHVlPSdLQk5jeVFxTTVZcVRkY1M0RDNqRWhmNzBCaXJWSTAxdScgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJsYW5ndWFnZSIgdmFsdWU9InRyIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im1pbWljLWxpbmsiIG5hbWU9InRyIiB0eXBlPSJzdWJtaXQiPlTDvHJrw6dlPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J0tCTmN5UXFNNVlxVGRjUzREM2pFaGY3MEJpclZJMDF1JyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0iemgiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0iemgiIHR5cGU9InN1Ym1pdCI+566A5L2T5Lit5paHPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJmb290ZXItdGltZXpvbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGltZSB6b25lOiA8c3Ryb25nPlBhY2lmaWMvTm91bWVhPC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWxlZ2FsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlci1sZWdhbC1pdGVtIj48YSByZWw9Im5vZm9sbG93IiBocmVmPSJodHRwOi8vd3d3LmNic2ludGVyYWN0aXZlLmNvbS8iPkNCUyBJbnRlcmFjdGl2ZTwvYT4gwqkgMjAxOSA8c3BhbiBpdGVtcHJvcD0ibmFtZSI+TGFzdC5mbTwvc3Bhbj4gTHRkLiBBbGwgcmlnaHRzIHJlc2VydmVkPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlci1sZWdhbC1pdGVtIj48YSBocmVmPSIvbGVnYWwvdGVybXMiPlRlcm1zIG9mIFVzZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyLWxlZ2FsLWl0ZW0iPjxhIGhyZWY9Ii9sZWdhbC9wcml2YWN5Ij5Qcml2YWN5IFBvbGljeTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyLWxlZ2FsLWl0ZW0iPjxhIGhyZWY9Ii9sZWdhbCI+TGVnYWwgUG9saWNpZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlci1sZWdhbC1pdGVtIj48YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cDovL3d3dy5jYnNpbnRlcmFjdGl2ZS5jb20vY2FyZWVycyI+Sm9icyBhdCBDQlNpPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXItbGVnYWwtaXRlbSI+PGEgcmVsPSJub2ZvbGxvdyIgaHJlZj0iaHR0cDovL3d3dy5sYXN0LmZtIj5MYXN0LmZtIE11c2ljPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9nbyBjb2wteHMtMTIgY29sLXNtLTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5BdWRpb3Njcm9iYmxlcjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9zdGF0aWMvaW1hZ2VzL2Zvb3Rlcl9sb2dvQDJ4LjQ5Y2E1MTk0OGIwYS5wbmciIHdpZHRoPSIzNyIgaGVpZ2h0PSIyMCIgYWx0PSJMYXN0LmZtICdhcycgbG9nbyI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImZlZWRiYWNrLW1lc3NhZ2UiPgogICAgPGRpdiBjbGFzcz0iZmVlZGJhY2stbWVzc2FnZS1pbm5lciI+CiAgICAgICAgPHA+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoaWRkZW4teHMiPgogICAgICAgICAgICAgICAgTGV0IHVzIGtub3cgd2hhdCB5b3UgdGhpbmsgb2YgdGhlIExhc3QuZm0gd2Vic2l0ZS4KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vY2JzaS5mb3JjZS5jb20vQ0JTaS90ZW1wbGF0ZV9sZm1mYms/cF91c2VyaWQ9IiB0YXJnZXQ9Il9ibGFuayI+TGVhdmUgZmVlZGJhY2s8L2E+CiAgICAgICAgPC9wPgogICAgPC9kaXY+CjwvZGl2PgogICAgPC9mb290ZXI+CgoKICAgIDxzZWN0aW9uIGNsYXNzPSJkZWJ1Zy1sb2ciPgogICAgPGgyIGNsYXNzPSJkZWJ1Zy1sb2ctaGVhZGluZyI+QVBJIENhbGxzPC9oMj4KICAgIAo8L3NlY3Rpb24+CgoKICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAogICAgICAgIDxkaXYKICAgICAgICAgICAgZGF0YS1hZHMtYmVhY29uCiAgICAgICAgICAgIGRhdGEtYWRzLXRhcmdldGluZz0neyYjMzQ7Z2VvJiMzNDs6ICYjMzQ7TkMmIzM0OywgJiMzNDtsYW5nJiMzNDs6ICYjMzQ7ZW4mIzM0OywgJiMzNDtiZXRhJiMzNDs6ICYjMzQ7eWVzJiMzNDssICYjMzQ7cHR5cGUmIzM0OzogJiMzNDt1c2VyX2Rvb3ImIzM0OywgJiMzNDthciYjMzQ7OiAmIzM0O2RydW1zb3VuZCZhbXA7YmFzc2xpbmVzbWl0aCxtZXRyaWsseW91c2VmLHBhc2NhbGZlb3MsZHVieixib3JkZXJsaW5lJiMzNDt9JwogICAgICAgICAgICBkYXRhLWFkcy11bml0bmFtZT0nLzgyNjQvcm93LWxhc3RmbS91c2VyL292ZXJ2aWV3JwogICAgICAgICAgICBkYXRhLWFkcy11bml0bmFtZS1tb2JpbGU9Jy84MjY0L21hdy1sYXN0Zm0vdXNlci9vdmVydmlldycKICAgICAgICA+PC9kaXY+CiAgICAKCiAgICA8L2Rpdj4KCiAgICAKICAgICAgICA8ZGl2CiAgICAgICAgICAgIGRhdGEtcmVxdWlyZT0icGxheWVyL3Byb3ZpZGVycy9zcG90aWZ5L3Nwb3RpZnktcHJvdmlkZXIiCiAgICAgICAgICAgIGRhdGEtc3BvdGlmeS1hdXRoLW1vZGFsPSIvcGxheWVyL21vZGFsL3Nwb3RpZnkiCiAgICAgICAgICAgIGRhdGEtc3BvdGlmeS1wcmVtaXVtLW1vZGFsPSIvcGxheWVyL21vZGFsL3Nwb3RpZnktcHJlbWl1bSIKICAgICAgICAgICAgZGF0YS1zcG90aWZ5LWluYWN0aXZlLW1vZGFsPSIvcGxheWVyL21vZGFsL3Nwb3RpZnktaW5hY3RpdmUiCiAgICAgICAgICAgIGRhdGEtc3BvdGlmeS1pbml0aWFsLWRldmljZS1tb2RhbD0iL3BsYXllci9tb2RhbC9zcG90aWZ5LWluaXRpYWwtZGV2aWNlLWRldGVjdGlvbiIKICAgICAgICA+PC9kaXY+CgogICAgICAgIDxkaXYKICAgICAgICAgICAgZGF0YS1yZXF1aXJlPSJwbGF5ZXIvcHJvdmlkZXJzL3lvdXR1YmUveW91dHViZS1wcm92aWRlciIKICAgICAgICAgICAgY2xhc3M9InZpZGVvLXBsYXllciIKICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgIGlkPSJ5b3V0dWJlLXZpZGVvIgogICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idmlkZW8tcGxheWVyLWlubmVyLXdyYXAiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idmlkZW8tcGxheWVyLWVtYmVkIGpzLXBsYXllciI+PC9kaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICB2aWRlby1wbGF5ZXItY2xvc2UKICAgICAgICAgICAgICAgICAgICBqcy1jbG9zZS1wbGF5ZXIKICAgICAgICAgICAgICAgICI+Q2xvc2U8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAKCiAgICAKICAgICAgICAKICAgIAoKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJpbnRyb21lcmNpYWwiIGRhdGEtYWQ9ImludHJvbWVyY2lhbCIgY2xhc3M9ImludHJvbWVyY2lhbCBsYXN0Zm0tYWQiIGRhdGEtYWRzLXBsYWNlbWVudD0neyYjMzQ7aWQmIzM0OzogJiMzNDtpbnRyb21lcmNpYWwmIzM0OywgJiMzNDtvdXRfb2ZfcGFnZSYjMzQ7OiB0cnVlfSc+PC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgaWQ9Im1vYmlsZV9pbnRyb21lcmNpYWwiIGRhdGEtYWQ9Im1vYmlsZV9pbnRyb21lcmNpYWwiIGNsYXNzPSJtb2JpbGVfaW50cm9tZXJjaWFsIGxhc3RmbS1hZC1tb2JpbGUiIGRhdGEtYWRzLXBsYWNlbWVudD0neyYjMzQ7aWQmIzM0OzogJiMzNDttb2JpbGVfaW50cm9tZXJjaWFsJiMzNDssICYjMzQ7aXNfbW9iaWxlJiMzNDs6IHRydWUsICYjMzQ7b3V0X29mX3BhZ2UmIzM0OzogdHJ1ZX0nPjwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgIAoKICAgICAgICA8c2NyaXB0IGNsYXNzPSJqcy1tb2RhbC10ZW1wbGF0ZSIgdHlwZT0idGV4dC90ZW1wbGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9Im1vZGFsLWxhYmVsIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im1vZGFsLWRpc21pc3MganMtY2xvc2UiPkNsb3NlPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGgyCiAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJtb2RhbC1sYWJlbCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1vZGFsLXRpdGxlIGpzLW1vZGFsLXRpdGxlIgogICAgICAgICAgICAgICAgICAgID48L2gyPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkganMtbW9kYWwtYm9keSI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9zY3JpcHQ+CgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8c2NyaXB0IGNsYXNzPSJqcy1hZGJsb2NrLW1lc3NhZ2UtdGVtcGxhdGUiIHR5cGU9InRleHQvdGVtcGxhdGUiPgogICAgICAgICAgICAgICAgCiAgICAKICAgIDxkaXY+PGRpdj4KICAgICAgICA8c2VjdGlvbiBjbGFzcz0iCiAgICAgICAgICAgIGFkYmxvY2stbWVzc2FnZQogICAgICAgICAgICBhZGJsb2NrLW1lc3NhZ2UtLWFkZnJlZQogICAgICAgICAgICBsaW5rLWJsb2NrCiAgICAgICAgICAgIGpzLWxpbmstYmxvY2sKICAgICAgICAiPgogICAgICAgICAgICA8cCBjbGFzcz0iYWRibG9jay1tZXNzYWdlLWJvZHkiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5Ccm93c2UgYWQtZnJlZTwvc3Ryb25nPiB3aXRoIGEgcHJlbWl1bSBMYXN0LmZtIGFjY291bnQKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9ImFkYmxvY2stbWVzc2FnZS1idXR0b24gbGluay1ibG9jay10YXJnZXQiCiAgICAgICAgICAgICAgICBocmVmPSIvc3Vic2NyaWJlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJTdWJzY3JpYmVDbGljayIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBZGJsb2NrTWVzc2FnZUFkZnJlZSIKICAgICAgICAgICAgPkZpbmQgb3V0IG1vcmU8L2E+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBocmVmPSIvc3Vic2NyaWJlIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGpzLWxpbmstYmxvY2stY292ZXItbGluawogICAgICAgICAgICAgICAgICAgIGxpbmstYmxvY2stY292ZXItbGluawogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgdGFiaW5kZXg9Ii0xIgogICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlN1YnNjcmliZUNsaWNrIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9IkFkYmxvY2tNZXNzYWdlQWRmcmVlIgogICAgICAgICAgICA+PC9hPgogICAgICAgIDwvc2VjdGlvbj4KICAgIDwvZGl2PjwvZGl2PgoKICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgIDxzY3JpcHQgY2xhc3M9ImpzLWFkYmxvY2stbWVzc2FnZS10ZW1wbGF0ZSIgdHlwZT0idGV4dC90ZW1wbGF0ZSI+CiAgICAgICAgICAgICAgICAKICAgIAogICAgPGRpdj48ZGl2PgogICAgICAgIDxzZWN0aW9uIGNsYXNzPSIKICAgICAgICAgICAgYWRibG9jay1tZXNzYWdlCiAgICAgICAgICAgIGFkYmxvY2stbWVzc2FnZS0tc3VwcG9ydAogICAgICAgICAgICBsaW5rLWJsb2NrCiAgICAgICAgICAgIGpzLWxpbmstYmxvY2sKICAgICAgICAiPgogICAgICAgICAgICA8cCBjbGFzcz0iYWRibG9jay1tZXNzYWdlLWJvZHkiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5TaG93IHlvdXIgc3VwcG9ydDwvc3Ryb25nPiB3aXRoIGEgcHJlbWl1bSBMYXN0LmZtIGFjY291bnQKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9ImFkYmxvY2stbWVzc2FnZS1idXR0b24gbGluay1ibG9jay10YXJnZXQiCiAgICAgICAgICAgICAgICBocmVmPSIvc3Vic2NyaWJlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJTdWJzY3JpYmVDbGljayIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBZGJsb2NrTWVzc2FnZVN1cHBvcnQiCiAgICAgICAgICAgID5GaW5kIG91dCBtb3JlPC9hPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgaHJlZj0iL3N1YnNjcmliZSIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBqcy1saW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICAgICBsaW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJTdWJzY3JpYmVDbGljayIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBZGJsb2NrTWVzc2FnZVN1cHBvcnQiCiAgICAgICAgICAgID48L2E+CiAgICAgICAgPC9zZWN0aW9uPgogICAgPC9kaXY+PC9kaXY+CgogICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgPHNjcmlwdCBjbGFzcz0ianMtYWRibG9jay1tZXNzYWdlLXRlbXBsYXRlIiB0eXBlPSJ0ZXh0L3RlbXBsYXRlIj4KICAgICAgICAgICAgICAgIAogICAgCiAgICA8ZGl2PjxkaXY+CiAgICAgICAgPHNlY3Rpb24gY2xhc3M9IgogICAgICAgICAgICBhZGJsb2NrLW1lc3NhZ2UKICAgICAgICAgICAgYWRibG9jay1tZXNzYWdlLS1iZW5lZml0cwogICAgICAgICAgICBsaW5rLWJsb2NrCiAgICAgICAgICAgIGpzLWxpbmstYmxvY2sKICAgICAgICAiPgogICAgICAgICAgICA8cCBjbGFzcz0iYWRibG9jay1tZXNzYWdlLWJvZHkiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5HZXQgZXhjbHVzaXZlIGJlbmVmaXRzPC9zdHJvbmc+IHdpdGggYSBwcmVtaXVtIExhc3QuZm0gYWNjb3VudAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iYWRibG9jay1tZXNzYWdlLWJ1dHRvbiBsaW5rLWJsb2NrLXRhcmdldCIKICAgICAgICAgICAgICAgIGhyZWY9Ii9zdWJzY3JpYmUiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlN1YnNjcmliZUNsaWNrIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9IkFkYmxvY2tNZXNzYWdlQmVuZWZpdHMiCiAgICAgICAgICAgID5GaW5kIG91dCBtb3JlPC9hPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgaHJlZj0iL3N1YnNjcmliZSIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBqcy1saW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICAgICBsaW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJTdWJzY3JpYmVDbGljayIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBZGJsb2NrTWVzc2FnZUJlbmVmaXRzIgogICAgICAgICAgICA+PC9hPgogICAgICAgIDwvc2VjdGlvbj4KICAgIDwvZGl2PjwvZGl2PgoKICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgCgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgIHdpbmRvdy5sZm1Eb21SZWFkeUNhbGxiYWNrICYmIHdpbmRvdy5sZm1Eb21SZWFkeUNhbGxiYWNrKCk7CiAgICAgICAgICAgIHdpbmRvdy5sZm1Eb21SZWFkeSA9IHRydWU7CiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgCiAgICAgICAgICAgIDxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzL2J1aWxkL2I3ZDZmZmVkNzAuYjdkNmZmZWQ3MDE2LmNzcyIgcmVsPSJwcmVsb2FkIiBhcz0ic3R5bGUiIGNoYXJzZXQ9InV0Zi04IiBkYXRhLXJlcXVpcmU9InNoaW0vcmVsLXByZWxvYWQiPgogICAgICAgIAogICAgPC9ib2R5Pgo8L2h0bWw+
    http_version: 
  recorded_at: Fri, 12 Jul 2019 08:28:01 GMT
- request:
    method: get
    uri: https://www.last.fm/user/alexistoulotte/library/tracks?date_preset=LAST_90_DAYS
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/user/alexistoulotte/library/tracks?date_preset=LAST_90_DAYS
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      X-Served-By:
      - ws340
      Vary:
      - Accept-Encoding
      - User-Agent
      - cookie
      Expires:
      - Fri, 12 Jul 2019 08:28:02 GMT
      Cache-Control:
      - max-age=0, no-cache, no-store
      Pragma:
      - no-cache
      Date:
      - Fri, 12 Jul 2019 08:28:02 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Set-Cookie:
      - csrftoken=yaI1c68vmLz96QMmYwjkup4kAZoTPzOw; expires=Fri, 10-Jul-2020 08:28:02
        GMT; Max-Age=31449600; Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=.eJwNy9EKwiAUANB_uc8JU-aae-4P1kMQcVHvNYW1xdRaRP_eXg-cL6CtJWLNvGK0OcIAxMHWqcABMueclhkT7ax90PLIUjjZ96J1JIUh1wlugyHpG9XpZj-8-akSE_L25DU9eC4Zhit49X4JNuP5NFKN4hJR-c8dbr8_JOQq-Q:1hlquQ:tgtICoMUlNVGRt6I7JrbuD5pkCA;
        Domain=.last.fm; expires=Sat, 11-Jul-2020 08:28:02 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 12 Jul 2019 08:28:03 GMT
- request:
    method: get
    uri: https://www.last.fm/user/alexistoulotte/library/tracks?date_preset=LAST_90_DAYS&page=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Pjax-Url:
      - https://www.last.fm/user/alexistoulotte/library/tracks?date_preset=LAST_90_DAYS&page=1
      Content-Language:
      - en
      X-Frame-Options:
      - SAMEORIGIN
      X-Served-By:
      - ws339
      Vary:
      - Accept-Encoding
      - User-Agent
      - cookie
      Expires:
      - Fri, 12 Jul 2019 08:28:04 GMT
      Cache-Control:
      - max-age=0, no-cache, no-store
      Pragma:
      - no-cache
      Date:
      - Fri, 12 Jul 2019 08:28:04 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Set-Cookie:
      - csrftoken=uwGaBkXLv7MfK2giRrIga9kZPDKVDdmU; expires=Fri, 10-Jul-2020 08:28:04
        GMT; Max-Age=31449600; Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=.eJwNy0EKwjAQAMC_7NmFkjQ19uwP6kEQCZtkYwK1SrfRivh3ex2YLziqS3ZVeHaZJEMPkRPVcYEdCIuUx-RK3FgFb7quIdSWE7aaLHpjCNVet7bRNmmftsNrGGvk6Hh98lzuPC0C_QWCer-QD8PpOMSa8ZydCp8bXH9_FKUqyA:1hlquS:kWhg4hkJnZnqJuA4-2Qy93b0Npo;
        Domain=.last.fm; expires=Sat, 11-Jul-2020 08:28:04 GMT; HttpOnly; Max-Age=31536000;
        Path=/; Secure
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        CgoKCgoKPCFkb2N0eXBlIGh0bWw+CjxodG1sCiAgICBsYW5nPSJlbiIKICAgIGNsYXNzPSIKICAgICAgICBuby1qcwogICAgICAgIHBsYXliYXItbWFzdGhlYWQtcmVsZWFzZS1zaGltCiAgICAgICAgeW91dHViZS1wcm92aWRlci1ub3QtcmVhZHkKICAgICIKPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPih3aW5kb3cuTlJFVU18fChOUkVVTT17fSkpLmxvYWRlcl9jb25maWc9e3hwaWQ6IlV3WVBWMTVRR3dZRlhGbFhEZ1U9In07d2luZG93Lk5SRVVNfHwoTlJFVU09e30pLF9fbnJfcmVxdWlyZT1mdW5jdGlvbih0LG4sZSl7ZnVuY3Rpb24gcihlKXtpZighbltlXSl7dmFyIG89bltlXT17ZXhwb3J0czp7fX07dFtlXVswXS5jYWxsKG8uZXhwb3J0cyxmdW5jdGlvbihuKXt2YXIgbz10W2VdWzFdW25dO3JldHVybiByKG98fG4pfSxvLG8uZXhwb3J0cyl9cmV0dXJuIG5bZV0uZXhwb3J0c31pZigiZnVuY3Rpb24iPT10eXBlb2YgX19ucl9yZXF1aXJlKXJldHVybiBfX25yX3JlcXVpcmU7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspcihlW29dKTtyZXR1cm4gcn0oezE6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQpe3RyeXtzLmNvbnNvbGUmJmNvbnNvbGUubG9nKHQpfWNhdGNoKG4pe319dmFyIG8saT10KCJlZSIpLGE9dCgxOCkscz17fTt0cnl7bz1sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiX19ucl9mbGFncyIpLnNwbGl0KCIsIiksY29uc29sZSYmImZ1bmN0aW9uIj09dHlwZW9mIGNvbnNvbGUubG9nJiYocy5jb25zb2xlPSEwLG8uaW5kZXhPZigiZGV2IikhPT0tMSYmKHMuZGV2PSEwKSxvLmluZGV4T2YoIm5yX2RldiIpIT09LTEmJihzLm5yRGV2PSEwKSl9Y2F0Y2goYyl7fXMubnJEZXYmJmkub24oImludGVybmFsLWVycm9yIixmdW5jdGlvbih0KXtyKHQuc3RhY2spfSkscy5kZXYmJmkub24oImZuLWVyciIsZnVuY3Rpb24odCxuLGUpe3IoZS5zdGFjayl9KSxzLmRldiYmKHIoIk5SIEFHRU5UIElOIERFVkVMT1BNRU5UIE1PREUiKSxyKCJmbGFnczogIithKHMsZnVuY3Rpb24odCxuKXtyZXR1cm4gdH0pLmpvaW4oIiwgIikpKX0se31dLDI6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbixlLHIscyl7dHJ5e3A/cC09MTpvKHN8fG5ldyBVbmNhdWdodEV4Y2VwdGlvbih0LG4sZSksITApfWNhdGNoKGYpe3RyeXtpKCJpZXJyIixbZixjLm5vdygpLCEwXSl9Y2F0Y2goZCl7fX1yZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgdSYmdS5hcHBseSh0aGlzLGEoYXJndW1lbnRzKSl9ZnVuY3Rpb24gVW5jYXVnaHRFeGNlcHRpb24odCxuLGUpe3RoaXMubWVzc2FnZT10fHwiVW5jYXVnaHQgZXJyb3Igd2l0aCBubyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIix0aGlzLnNvdXJjZVVSTD1uLHRoaXMubGluZT1lfWZ1bmN0aW9uIG8odCxuKXt2YXIgZT1uP251bGw6Yy5ub3coKTtpKCJlcnIiLFt0LGVdKX12YXIgaT10KCJoYW5kbGUiKSxhPXQoMTkpLHM9dCgiZWUiKSxjPXQoImxvYWRlciIpLGY9dCgiZ29zIiksdT13aW5kb3cub25lcnJvcixkPSExLGw9Im5yQHNlZW5FcnJvciIscD0wO2MuZmVhdHVyZXMuZXJyPSEwLHQoMSksd2luZG93Lm9uZXJyb3I9cjt0cnl7dGhyb3cgbmV3IEVycm9yfWNhdGNoKGgpeyJzdGFjayJpbiBoJiYodCg4KSx0KDcpLCJhZGRFdmVudExpc3RlbmVyImluIHdpbmRvdyYmdCg1KSxjLnhocldyYXBwYWJsZSYmdCg5KSxkPSEwKX1zLm9uKCJmbi1zdGFydCIsZnVuY3Rpb24odCxuLGUpe2QmJihwKz0xKX0pLHMub24oImZuLWVyciIsZnVuY3Rpb24odCxuLGUpe2QmJiFlW2xdJiYoZihlLGwsZnVuY3Rpb24oKXtyZXR1cm4hMH0pLHRoaXMudGhyb3duPSEwLG8oZSkpfSkscy5vbigiZm4tZW5kIixmdW5jdGlvbigpe2QmJiF0aGlzLnRocm93biYmcD4wJiYocC09MSl9KSxzLm9uKCJpbnRlcm5hbC1lcnJvciIsZnVuY3Rpb24odCl7aSgiaWVyciIsW3QsYy5ub3coKSwhMF0pfSl9LHt9XSwzOltmdW5jdGlvbih0LG4sZSl7dCgibG9hZGVyIikuZmVhdHVyZXMuaW5zPSEwfSx7fV0sNDpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCl7fWlmKHdpbmRvdy5wZXJmb3JtYW5jZSYmd2luZG93LnBlcmZvcm1hbmNlLnRpbWluZyYmd2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUpe3ZhciBvPXQoImVlIiksaT10KCJoYW5kbGUiKSxhPXQoOCkscz10KDcpLGM9ImxlYXJSZXNvdXJjZVRpbWluZ3MiLGY9ImFkZEV2ZW50TGlzdGVuZXIiLHU9InJlc291cmNldGltaW5nYnVmZmVyZnVsbCIsZD0iYnN0UmVzb3VyY2UiLGw9InJlc291cmNlIixwPSItc3RhcnQiLGg9Ii1lbmQiLG09ImZuIitwLHc9ImZuIitoLHY9ImJzdFRpbWVyIix5PSJwdXNoU3RhdGUiLGc9dCgibG9hZGVyIik7Zy5mZWF0dXJlcy5zdG49ITAsdCg2KTt2YXIgeD1OUkVVTS5vLkVWO28ub24obSxmdW5jdGlvbih0LG4pe3ZhciBlPXRbMF07ZSBpbnN0YW5jZW9mIHgmJih0aGlzLmJzdFN0YXJ0PWcubm93KCkpfSksby5vbih3LGZ1bmN0aW9uKHQsbil7dmFyIGU9dFswXTtlIGluc3RhbmNlb2YgeCYmaSgiYnN0IixbZSxuLHRoaXMuYnN0U3RhcnQsZy5ub3coKV0pfSksYS5vbihtLGZ1bmN0aW9uKHQsbixlKXt0aGlzLmJzdFN0YXJ0PWcubm93KCksdGhpcy5ic3RUeXBlPWV9KSxhLm9uKHcsZnVuY3Rpb24odCxuKXtpKHYsW24sdGhpcy5ic3RTdGFydCxnLm5vdygpLHRoaXMuYnN0VHlwZV0pfSkscy5vbihtLGZ1bmN0aW9uKCl7dGhpcy5ic3RTdGFydD1nLm5vdygpfSkscy5vbih3LGZ1bmN0aW9uKHQsbil7aSh2LFtuLHRoaXMuYnN0U3RhcnQsZy5ub3coKSwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIl0pfSksby5vbih5K3AsZnVuY3Rpb24odCl7dGhpcy50aW1lPWcubm93KCksdGhpcy5zdGFydFBhdGg9bG9jYXRpb24ucGF0aG5hbWUrbG9jYXRpb24uaGFzaH0pLG8ub24oeStoLGZ1bmN0aW9uKHQpe2koImJzdEhpc3QiLFtsb2NhdGlvbi5wYXRobmFtZStsb2NhdGlvbi5oYXNoLHRoaXMuc3RhcnRQYXRoLHRoaXMudGltZV0pfSksZiBpbiB3aW5kb3cucGVyZm9ybWFuY2UmJih3aW5kb3cucGVyZm9ybWFuY2VbImMiK2NdP3dpbmRvdy5wZXJmb3JtYW5jZVtmXSh1LGZ1bmN0aW9uKHQpe2koZCxbd2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUobCldKSx3aW5kb3cucGVyZm9ybWFuY2VbImMiK2NdKCl9LCExKTp3aW5kb3cucGVyZm9ybWFuY2VbZl0oIndlYmtpdCIrdSxmdW5jdGlvbih0KXtpKGQsW3dpbmRvdy5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKGwpXSksd2luZG93LnBlcmZvcm1hbmNlWyJ3ZWJraXRDIitjXSgpfSwhMSkpLGRvY3VtZW50W2ZdKCJzY3JvbGwiLHIse3Bhc3NpdmU6ITB9KSxkb2N1bWVudFtmXSgia2V5cHJlc3MiLHIsITEpLGRvY3VtZW50W2ZdKCJjbGljayIsciwhMSl9fSx7fV0sNTpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCl7Zm9yKHZhciBuPXQ7biYmIW4uaGFzT3duUHJvcGVydHkodSk7KW49T2JqZWN0LmdldFByb3RvdHlwZU9mKG4pO24mJm8obil9ZnVuY3Rpb24gbyh0KXtzLmluUGxhY2UodCxbdSxkXSwiLSIsaSl9ZnVuY3Rpb24gaSh0LG4pe3JldHVybiB0WzFdfXZhciBhPXQoImVlIikuZ2V0KCJldmVudHMiKSxzPXQoMjEpKGEsITApLGM9dCgiZ29zIiksZj1YTUxIdHRwUmVxdWVzdCx1PSJhZGRFdmVudExpc3RlbmVyIixkPSJyZW1vdmVFdmVudExpc3RlbmVyIjtuLmV4cG9ydHM9YSwiZ2V0UHJvdG90eXBlT2YiaW4gT2JqZWN0PyhyKGRvY3VtZW50KSxyKHdpbmRvdykscihmLnByb3RvdHlwZSkpOmYucHJvdG90eXBlLmhhc093blByb3BlcnR5KHUpJiYobyh3aW5kb3cpLG8oZi5wcm90b3R5cGUpKSxhLm9uKHUrIi1zdGFydCIsZnVuY3Rpb24odCxuKXt2YXIgZT10WzFdLHI9YyhlLCJuckB3cmFwcGVkIixmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtpZigiZnVuY3Rpb24iPT10eXBlb2YgZS5oYW5kbGVFdmVudClyZXR1cm4gZS5oYW5kbGVFdmVudC5hcHBseShlLGFyZ3VtZW50cyl9dmFyIG49e29iamVjdDp0LCJmdW5jdGlvbiI6ZX1bdHlwZW9mIGVdO3JldHVybiBuP3MobiwiZm4tIixudWxsLG4ubmFtZXx8ImFub255bW91cyIpOmV9KTt0aGlzLndyYXBwZWQ9dFsxXT1yfSksYS5vbihkKyItc3RhcnQiLGZ1bmN0aW9uKHQpe3RbMV09dGhpcy53cmFwcGVkfHx0WzFdfSl9LHt9XSw2OltmdW5jdGlvbih0LG4sZSl7dmFyIHI9dCgiZWUiKS5nZXQoImhpc3RvcnkiKSxvPXQoMjEpKHIpO24uZXhwb3J0cz1yLG8uaW5QbGFjZSh3aW5kb3cuaGlzdG9yeSxbInB1c2hTdGF0ZSIsInJlcGxhY2VTdGF0ZSJdLCItIil9LHt9XSw3OltmdW5jdGlvbih0LG4sZSl7dmFyIHI9dCgiZWUiKS5nZXQoInJhZiIpLG89dCgyMSkociksaT0iZXF1ZXN0QW5pbWF0aW9uRnJhbWUiO24uZXhwb3J0cz1yLG8uaW5QbGFjZSh3aW5kb3csWyJyIitpLCJtb3pSIitpLCJ3ZWJraXRSIitpLCJtc1IiK2ldLCJyYWYtIiksci5vbigicmFmLXN0YXJ0IixmdW5jdGlvbih0KXt0WzBdPW8odFswXSwiZm4tIil9KX0se31dLDg6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbixlKXt0WzBdPWEodFswXSwiZm4tIixudWxsLGUpfWZ1bmN0aW9uIG8odCxuLGUpe3RoaXMubWV0aG9kPWUsdGhpcy50aW1lckR1cmF0aW9uPWlzTmFOKHRbMV0pPzA6K3RbMV0sdFswXT1hKHRbMF0sImZuLSIsdGhpcyxlKX12YXIgaT10KCJlZSIpLmdldCgidGltZXIiKSxhPXQoMjEpKGkpLHM9InNldFRpbWVvdXQiLGM9InNldEludGVydmFsIixmPSJjbGVhclRpbWVvdXQiLHU9Ii1zdGFydCIsZD0iLSI7bi5leHBvcnRzPWksYS5pblBsYWNlKHdpbmRvdyxbcywic2V0SW1tZWRpYXRlIl0scytkKSxhLmluUGxhY2Uod2luZG93LFtjXSxjK2QpLGEuaW5QbGFjZSh3aW5kb3csW2YsImNsZWFySW1tZWRpYXRlIl0sZitkKSxpLm9uKGMrdSxyKSxpLm9uKHMrdSxvKX0se31dLDk6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbil7ZC5pblBsYWNlKG4sWyJvbnJlYWR5c3RhdGVjaGFuZ2UiXSwiZm4tIixzKX1mdW5jdGlvbiBvKCl7dmFyIHQ9dGhpcyxuPXUuY29udGV4dCh0KTt0LnJlYWR5U3RhdGU+MyYmIW4ucmVzb2x2ZWQmJihuLnJlc29sdmVkPSEwLHUuZW1pdCgieGhyLXJlc29sdmVkIixbXSx0KSksZC5pblBsYWNlKHQseSwiZm4tIixzKX1mdW5jdGlvbiBpKHQpe2cucHVzaCh0KSxoJiYoYj9iLnRoZW4oYSk6dz93KGEpOihFPS1FLFIuZGF0YT1FKSl9ZnVuY3Rpb24gYSgpe2Zvcih2YXIgdD0wO3Q8Zy5sZW5ndGg7dCsrKXIoW10sZ1t0XSk7Zy5sZW5ndGgmJihnPVtdKX1mdW5jdGlvbiBzKHQsbil7cmV0dXJuIG59ZnVuY3Rpb24gYyh0LG4pe2Zvcih2YXIgZSBpbiB0KW5bZV09dFtlXTtyZXR1cm4gbn10KDUpO3ZhciBmPXQoImVlIiksdT1mLmdldCgieGhyIiksZD10KDIxKSh1KSxsPU5SRVVNLm8scD1sLlhIUixoPWwuTU8sbT1sLlBSLHc9bC5TSSx2PSJyZWFkeXN0YXRlY2hhbmdlIix5PVsib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbmxvYWRzdGFydCIsIm9ubG9hZGVuZCIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiXSxnPVtdO24uZXhwb3J0cz11O3ZhciB4PXdpbmRvdy5YTUxIdHRwUmVxdWVzdD1mdW5jdGlvbih0KXt2YXIgbj1uZXcgcCh0KTt0cnl7dS5lbWl0KCJuZXcteGhyIixbbl0sbiksbi5hZGRFdmVudExpc3RlbmVyKHYsbywhMSl9Y2F0Y2goZSl7dHJ5e3UuZW1pdCgiaW50ZXJuYWwtZXJyb3IiLFtlXSl9Y2F0Y2gocil7fX1yZXR1cm4gbn07aWYoYyhwLHgpLHgucHJvdG90eXBlPXAucHJvdG90eXBlLGQuaW5QbGFjZSh4LnByb3RvdHlwZSxbIm9wZW4iLCJzZW5kIl0sIi14aHItIixzKSx1Lm9uKCJzZW5kLXhoci1zdGFydCIsZnVuY3Rpb24odCxuKXtyKHQsbiksaShuKX0pLHUub24oIm9wZW4teGhyLXN0YXJ0IixyKSxoKXt2YXIgYj1tJiZtLnJlc29sdmUoKTtpZighdyYmIW0pe3ZhciBFPTEsUj1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShFKTtuZXcgaChhKS5vYnNlcnZlKFIse2NoYXJhY3RlckRhdGE6ITB9KX19ZWxzZSBmLm9uKCJmbi1lbmQiLGZ1bmN0aW9uKHQpe3RbMF0mJnRbMF0udHlwZT09PXZ8fGEoKX0pfSx7fV0sMTA6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKCl7dmFyIHQ9d2luZG93Lk5SRVVNLG49dC5pbmZvLmFjY291bnRJRHx8bnVsbCxlPXQuaW5mby5hZ2VudElEfHxudWxsLHI9dC5pbmZvLnRydXN0S2V5fHxudWxsLGk9ImJ0b2EiaW4gd2luZG93JiYiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93LmJ0b2E7aWYoIW58fCFlfHwhaSlyZXR1cm4gbnVsbDt2YXIgYT17djpbMCwxXSxkOnt0eToiQnJvd3NlciIsYWM6bixhcDplLGlkOm8uZ2VuZXJhdGVDYXRJZCgpLHRyOm8uZ2VuZXJhdGVDYXRJZCgpLHRpOkRhdGUubm93KCl9fTtyZXR1cm4gciYmbiE9PXImJihhLmQudGs9ciksYnRvYShKU09OLnN0cmluZ2lmeShhKSl9dmFyIG89dCgxNik7bi5leHBvcnRzPXtnZW5lcmF0ZVRyYWNlSGVhZGVyOnJ9fSx7fV0sMTE6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQpe3ZhciBuPXRoaXMucGFyYW1zLGU9dGhpcy5tZXRyaWNzO2lmKCF0aGlzLmVuZGVkKXt0aGlzLmVuZGVkPSEwO2Zvcih2YXIgcj0wO3I8cDtyKyspdC5yZW1vdmVFdmVudExpc3RlbmVyKGxbcl0sdGhpcy5saXN0ZW5lciwhMSk7bi5hYm9ydGVkfHwoZS5kdXJhdGlvbj1zLm5vdygpLXRoaXMuc3RhcnRUaW1lLHRoaXMubG9hZENhcHR1cmVDYWxsZWR8fDQhPT10LnJlYWR5U3RhdGU/bnVsbD09bi5zdGF0dXMmJihuLnN0YXR1cz0wKTphKHRoaXMsdCksZS5jYlRpbWU9dGhpcy5jYlRpbWUsZC5lbWl0KCJ4aHItZG9uZSIsW3RdLHQpLGMoInhociIsW24sZSx0aGlzLnN0YXJ0VGltZV0pKX19ZnVuY3Rpb24gbyh0LG4pe3ZhciBlPXQucmVzcG9uc2VUeXBlO2lmKCJqc29uIj09PWUmJm51bGwhPT1uKXJldHVybiBuO3ZhciByPSJhcnJheWJ1ZmZlciI9PT1lfHwiYmxvYiI9PT1lfHwianNvbiI9PT1lP3QucmVzcG9uc2U6dC5yZXNwb25zZVRleHQ7cmV0dXJuIHcocil9ZnVuY3Rpb24gaSh0LG4pe3ZhciBlPWYobikscj10LnBhcmFtcztyLmhvc3Q9ZS5ob3N0bmFtZSsiOiIrZS5wb3J0LHIucGF0aG5hbWU9ZS5wYXRobmFtZSx0LnNhbWVPcmlnaW49ZS5zYW1lT3JpZ2lufWZ1bmN0aW9uIGEodCxuKXt0LnBhcmFtcy5zdGF0dXM9bi5zdGF0dXM7dmFyIGU9byhuLHQubGFzdFNpemUpO2lmKGUmJih0Lm1ldHJpY3MucnhTaXplPWUpLHQuc2FtZU9yaWdpbil7dmFyIHI9bi5nZXRSZXNwb25zZUhlYWRlcigiWC1OZXdSZWxpYy1BcHAtRGF0YSIpO3ImJih0LnBhcmFtcy5jYXQ9ci5zcGxpdCgiLCAiKS5wb3AoKSl9dC5sb2FkQ2FwdHVyZUNhbGxlZD0hMH12YXIgcz10KCJsb2FkZXIiKTtpZihzLnhocldyYXBwYWJsZSl7dmFyIGM9dCgiaGFuZGxlIiksZj10KDEyKSx1PXQoMTApLmdlbmVyYXRlVHJhY2VIZWFkZXIsZD10KCJlZSIpLGw9WyJsb2FkIiwiZXJyb3IiLCJhYm9ydCIsInRpbWVvdXQiXSxwPWwubGVuZ3RoLGg9dCgiaWQiKSxtPXQoMTUpLHc9dCgxNCksdj13aW5kb3cuWE1MSHR0cFJlcXVlc3Q7cy5mZWF0dXJlcy54aHI9ITAsdCg5KSxkLm9uKCJuZXcteGhyIixmdW5jdGlvbih0KXt2YXIgbj10aGlzO24udG90YWxDYnM9MCxuLmNhbGxlZD0wLG4uY2JUaW1lPTAsbi5lbmQ9cixuLmVuZGVkPSExLG4ueGhyR3VpZHM9e30sbi5sYXN0U2l6ZT1udWxsLG4ubG9hZENhcHR1cmVDYWxsZWQ9ITEsdC5hZGRFdmVudExpc3RlbmVyKCJsb2FkIixmdW5jdGlvbihlKXthKG4sdCl9LCExKSxtJiYobT4zNHx8bTwxMCl8fHdpbmRvdy5vcGVyYXx8dC5hZGRFdmVudExpc3RlbmVyKCJwcm9ncmVzcyIsZnVuY3Rpb24odCl7bi5sYXN0U2l6ZT10LmxvYWRlZH0sITEpfSksZC5vbigib3Blbi14aHItc3RhcnQiLGZ1bmN0aW9uKHQpe3RoaXMucGFyYW1zPXttZXRob2Q6dFswXX0saSh0aGlzLHRbMV0pLHRoaXMubWV0cmljcz17fX0pLGQub24oIm9wZW4teGhyLWVuZCIsZnVuY3Rpb24odCxuKXsibG9hZGVyX2NvbmZpZyJpbiBOUkVVTSYmInhwaWQiaW4gTlJFVU0ubG9hZGVyX2NvbmZpZyYmdGhpcy5zYW1lT3JpZ2luJiZuLnNldFJlcXVlc3RIZWFkZXIoIlgtTmV3UmVsaWMtSUQiLE5SRVVNLmxvYWRlcl9jb25maWcueHBpZCk7dmFyIGU9ITE7aWYoImluaXQiaW4gTlJFVU0mJiJkaXN0cmlidXRlZF90cmFjaW5nImluIE5SRVVNLmluaXQmJihlPSEhTlJFVU0uaW5pdC5kaXN0cmlidXRlZF90cmFjaW5nLmVuYWJsZWQpLGUmJnRoaXMuc2FtZU9yaWdpbil7dmFyIHI9dSgpO3ImJm4uc2V0UmVxdWVzdEhlYWRlcigibmV3cmVsaWMiLHIpfX0pLGQub24oInNlbmQteGhyLXN0YXJ0IixmdW5jdGlvbih0LG4pe3ZhciBlPXRoaXMubWV0cmljcyxyPXRbMF0sbz10aGlzO2lmKGUmJnIpe3ZhciBpPXcocik7aSYmKGUudHhTaXplPWkpfXRoaXMuc3RhcnRUaW1lPXMubm93KCksdGhpcy5saXN0ZW5lcj1mdW5jdGlvbih0KXt0cnl7ImFib3J0IiE9PXQudHlwZXx8by5sb2FkQ2FwdHVyZUNhbGxlZHx8KG8ucGFyYW1zLmFib3J0ZWQ9ITApLCgibG9hZCIhPT10LnR5cGV8fG8uY2FsbGVkPT09by50b3RhbENicyYmKG8ub25sb2FkQ2FsbGVkfHwiZnVuY3Rpb24iIT10eXBlb2Ygbi5vbmxvYWQpKSYmby5lbmQobil9Y2F0Y2goZSl7dHJ5e2QuZW1pdCgiaW50ZXJuYWwtZXJyb3IiLFtlXSl9Y2F0Y2gocil7fX19O2Zvcih2YXIgYT0wO2E8cDthKyspbi5hZGRFdmVudExpc3RlbmVyKGxbYV0sdGhpcy5saXN0ZW5lciwhMSl9KSxkLm9uKCJ4aHItY2ItdGltZSIsZnVuY3Rpb24odCxuLGUpe3RoaXMuY2JUaW1lKz10LG4/dGhpcy5vbmxvYWRDYWxsZWQ9ITA6dGhpcy5jYWxsZWQrPTEsdGhpcy5jYWxsZWQhPT10aGlzLnRvdGFsQ2JzfHwhdGhpcy5vbmxvYWRDYWxsZWQmJiJmdW5jdGlvbiI9PXR5cGVvZiBlLm9ubG9hZHx8dGhpcy5lbmQoZSl9KSxkLm9uKCJ4aHItbG9hZC1hZGRlZCIsZnVuY3Rpb24odCxuKXt2YXIgZT0iIitoKHQpKyEhbjt0aGlzLnhockd1aWRzJiYhdGhpcy54aHJHdWlkc1tlXSYmKHRoaXMueGhyR3VpZHNbZV09ITAsdGhpcy50b3RhbENicys9MSl9KSxkLm9uKCJ4aHItbG9hZC1yZW1vdmVkIixmdW5jdGlvbih0LG4pe3ZhciBlPSIiK2godCkrISFuO3RoaXMueGhyR3VpZHMmJnRoaXMueGhyR3VpZHNbZV0mJihkZWxldGUgdGhpcy54aHJHdWlkc1tlXSx0aGlzLnRvdGFsQ2JzLT0xKX0pLGQub24oImFkZEV2ZW50TGlzdGVuZXItZW5kIixmdW5jdGlvbih0LG4pe24gaW5zdGFuY2VvZiB2JiYibG9hZCI9PT10WzBdJiZkLmVtaXQoInhoci1sb2FkLWFkZGVkIixbdFsxXSx0WzJdXSxuKX0pLGQub24oInJlbW92ZUV2ZW50TGlzdGVuZXItZW5kIixmdW5jdGlvbih0LG4pe24gaW5zdGFuY2VvZiB2JiYibG9hZCI9PT10WzBdJiZkLmVtaXQoInhoci1sb2FkLXJlbW92ZWQiLFt0WzFdLHRbMl1dLG4pfSksZC5vbigiZm4tc3RhcnQiLGZ1bmN0aW9uKHQsbixlKXtuIGluc3RhbmNlb2YgdiYmKCJvbmxvYWQiPT09ZSYmKHRoaXMub25sb2FkPSEwKSwoImxvYWQiPT09KHRbMF0mJnRbMF0udHlwZSl8fHRoaXMub25sb2FkKSYmKHRoaXMueGhyQ2JTdGFydD1zLm5vdygpKSl9KSxkLm9uKCJmbi1lbmQiLGZ1bmN0aW9uKHQsbil7dGhpcy54aHJDYlN0YXJ0JiZkLmVtaXQoInhoci1jYi10aW1lIixbcy5ub3coKS10aGlzLnhockNiU3RhcnQsdGhpcy5vbmxvYWQsbl0sbil9KX19LHt9XSwxMjpbZnVuY3Rpb24odCxuLGUpe24uZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIiksZT13aW5kb3cubG9jYXRpb24scj17fTtuLmhyZWY9dCxyLnBvcnQ9bi5wb3J0O3ZhciBvPW4uaHJlZi5zcGxpdCgiOi8vIik7IXIucG9ydCYmb1sxXSYmKHIucG9ydD1vWzFdLnNwbGl0KCIvIilbMF0uc3BsaXQoIkAiKS5wb3AoKS5zcGxpdCgiOiIpWzFdKSxyLnBvcnQmJiIwIiE9PXIucG9ydHx8KHIucG9ydD0iaHR0cHMiPT09b1swXT8iNDQzIjoiODAiKSxyLmhvc3RuYW1lPW4uaG9zdG5hbWV8fGUuaG9zdG5hbWUsci5wYXRobmFtZT1uLnBhdGhuYW1lLHIucHJvdG9jb2w9b1swXSwiLyIhPT1yLnBhdGhuYW1lLmNoYXJBdCgwKSYmKHIucGF0aG5hbWU9Ii8iK3IucGF0aG5hbWUpO3ZhciBpPSFuLnByb3RvY29sfHwiOiI9PT1uLnByb3RvY29sfHxuLnByb3RvY29sPT09ZS5wcm90b2NvbCxhPW4uaG9zdG5hbWU9PT1kb2N1bWVudC5kb21haW4mJm4ucG9ydD09PWUucG9ydDtyZXR1cm4gci5zYW1lT3JpZ2luPWkmJighbi5ob3N0bmFtZXx8YSkscn19LHt9XSwxMzpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIoKXt9ZnVuY3Rpb24gbyh0LG4sZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGkodCxbZi5ub3coKV0uY29uY2F0KHMoYXJndW1lbnRzKSksbj9udWxsOnRoaXMsZSksbj92b2lkIDA6dGhpc319dmFyIGk9dCgiaGFuZGxlIiksYT10KDE4KSxzPXQoMTkpLGM9dCgiZWUiKS5nZXQoInRyYWNlciIpLGY9dCgibG9hZGVyIiksdT1OUkVVTTsidW5kZWZpbmVkIj09dHlwZW9mIHdpbmRvdy5uZXdyZWxpYyYmKG5ld3JlbGljPXUpO3ZhciBkPVsic2V0UGFnZVZpZXdOYW1lIiwic2V0Q3VzdG9tQXR0cmlidXRlIiwic2V0RXJyb3JIYW5kbGVyIiwiZmluaXNoZWQiLCJhZGRUb1RyYWNlIiwiaW5saW5lSGl0IiwiYWRkUmVsZWFzZSJdLGw9ImFwaS0iLHA9bCsiaXhuLSI7YShkLGZ1bmN0aW9uKHQsbil7dVtuXT1vKGwrbiwhMCwiYXBpIil9KSx1LmFkZFBhZ2VBY3Rpb249byhsKyJhZGRQYWdlQWN0aW9uIiwhMCksdS5zZXRDdXJyZW50Um91dGVOYW1lPW8obCsicm91dGVOYW1lIiwhMCksbi5leHBvcnRzPW5ld3JlbGljLHUuaW50ZXJhY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHIpLmdldCgpfTt2YXIgaD1yLnByb3RvdHlwZT17Y3JlYXRlVHJhY2VyOmZ1bmN0aW9uKHQsbil7dmFyIGU9e30scj10aGlzLG89ImZ1bmN0aW9uIj09dHlwZW9mIG47cmV0dXJuIGkocCsidHJhY2VyIixbZi5ub3coKSx0LGVdLHIpLGZ1bmN0aW9uKCl7aWYoYy5lbWl0KChvPyIiOiJuby0iKSsiZm4tc3RhcnQiLFtmLm5vdygpLHIsb10sZSksbyl0cnl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKHQpe3Rocm93IGMuZW1pdCgiZm4tZXJyIixbYXJndW1lbnRzLHRoaXMsdF0sZSksdH1maW5hbGx5e2MuZW1pdCgiZm4tZW5kIixbZi5ub3coKV0sZSl9fX19O2EoImFjdGlvblRleHQsc2V0TmFtZSxzZXRBdHRyaWJ1dGUsc2F2ZSxpZ25vcmUsb25FbmQsZ2V0Q29udGV4dCxlbmQsZ2V0Ii5zcGxpdCgiLCIpLGZ1bmN0aW9uKHQsbil7aFtuXT1vKHArbil9KSxuZXdyZWxpYy5ub3RpY2VFcnJvcj1mdW5jdGlvbih0LG4peyJzdHJpbmciPT10eXBlb2YgdCYmKHQ9bmV3IEVycm9yKHQpKSxpKCJlcnIiLFt0LGYubm93KCksITEsbl0pfX0se31dLDE0OltmdW5jdGlvbih0LG4sZSl7bi5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKCJzdHJpbmciPT10eXBlb2YgdCYmdC5sZW5ndGgpcmV0dXJuIHQubGVuZ3RoO2lmKCJvYmplY3QiPT10eXBlb2YgdCl7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiZ0LmJ5dGVMZW5ndGgpcmV0dXJuIHQuYnl0ZUxlbmd0aDtpZigidW5kZWZpbmVkIiE9dHlwZW9mIEJsb2ImJnQgaW5zdGFuY2VvZiBCbG9iJiZ0LnNpemUpcmV0dXJuIHQuc2l6ZTtpZighKCJ1bmRlZmluZWQiIT10eXBlb2YgRm9ybURhdGEmJnQgaW5zdGFuY2VvZiBGb3JtRGF0YSkpdHJ5e3JldHVybiBKU09OLnN0cmluZ2lmeSh0KS5sZW5ndGh9Y2F0Y2gobil7cmV0dXJufX19fSx7fV0sMTU6W2Z1bmN0aW9uKHQsbixlKXt2YXIgcj0wLG89bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRmlyZWZveFtcL1xzXShcZCtcLlxkKykvKTtvJiYocj0rb1sxXSksbi5leHBvcnRzPXJ9LHt9XSwxNjpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIoKXtmdW5jdGlvbiB0KCl7cmV0dXJuIG4/MTUmbltlKytdOjE2Kk1hdGgucmFuZG9tKCl8MH12YXIgbj1udWxsLGU9MCxyPXdpbmRvdy5jcnlwdG98fHdpbmRvdy5tc0NyeXB0bztyJiZyLmdldFJhbmRvbVZhbHVlcyYmKG49ci5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMzEpKSk7Zm9yKHZhciBvLGk9Inh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCIsYT0iIixzPTA7czxpLmxlbmd0aDtzKyspbz1pW3NdLCJ4Ij09PW8/YSs9dCgpLnRvU3RyaW5nKDE2KToieSI9PT1vPyhvPTMmdCgpfDgsYSs9by50b1N0cmluZygxNikpOmErPW87cmV0dXJuIGF9ZnVuY3Rpb24gbygpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gbj8xNSZuW2UrK106MTYqTWF0aC5yYW5kb20oKXwwfXZhciBuPW51bGwsZT0wLHI9d2luZG93LmNyeXB0b3x8d2luZG93Lm1zQ3J5cHRvO3ImJnIuZ2V0UmFuZG9tVmFsdWVzJiZVaW50OEFycmF5JiYobj1yLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgzMSkpKTtmb3IodmFyIG89W10saT0wO2k8MTY7aSsrKW8ucHVzaCh0KCkudG9TdHJpbmcoMTYpKTtyZXR1cm4gby5qb2luKCIiKX1uLmV4cG9ydHM9e2dlbmVyYXRlVXVpZDpyLGdlbmVyYXRlQ2F0SWQ6b319LHt9XSwxNzpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCxuKXtpZighbylyZXR1cm4hMTtpZih0IT09bylyZXR1cm4hMTtpZighbilyZXR1cm4hMDtpZighaSlyZXR1cm4hMTtmb3IodmFyIGU9aS5zcGxpdCgiLiIpLHI9bi5zcGxpdCgiLiIpLGE9MDthPHIubGVuZ3RoO2ErKylpZihyW2FdIT09ZVthXSlyZXR1cm4hMTtyZXR1cm4hMH12YXIgbz1udWxsLGk9bnVsbCxhPS9WZXJzaW9uXC8oXFMrKVxzK1NhZmFyaS87aWYobmF2aWdhdG9yLnVzZXJBZ2VudCl7dmFyIHM9bmF2aWdhdG9yLnVzZXJBZ2VudCxjPXMubWF0Y2goYSk7YyYmcy5pbmRleE9mKCJDaHJvbWUiKT09PS0xJiZzLmluZGV4T2YoIkNocm9taXVtIik9PT0tMSYmKG89IlNhZmFyaSIsaT1jWzFdKX1uLmV4cG9ydHM9e2FnZW50Om8sdmVyc2lvbjppLG1hdGNoOnJ9fSx7fV0sMTg6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbil7dmFyIGU9W10scj0iIixpPTA7Zm9yKHIgaW4gdClvLmNhbGwodCxyKSYmKGVbaV09bihyLHRbcl0pLGkrPTEpO3JldHVybiBlfXZhciBvPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7bi5leHBvcnRzPXJ9LHt9XSwxOTpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCxuLGUpe258fChuPTApLCJ1bmRlZmluZWQiPT10eXBlb2YgZSYmKGU9dD90Lmxlbmd0aDowKTtmb3IodmFyIHI9LTEsbz1lLW58fDAsaT1BcnJheShvPDA/MDpvKTsrK3I8bzspaVtyXT10W24rcl07cmV0dXJuIGl9bi5leHBvcnRzPXJ9LHt9XSwyMDpbZnVuY3Rpb24odCxuLGUpe24uZXhwb3J0cz17ZXhpc3RzOiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93LnBlcmZvcm1hbmNlJiZ3aW5kb3cucGVyZm9ybWFuY2UudGltaW5nJiYidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0fX0se31dLDIxOltmdW5jdGlvbih0LG4sZSl7ZnVuY3Rpb24gcih0KXtyZXR1cm4hKHQmJnQgaW5zdGFuY2VvZiBGdW5jdGlvbiYmdC5hcHBseSYmIXRbYV0pfXZhciBvPXQoImVlIiksaT10KDE5KSxhPSJuckBvcmlnaW5hbCIscz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGM9ITE7bi5leHBvcnRzPWZ1bmN0aW9uKHQsbil7ZnVuY3Rpb24gZSh0LG4sZSxvKXtmdW5jdGlvbiBucldyYXBwZXIoKXt2YXIgcixhLHMsYzt0cnl7YT10aGlzLHI9aShhcmd1bWVudHMpLHM9ImZ1bmN0aW9uIj09dHlwZW9mIGU/ZShyLGEpOmV8fHt9fWNhdGNoKGYpe2woW2YsIiIsW3IsYSxvXSxzXSl9dShuKyJzdGFydCIsW3IsYSxvXSxzKTt0cnl7cmV0dXJuIGM9dC5hcHBseShhLHIpfWNhdGNoKGQpe3Rocm93IHUobisiZXJyIixbcixhLGRdLHMpLGR9ZmluYWxseXt1KG4rImVuZCIsW3IsYSxjXSxzKX19cmV0dXJuIHIodCk/dDoobnx8KG49IiIpLG5yV3JhcHBlclthXT10LGQodCxucldyYXBwZXIpLG5yV3JhcHBlcil9ZnVuY3Rpb24gZih0LG4sbyxpKXtvfHwobz0iIik7dmFyIGEscyxjLGY9Ii0iPT09by5jaGFyQXQoMCk7Zm9yKGM9MDtjPG4ubGVuZ3RoO2MrKylzPW5bY10sYT10W3NdLHIoYSl8fCh0W3NdPWUoYSxmP3MrbzpvLGkscykpfWZ1bmN0aW9uIHUoZSxyLG8pe2lmKCFjfHxuKXt2YXIgaT1jO2M9ITA7dHJ5e3QuZW1pdChlLHIsbyxuKX1jYXRjaChhKXtsKFthLGUscixvXSl9Yz1pfX1mdW5jdGlvbiBkKHQsbil7aWYoT2JqZWN0LmRlZmluZVByb3BlcnR5JiZPYmplY3Qua2V5cyl0cnl7dmFyIGU9T2JqZWN0LmtleXModCk7cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkobixlLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtlXX0sc2V0OmZ1bmN0aW9uKG4pe3JldHVybiB0W2VdPW4sbn19KX0pLG59Y2F0Y2gocil7bChbcl0pfWZvcih2YXIgbyBpbiB0KXMuY2FsbCh0LG8pJiYobltvXT10W29dKTtyZXR1cm4gbn1mdW5jdGlvbiBsKG4pe3RyeXt0LmVtaXQoImludGVybmFsLWVycm9yIixuKX1jYXRjaChlKXt9fXJldHVybiB0fHwodD1vKSxlLmluUGxhY2U9ZixlLmZsYWc9YSxlfX0se31dLGVlOltmdW5jdGlvbih0LG4sZSl7ZnVuY3Rpb24gcigpe31mdW5jdGlvbiBvKHQpe2Z1bmN0aW9uIG4odCl7cmV0dXJuIHQmJnQgaW5zdGFuY2VvZiByP3Q6dD9jKHQscyxpKTppKCl9ZnVuY3Rpb24gZShlLHIsbyxpKXtpZighbC5hYm9ydGVkfHxpKXt0JiZ0KGUscixvKTtmb3IodmFyIGE9bihvKSxzPW0oZSksYz1zLmxlbmd0aCxmPTA7ZjxjO2YrKylzW2ZdLmFwcGx5KGEscik7dmFyIGQ9dVtnW2VdXTtyZXR1cm4gZCYmZC5wdXNoKFt4LGUscixhXSksYX19ZnVuY3Rpb24gcCh0LG4pe3lbdF09bSh0KS5jb25jYXQobil9ZnVuY3Rpb24gaCh0LG4pe3ZhciBlPXlbdF07aWYoZSlmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyllW3JdPT09biYmZS5zcGxpY2UociwxKX1mdW5jdGlvbiBtKHQpe3JldHVybiB5W3RdfHxbXX1mdW5jdGlvbiB3KHQpe3JldHVybiBkW3RdPWRbdF18fG8oZSl9ZnVuY3Rpb24gdih0LG4pe2YodCxmdW5jdGlvbih0LGUpe249bnx8ImZlYXR1cmUiLGdbZV09bixuIGluIHV8fCh1W25dPVtdKX0pfXZhciB5PXt9LGc9e30seD17b246cCxhZGRFdmVudExpc3RlbmVyOnAscmVtb3ZlRXZlbnRMaXN0ZW5lcjpoLGVtaXQ6ZSxnZXQ6dyxsaXN0ZW5lcnM6bSxjb250ZXh0Om4sYnVmZmVyOnYsYWJvcnQ6YSxhYm9ydGVkOiExfTtyZXR1cm4geH1mdW5jdGlvbiBpKCl7cmV0dXJuIG5ldyByfWZ1bmN0aW9uIGEoKXsodS5hcGl8fHUuZmVhdHVyZSkmJihsLmFib3J0ZWQ9ITAsdT1sLmJhY2tsb2c9e30pfXZhciBzPSJuckBjb250ZXh0IixjPXQoImdvcyIpLGY9dCgxOCksdT17fSxkPXt9LGw9bi5leHBvcnRzPW8oKTtsLmJhY2tsb2c9dX0se31dLGdvczpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCxuLGUpe2lmKG8uY2FsbCh0LG4pKXJldHVybiB0W25dO3ZhciByPWUoKTtpZihPYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5rZXlzKXRyeXtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbix7dmFsdWU6cix3cml0YWJsZTohMCxlbnVtZXJhYmxlOiExfSkscn1jYXRjaChpKXt9cmV0dXJuIHRbbl09cixyfXZhciBvPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7bi5leHBvcnRzPXJ9LHt9XSxoYW5kbGU6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKHQsbixlLHIpe28uYnVmZmVyKFt0XSxyKSxvLmVtaXQodCxuLGUpfXZhciBvPXQoImVlIikuZ2V0KCJoYW5kbGUiKTtuLmV4cG9ydHM9cixyLmVlPW99LHt9XSxpZDpbZnVuY3Rpb24odCxuLGUpe2Z1bmN0aW9uIHIodCl7dmFyIG49dHlwZW9mIHQ7cmV0dXJuIXR8fCJvYmplY3QiIT09biYmImZ1bmN0aW9uIiE9PW4/LTE6dD09PXdpbmRvdz8wOmEodCxpLGZ1bmN0aW9uKCl7cmV0dXJuIG8rK30pfXZhciBvPTEsaT0ibnJAaWQiLGE9dCgiZ29zIik7bi5leHBvcnRzPXJ9LHt9XSxsb2FkZXI6W2Z1bmN0aW9uKHQsbixlKXtmdW5jdGlvbiByKCl7aWYoIUUrKyl7dmFyIHQ9Yi5pbmZvPU5SRVVNLmluZm8sbj1wLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKVswXTtpZihzZXRUaW1lb3V0KHUuYWJvcnQsM2U0KSwhKHQmJnQubGljZW5zZUtleSYmdC5hcHBsaWNhdGlvbklEJiZuKSlyZXR1cm4gdS5hYm9ydCgpO2YoZyxmdW5jdGlvbihuLGUpe3Rbbl18fCh0W25dPWUpfSksYygibWFyayIsWyJvbmxvYWQiLGEoKStiLm9mZnNldF0sbnVsbCwiYXBpIik7dmFyIGU9cC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTtlLnNyYz0iaHR0cHM6Ly8iK3QuYWdlbnQsbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLG4pfX1mdW5jdGlvbiBvKCl7ImNvbXBsZXRlIj09PXAucmVhZHlTdGF0ZSYmaSgpfWZ1bmN0aW9uIGkoKXtjKCJtYXJrIixbImRvbUNvbnRlbnQiLGEoKStiLm9mZnNldF0sbnVsbCwiYXBpIil9ZnVuY3Rpb24gYSgpe3JldHVybiBSLmV4aXN0cyYmcGVyZm9ybWFuY2Uubm93P01hdGgucm91bmQocGVyZm9ybWFuY2Uubm93KCkpOihzPU1hdGgubWF4KChuZXcgRGF0ZSkuZ2V0VGltZSgpLHMpKS1iLm9mZnNldH12YXIgcz0obmV3IERhdGUpLmdldFRpbWUoKSxjPXQoImhhbmRsZSIpLGY9dCgxOCksdT10KCJlZSIpLGQ9dCgxNyksbD13aW5kb3cscD1sLmRvY3VtZW50LGg9ImFkZEV2ZW50TGlzdGVuZXIiLG09ImF0dGFjaEV2ZW50Iix3PWwuWE1MSHR0cFJlcXVlc3Qsdj13JiZ3LnByb3RvdHlwZTtOUkVVTS5vPXtTVDpzZXRUaW1lb3V0LFNJOmwuc2V0SW1tZWRpYXRlLENUOmNsZWFyVGltZW91dCxYSFI6dyxSRVE6bC5SZXF1ZXN0LEVWOmwuRXZlbnQsUFI6bC5Qcm9taXNlLE1POmwuTXV0YXRpb25PYnNlcnZlcn07dmFyIHk9IiIrbG9jYXRpb24sZz17YmVhY29uOiJiYW0ubnItZGF0YS5uZXQiLGVycm9yQmVhY29uOiJiYW0ubnItZGF0YS5uZXQiLGFnZW50OiJqcy1hZ2VudC5uZXdyZWxpYy5jb20vbnItMTEyMy5taW4uanMifSx4PXcmJnYmJnZbaF0mJiEvQ3JpT1MvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksYj1uLmV4cG9ydHM9e29mZnNldDpzLG5vdzphLG9yaWdpbjp5LGZlYXR1cmVzOnt9LHhocldyYXBwYWJsZTp4LHVzZXJBZ2VudDpkfTt0KDEzKSxwW2hdPyhwW2hdKCJET01Db250ZW50TG9hZGVkIixpLCExKSxsW2hdKCJsb2FkIixyLCExKSk6KHBbbV0oIm9ucmVhZHlzdGF0ZWNoYW5nZSIsbyksbFttXSgib25sb2FkIixyKSksYygibWFyayIsWyJmaXJzdGJ5dGUiLHNdLG51bGwsImFwaSIpO3ZhciBFPTAsUj10KDIwKX0se31dfSx7fSxbImxvYWRlciIsMiwxMSw0LDNdKTs8L3NjcmlwdD48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+d2luZG93Lk5SRVVNfHwoTlJFVU09e30pO05SRVVNLmluZm89eyJiZWFjb24iOiJiYW0ubnItZGF0YS5uZXQiLCJlcnJvckJlYWNvbiI6ImJhbS5uci1kYXRhLm5ldCIsImxpY2Vuc2VLZXkiOiIwZWQwY2U1MGIwIiwiYXBwbGljYXRpb25JRCI6IjU1ODg1OTQiLCJ0cmFuc2FjdGlvbk5hbWUiOiJZMUJSYlVVRldrTUVXeFlNVjFvYWRVeFpCMEJaQ2xaTkNWNVpHMFJjVlVwRFJ4SVdGQXhkUTBZZFcxWVhVUW9rWHdVWFhWTlVSMVpGSWxGRUJsQTBERjFERzFSY1F3PT0iLCJxdWV1ZVRpbWUiOjAsImFwcGxpY2F0aW9uVGltZSI6OTQ0LCJhZ2VudCI6IiJ9PC9zY3JpcHQ+CiAgICAgICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIj4KCiAgICAgICAgPHRpdGxlIGFyaWEtbGl2ZT0iYXNzZXJ0aXZlIj5hbGV4aXN0b3Vsb3R0ZeKAmXMgTGlicmFyeSB8IExhc3QuZm08L3RpdGxlPgoKICAgICAgICAKICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0iZW4iIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJkZSIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS9kZS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImVzIiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL2VzL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0iZnIiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vZnIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJpdCIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS9pdC91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImphIiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL2phL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0icGwiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vcGwvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJwdCIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS9wdC91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9InJ1IiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL3J1L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0ic3YiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vc3YvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJ0ciIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbS90ci91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnIC8+CiAgICAKICAgICAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9InpoIiBocmVmPSJodHRwczovL3d3dy5sYXN0LmZtL3poL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIAogICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJ4LWRlZmF1bHQiIGhyZWY9Imh0dHBzOi8vd3d3Lmxhc3QuZm0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgoKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9Ikxpc3RlbiB0byBtdXNpYyBmcm9tIGFsZXhpc3RvdWxvdHRl4oCZcyBsaWJyYXJ5ICg4OCw1MjQgdHJhY2tzIHBsYXllZCkuIEdldCB5b3VyIG93biBtdXNpYyBwcm9maWxlIGF0IExhc3QuZm0sIHRoZSB3b3JsZOKAmXMgbGFyZ2VzdCBzb2NpYWwgbXVzaWMgcGxhdGZvcm0uIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgoKICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgICAgICAgICAgIGNvbnRlbnQ9ImFsZXhpc3RvdWxvdHRl4oCZcyBMaWJyYXJ5IHwgTGFzdC5mbSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgICAgIGNvbnRlbnQ9Ikxpc3RlbiB0byBtdXNpYyBmcm9tIGFsZXhpc3RvdWxvdHRl4oCZcyBsaWJyYXJ5ICg4OCw1MjQgdHJhY2tzIHBsYXllZCkuIEdldCB5b3VyIG93biBtdXNpYyBwcm9maWxlIGF0IExhc3QuZm0sIHRoZSB3b3JsZOKAmXMgbGFyZ2VzdCBzb2NpYWwgbXVzaWMgcGxhdGZvcm0uIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiICAgICAgICAgICAgY29udGVudD0id2Vic2l0ZSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiICAgICAgIGNvbnRlbnQ9Ikxhc3QuZm0iIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiAgICAgICAgICAgICBjb250ZW50PSJodHRwczovL3d3dy5sYXN0LmZtL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3M/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTJmFtcDtwYWdlPTEiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWcgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgICAgICAgICAgIGNvbnRlbnQ9Imh0dHBzOi8vbW9udGFnZS5sYXN0LmZtL3NvY2lhbC1tb250YWdlLzljMDk0ZDlmYTZjMDQ0OWFiNTRmMTc5ZTliMjY4ZTA1LDcyMzE0ZDRhNzU5ZGQxNDc1MWE5ODg0NDQzM2Q1MGFiLGM4MmMxYzk1MTY0OTQ5OTJhMjEzYWM3MDlkODQwOGVlLDQxMjhhNmViMjlmOTQ5NDNjOWQyMDZjMDhlNjI1OTA0LGFkODA1OWQ1MDAzODM2YjZkMTRiYWJiMmY1ZGUxMjhjIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOndpZHRoIiAgICAgY29udGVudD0iMTIwMCIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZTpoZWlnaHQiICAgIGNvbnRlbnQ9IjYwMCIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZz4KICAgIDxtZXRhIHByb3BlcnR5PSJmYjphcHBfaWQiICAgICAgICAgIGNvbnRlbnQ9IjE5Mjk1OTMyNDA0Nzg2MSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZyAvPgoKICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6dGl0bGUiICAgICAgICAgIGNvbnRlbnQ9ImFsZXhpc3RvdWxvdHRl4oCZcyBMaWJyYXJ5IHwgTGFzdC5mbSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZz4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6ZGVzY3JpcHRpb24iICAgIGNvbnRlbnQ9Ikxpc3RlbiB0byBtdXNpYyBmcm9tIGFsZXhpc3RvdWxvdHRl4oCZcyBsaWJyYXJ5ICg4OCw1MjQgdHJhY2tzIHBsYXllZCkuIEdldCB5b3VyIG93biBtdXNpYyBwcm9maWxlIGF0IExhc3QuZm0sIHRoZSB3b3JsZOKAmXMgbGFyZ2VzdCBzb2NpYWwgbXVzaWMgcGxhdGZvcm0uIiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjppbWFnZSIgICAgICAgICAgY29udGVudD0iaHR0cHM6Ly9tb250YWdlLmxhc3QuZm0vc29jaWFsLW1vbnRhZ2UvOWMwOTRkOWZhNmMwNDQ5YWI1NGYxNzllOWIyNjhlMDUsNzIzMTRkNGE3NTlkZDE0NzUxYTk4ODQ0NDMzZDUwYWIsYzgyYzFjOTUxNjQ5NDk5MmEyMTNhYzcwOWQ4NDA4ZWUsNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQsYWQ4MDU5ZDUwMDM4MzZiNmQxNGJhYmIyZjVkZTEyOGMiIGRhdGEtcmVwbGFjZWFibGUtaGVhZC10YWc+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmNhcmQiICAgICAgICAgICBjb250ZW50PSJzdW1tYXJ5IiBkYXRhLXJlcGxhY2VhYmxlLWhlYWQtdGFnPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpzaXRlIiAgICAgICAgICAgY29udGVudD0iQGxhc3RmbSIgZGF0YS1yZXBsYWNlYWJsZS1oZWFkLXRhZz4KCiAgICAKCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCgogICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgICAgICAgICAgIGNvbnRlbnQ9ImFsZXhpc3RvdWxvdHRlJiMzOTtzIHRvcCB0cmFja3MiIC8+CiAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIiAgICAgY29udGVudD0iTG9uZG9uIEVsZWt0cmljaXR5IOKAlCBNYXliZSBJIFdhcyBXcm9uZyAoMzMpLCBUaGUgUHJvdG90eXBlcyDigJQgS2lsbCBUaGUgU2lsZW5jZSAoZmVhdC4gQXlhaCBNYXJhcikgKDI0KSwgRWQgU29sbyDigJQgU291bmRzeXN0ZW0gRW50ZXJ0YWluZXIgKGZlYXQuIE1DIFNweWRhKSAoMTYpLCBJbm5hQ2lyY2xlIOKAlCBTZWVpcG9yYSAoMTYpLCBHdXkgSiDigJQgRGlhZ29uYWwgKDE1KSwgSW5uYUNpcmNsZSDigJQgVmFsa3lyaWEgKDE0KSwgSGVucnkgU2FpeiDigJQgSW4gdGhlIERpc3RhbmNlICgxMSksIElubmFDaXJjbGUg4oCUIFNoaXZhICgxMSksIEJvcmlzIEJyZWpjaGEg4oCUIFRoZSBUcm91YmxlbWFrZXJ6ICgxMCksIElubmFDaXJjbGUg4oCUIFNlZWlwb3JhIChTdHJpbm5lciBSZW1peCkgKDEwKSwgTmhhciDigJQgRGVsdGF2b3ggKDEwKSwgTGFDaGlwcyDigJQgTW9ua2V5IEt1c2ggKDkpLCBDb2xsaWUgQnVkZHog4oCUIE5vdyBTaGUmIzM5O3MgR29uZSAoSiBCb3N0cm9uIFJlbWl4KSAoOCksIFNvbG9tdW4g4oCUIFRvbW9ycm93bGFuZCAyMDE4ICg4KSwgQW5keSBDICZhbXA7IEZpb3JhIOKAlCBIZWFydGJlYXQgTG91ZCAoRXh0ZW5kZWQgVmVyc2lvbikgKDcpLCBLcnVuY2gg4oCUIFN5bmMgQmlnICg3KSwgbmljb2xhIHNhbGFkaW5vIOKAlCBNYWZyYSAoNyksIEJvcmlzIEJyZWpjaGEg4oCUIFRvIHRoZSBtb29uIGFuZCBiYWNrICg2KSwgQnVzeSBTaWduYWwg4oCUIFVua25vd24gTnVtYmVyIChKdW5nbGUgUmVtaXgpICg2KSwgREMgQnJlYWtzIOKAlCBOZXZlciBTdG9wICg2KSwgR3V5IEog4oCUIE1EUSAoNiksIE1vb25jYXQg4oCUIEF1dHVtbiBEdWIgKDYpLCBQaG9ueSBPcnBoYW50cyDigJQgUGxheWdyb3VuZCAoQXRtb3MgUmVtaXgpICg2KSwgU3lzdGVtIOKAlCBOZWFyIE1pc3MgKDYpLCBUb2RhYmFyYSDigJQgQmFzaXMgKEhhc2l0aCBSZW1peCkgKDYpLCBOaGFyIOKAlCBGYWRpbmcgRXllcyAoNSksIG5pY29sYSBzYWxhZGlubyDigJQgTWFmcmEgKEFybm8gRGlyaXNpbyBSZW1peCkgKDUpLCBSb3NzIEQg4oCUIFRoaW5ncyBZb3UgTmVlZCAoNSksIFPDqWJhc3RpZW4gTMOpZ2VyIOKAlCBMYW5hcmthICg1KSwgU3VibGltZSDigJQgV2hhdCBJIEdvdCAoNSksIEFuYWxvZyBKdW5ncyDigJQgTWlyZmFrIChFd2FuIFJpbGwgUmVtaXgpICg0KSwgQmFtYm9vayAmYW1wOyBNZW5uaWUg4oCUIFNsaXAgQXdheSAoNCksIEJsYWNrIFN1biBFbXBpcmUg4oCUIERhd24gb2YgYSBEYXJrIERheSAoUmVjZXB0b3IgUmVtaXgpICg0KSwgQm9yZGVybGluZSDigJQgVGhlIFdhdGNoIChmZWF0LiBDb3BwYSkgKDQpLCBCcm9va2VzIEJyb3RoZXJzIOKAlCBUZWFyIFlvdSBEb3duICg0KSwgYlJVTkEg4oCUIFlvdSYjMzk7dmUgQmVlbiBMaWdodCB0byBNZSAoTWFyemVuaXQmIzM5O3MgQmFjayB0byBEaXNjbyBSZW1peCkgKDQpLCBCdWxsZXRwcm9vZiAmYW1wOyBDb25jb3JkIERhd24g4oCUIDEyIEdhdWdlICg0KSwgQ2FtbyAmYW1wOyBLcm9va2VkIOKAlCBUaGUgVG91Y2ggKDQpLCBDaGFzZSAmYW1wOyBTdGF0dXMg4oCUIEh1cnQgWW91ICg0KSwgQ29sbGllIEJ1ZGR6IOKAlCBUb21vcnJvdyYjMzk7cyBBbm90aGVyIERheSAoTGlvbkR1YiByZW1peCkgKDQpLCBDcmVlZGVuY2UgQ2xlYXJ3YXRlciBSZXZpdmFsIOKAlCBIYXZlIFlvdSBFdmVyIFNlZW4gdGhlIFJhaW4gKDQpLCBDeWFudGlmaWMg4oCUIEdoZXR0byBCbGFzdGVyICg0KSwgQ3lib3Ryb24g4oCUIFRocmVzaG9sZCAoNCksIERhZnQgUHVuayDigJQgVGVhY2hlcnMgKDQpLCBEZXNpcmVkIFN0YXRlIOKAlCBNaW5kIEdhbWVzICg0KSwgRGllICZhbXA7IEJyZWFrIOKAlCBEZWVwIFNlYXJjaCAoNCksIERqIEwuQS5CIOKAlCBFcmFkaWNhdGlvbiAoNCksIERvY3VtZW50IE9uZSDigJQgQm9keSBMaWtlIFdvdyAoNCksIERvY3VtZW50IE9uZSDigJQgSmF6eiBDbHViICg0KSwgRHJ1bXNvdW5kICZhbXA7IEJhc3NsaW5lIFNtaXRoIOKAlCBQbGFuZXQgTWFycyAoNCkiIC8+CgogICAgICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6dGl0bGUiICAgICAgICAgIGNvbnRlbnQ9ImFsZXhpc3RvdWxvdHRlJiMzOTtzIHRvcCB0cmFja3MiIC8+CiAgICAgICAgPG1ldGEgbmFtZT0idHdpdHRlcjpkZXNjcmlwdGlvbiIgICAgY29udGVudD0iTG9uZG9uIEVsZWt0cmljaXR5IOKAlCBNYXliZSBJIFdhcyBXcm9uZyAoMzMpLCBUaGUgUHJvdG90eXBlcyDigJQgS2lsbCBUaGUgU2lsZW5jZSAoZmVhdC4gQXlhaCBNYXJhcikgKDI0KSwgRWQgU29sbyDigJQgU291bmRzeXN0ZW0gRW50ZXJ0YWluZXIgKGZlYXQuIE1DIFNweWRhKSAoMTYpLCBJbm5hQ2lyY2xlIOKAlCBTZWVpcG9yYSAoMTYpLCBHdXkgSiDigJQgRGlhZ29uYWwgKDE1KSwgSW5uYUNpcmNsZSDigJQgVmFsa3lyaWEgKDE0KSwgSGVucnkgU2FpeiDigJQgSW4gdGhlIERpc3RhbmNlICgxMSksIElubmFDaXJjbGUg4oCUIFNoaXZhICgxMSksIEJvcmlzIEJyZWpjaGEg4oCUIFRoZSBUcm91YmxlbWFrZXJ6ICgxMCksIElubmFDaXJjbGUg4oCUIFNlZWlwb3JhIChTdHJpbm5lciBSZW1peCkgKDEwKSwgTmhhciDigJQgRGVsdGF2b3ggKDEwKSwgTGFDaGlwcyDigJQgTW9ua2V5IEt1c2ggKDkpLCBDb2xsaWUgQnVkZHog4oCUIE5vdyBTaGUmIzM5O3MgR29uZSAoSiBCb3N0cm9uIFJlbWl4KSAoOCksIFNvbG9tdW4g4oCUIFRvbW9ycm93bGFuZCAyMDE4ICg4KSwgQW5keSBDICZhbXA7IEZpb3JhIOKAlCBIZWFydGJlYXQgTG91ZCAoRXh0ZW5kZWQgVmVyc2lvbikgKDcpLCBLcnVuY2gg4oCUIFN5bmMgQmlnICg3KSwgbmljb2xhIHNhbGFkaW5vIOKAlCBNYWZyYSAoNyksIEJvcmlzIEJyZWpjaGEg4oCUIFRvIHRoZSBtb29uIGFuZCBiYWNrICg2KSwgQnVzeSBTaWduYWwg4oCUIFVua25vd24gTnVtYmVyIChKdW5nbGUgUmVtaXgpICg2KSwgREMgQnJlYWtzIOKAlCBOZXZlciBTdG9wICg2KSwgR3V5IEog4oCUIE1EUSAoNiksIE1vb25jYXQg4oCUIEF1dHVtbiBEdWIgKDYpLCBQaG9ueSBPcnBoYW50cyDigJQgUGxheWdyb3VuZCAoQXRtb3MgUmVtaXgpICg2KSwgU3lzdGVtIOKAlCBOZWFyIE1pc3MgKDYpLCBUb2RhYmFyYSDigJQgQmFzaXMgKEhhc2l0aCBSZW1peCkgKDYpLCBOaGFyIOKAlCBGYWRpbmcgRXllcyAoNSksIG5pY29sYSBzYWxhZGlubyDigJQgTWFmcmEgKEFybm8gRGlyaXNpbyBSZW1peCkgKDUpLCBSb3NzIEQg4oCUIFRoaW5ncyBZb3UgTmVlZCAoNSksIFPDqWJhc3RpZW4gTMOpZ2VyIOKAlCBMYW5hcmthICg1KSwgU3VibGltZSDigJQgV2hhdCBJIEdvdCAoNSksIEFuYWxvZyBKdW5ncyDigJQgTWlyZmFrIChFd2FuIFJpbGwgUmVtaXgpICg0KSwgQmFtYm9vayAmYW1wOyBNZW5uaWUg4oCUIFNsaXAgQXdheSAoNCksIEJsYWNrIFN1biBFbXBpcmUg4oCUIERhd24gb2YgYSBEYXJrIERheSAoUmVjZXB0b3IgUmVtaXgpICg0KSwgQm9yZGVybGluZSDigJQgVGhlIFdhdGNoIChmZWF0LiBDb3BwYSkgKDQpLCBCcm9va2VzIEJyb3RoZXJzIOKAlCBUZWFyIFlvdSBEb3duICg0KSwgYlJVTkEg4oCUIFlvdSYjMzk7dmUgQmVlbiBMaWdodCB0byBNZSAoTWFyemVuaXQmIzM5O3MgQmFjayB0byBEaXNjbyBSZW1peCkgKDQpLCBCdWxsZXRwcm9vZiAmYW1wOyBDb25jb3JkIERhd24g4oCUIDEyIEdhdWdlICg0KSwgQ2FtbyAmYW1wOyBLcm9va2VkIOKAlCBUaGUgVG91Y2ggKDQpLCBDaGFzZSAmYW1wOyBTdGF0dXMg4oCUIEh1cnQgWW91ICg0KSwgQ29sbGllIEJ1ZGR6IOKAlCBUb21vcnJvdyYjMzk7cyBBbm90aGVyIERheSAoTGlvbkR1YiByZW1peCkgKDQpLCBDcmVlZGVuY2UgQ2xlYXJ3YXRlciBSZXZpdmFsIOKAlCBIYXZlIFlvdSBFdmVyIFNlZW4gdGhlIFJhaW4gKDQpLCBDeWFudGlmaWMg4oCUIEdoZXR0byBCbGFzdGVyICg0KSwgQ3lib3Ryb24g4oCUIFRocmVzaG9sZCAoNCksIERhZnQgUHVuayDigJQgVGVhY2hlcnMgKDQpLCBEZXNpcmVkIFN0YXRlIOKAlCBNaW5kIEdhbWVzICg0KSwgRGllICZhbXA7IEJyZWFrIOKAlCBEZWVwIFNlYXJjaCAoNCksIERqIEwuQS5CIOKAlCBFcmFkaWNhdGlvbiAoNCksIERvY3VtZW50IE9uZSDigJQgQm9keSBMaWtlIFdvdyAoNCksIERvY3VtZW50IE9uZSDigJQgSmF6eiBDbHViICg0KSwgRHJ1bXNvdW5kICZhbXA7IEJhc3NsaW5lIFNtaXRoIOKAlCBQbGFuZXQgTWFycyAoNCkiIC8+CiAgICAgICAgPG1ldGEgbmFtZT0idHdpdHRlcjpjYXJkIiAgICAgICAgICAgY29udGVudD0ic3VtbWFyeV9sYXJnZV9pbWFnZSI+CiAgICAKCgoKICAgICAgICA8c2NyaXB0PihmdW5jdGlvbihlKSB7IGUuY2xhc3NOYW1lID0gZS5jbGFzc05hbWUucmVwbGFjZSgvXGJuby1qc1xiLywnanMnKTsgfSkoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTwvc2NyaXB0PgoKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAo8c2NyaXB0IGlkPSJpbml0aWFsLXRlYWxpdW0tZGF0YSIgZGF0YS10ZWFsaXVtLWRhdGE9InsmIzM0O3NpdGVTZWN0aW9uJiMzNDs6ICYjMzQ7dXNlciYjMzQ7LCAmIzM0O3BhZ2VUeXBlJiMzNDs6ICYjMzQ7dXNlcl9saWJyYXJ5X3RyYWNrcyYjMzQ7LCAmIzM0O3BhZ2VOYW1lJiMzNDs6ICYjMzQ7dXNlci9saWJyYXJ5L3RyYWNrcyYjMzQ7LCAmIzM0O25hdGl2ZUV2ZW50VHJhY2tpbmcmIzM0OzogdHJ1ZSwgJiMzNDt1c2VyU3RhdGUmIzM0OzogJiMzNDtub3QgYXV0aGVudGljYXRlZCYjMzQ7LCAmIzM0O3VzZXJUeXBlJiMzNDs6ICYjMzQ7YW5vbiYjMzQ7LCAmIzM0O2RldmljZVR5cGUmIzM0OzogJiMzNDtkZXNrdG9wJiMzNDssICYjMzQ7aXBHZW8mIzM0OzogJiMzNDtOQyYjMzQ7LCAmIzM0O3BhZ2VWaWV3R3VpZCYjMzQ7OiAmIzM0OzQ3ZDk5ZjgwLTc1ODctNDNiNy1iNTE5LTBiMGFkNjdhYmEzMyYjMzQ7fSI+PC9zY3JpcHQ+CjxzY3JpcHQ+CiAgICB2YXIgaW5pdGlhbFRlYWxpdW1FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luaXRpYWwtdGVhbGl1bS1kYXRhJyk7CiAgICB3aW5kb3cudXRhZ19kYXRhID0gSlNPTi5wYXJzZShpbml0aWFsVGVhbGl1bUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRlYWxpdW0tZGF0YScpKTsKPC9zY3JpcHQ+Cgo8c2NyaXB0IGFzeW5jIHNyYz0iaHR0cHM6Ly90YWdzLnRpcWNkbi5jb20vdXRhZy9jYnNpL2xhc3RmbXNpdGUvcHJvZC91dGFnLmpzIj48L3NjcmlwdD4KICAgICAgICAKCiAgICAgICAgPGxpbmsgcmVsPSJpY29uIiBocmVmPSIvc3RhdGljL2ltYWdlcy9mYXZpY29uLjcwMmIyMzliNjE5NC5pY28iPgoKICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9zdGF0aWMvc3R5bGVzL2J1aWxkLzY1NTlmOTJjYmUuNjU1OWY5MmNiZWRlLmNzcyIgZGF0YS1zdHlsZXNoZWV0LW5hbWU9ImRlZmF1bHRzIiBjaGFyc2V0PSJ1dGYtOCI+CgogICAgICAgIAogICAgICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9zdGF0aWMvc3R5bGVzL2J1aWxkL2NkNzQ2ZGI3YTUuY2Q3NDZkYjdhNWNkLmNzcyIgZGF0YS1zdHlsZXNoZWV0LW5hbWU9ImFwcCIgY2hhcnNldD0idXRmLTgiPgogICAgICAgIAoKICAgICAgICAKICAgIAogICAgCiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc3RhdGljL3N0eWxlcy9idWlsZC8yYjU2OWMxMDMwLjJiNTY5YzEwMzA1NC5jc3MiIGNoYXJzZXQ9InV0Zi04Ij4KICAgIAoKICAgIAogICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL3N0YXRpYy9zdHlsZXMvYnVpbGQvMTgxMTUyYmI4Ny4xODExNTJiYjg3NWUuY3NzIiBjaGFyc2V0PSJ1dGYtOCI+CiAgICAKCgogICAgICAgIAogICAgICAgICAgICAKICAgIAogICAgCiAgICAgICAgPHNjcmlwdCBhc3luYyBkYXRhLW1haW49Ii9zdGF0aWMvanMtYnVpbGQvaW5pdC42NTlkYWMwZTFhNmIiIHNyYz0iL3N0YXRpYy9qcy1idWlsZC9saWIvcmVxdWlyZS9yZXF1aXJlLjUzYmM2NGM3MjllOS5qcyI+PC9zY3JpcHQ+CiAgICAKCiAgICAgICAgCgogICAgICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4KICAgICAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPgogICAgICAgIDwhLS1baWYgbHQgSUUgOV0+CiAgICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0PgogICAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4KICAgICAgICA8IVtlbmRpZl0tLT4KICAgIDwvaGVhZD4KICAgIDxib2R5CiAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAKICAgICAgICAgICAgYW5odjEKICAgICAgICAgICAgbmFtZXNwYWNlLS11c2VyX2xpYnJhcnlfdHJhY2tzCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY29udGVudC10b3AtaGFzLW5hdgogICAgICAgICAgICAKICAgICAgICAiCiAgICAgICAgZGF0YS1yZXF1aXJlPSJhZHMvcGFnZS1hZHMsYWRzL3NlYXJjaGxpbmtzLHBsYXllci9wbGF5bGluay1oYW5kbGVyLGRldi9ncmlkLW92ZXJsYXksZGV2L3RvZ2dsZS12ZXJzaW9uLGRldi9kZWJ1Zy1sb2csZGV2L2RlYnVnLWltYWdlLWFuYWx5c2lzLGRldi9qcy1sb2csZGV2L2Fkcy10b2dnbGUsY29tcG9uZW50cy9saW5rLWJsb2NrLGNvbXBvbmVudHMvYWpheC1mb3JtLGNvcmUvbWVkaWEtc2l6ZS1ldmVudHMtdjIiCiAgICAgICAgZGF0YS1wbGF5ZXItc3VwcG9ydGVkPSJ0cnVlIgogICAgICAgIGRhdGEtcGVyc2lzdGVudC1wbGF5ZXItc3VwcG9ydGVkPSJ0cnVlIgogICAgICAgIGRhdGEtY291bnRyeS1jb2RlPSJOQyIKICAgICAgICBkYXRhLWluaXRpYWwtdmlldy1ndWlkPSI0N2Q5OWY4MC03NTg3LTQzYjctYjUxOS0wYjBhZDY3YWJhMzMiCiAgICAgICAgZGF0YS1jYnNpLXBsYXllci1jb25maWc9Ii9zdGF0aWMvY29uZmlnL3ZpZGVvLXBsYXllci45YWU4OGExMzczZGEueG1sIgogICAgICAgIGRhdGEtc2Vuc2l0aXZlLXBhdGgtcmVnZXg9Il4vKC4uLyk/KGdvb2dsZWMzZWExYjI1Mjc3NGUxYWJcLmh0bWx8YWNjb3VudF9kZWxldGVkfGluYm94fGpvaW58bG9naW58bG9zdHBhc3N3b3JkKC9jb25maXJtKT98c3RhZmZ8c3Vic2NyaWJlfHN1cHBvcnQoPyEvaW1hZ2VzfC9zaG91dHN8L3Nob3V0KXxzZXR0aW5ncy8oYWNjb3VudHx3ZWJzaXRlfHN1YnNjcmlwdGlvbnxwYXNzd29yZHxsb3N0cGFzc3dvcmQpfHVzZXIvLis/L3N1cHBvcnQpKC8uKik/Lz8kIgogICAgICAgIGRhdGEtZmFjZWJvb2stYXBwLWlkPSIxOTI5NTkzMjQwNDc4NjEiCiAgICAgICAgZGF0YS1mYWNlYm9vay1wbGFjZW1lbnQtaWQ9IjE5NTYxMjQ1MTAyMjA4MF8yMjA1MDIxNTUxOTk3NzYiCiAgICAgICAgZGF0YS1nb29nbGUtbWFwcy1hcGkta2V5PSJBSXphU3lCWDYtSUUzbHo0UHBKVVNCVklvX2RQYjBCQXlNZ2ktVkUiCiAgICA+CiAgICAgICAgPGRpdgogICAgICAgICAgICBkYXRhLXJlcXVpcmU9ImNvbXBvbmVudHMvbG9hZGluZy1pbmRpY2F0b3IiCiAgICAgICAgICAgIGRhdGEtbG9hZGluZy1pbmRpY2F0b3ItY29weT0iTG9hZGluZ+KApiIKICAgICAgICA+PC9kaXY+CiAgICAgICAgPGRpdgogICAgICAgICAgICBkYXRhLXJlcXVpcmU9ImNvbXBvbmVudHMvb3Blbi1tb2RhbCxjb21wb25lbnRzL3N1Ym1pdC10by1tb2RhbCxjb21wb25lbnRzL3Nob3ctYWxlcnQiCiAgICAgICAgICAgIGRhdGEtc2hvdy1hbGVydC1vay1jb3B5PSJPa2F5IgogICAgICAgID48L2Rpdj4KICAgICAgICAKCiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJ0b3AtYmFyIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgIDxzZWN0aW9uCiAgICAgICAgZGF0YS1yZXF1aXJlPSJwbGF5ZXIvY29udHJvbHMscGxheWVyL3N0YXR1cyxwbGF5ZXIvdHJhY2tpbmciCiAgICAgICAgZGF0YS1wbGF5ZXItc3RhdHVzLWFkLXBsYXlpbmc9IkFkIHBsYXlpbmciCiAgICAgICAgZGF0YS1wbGF5ZXItc3RhdHVzLWluYWN0aXZlPSImbmJzcDsiCiAgICAgICAgZGF0YS1wbGF5ZXItc3RhdHVzLWxvYWRpbmctc3BvdGlmeT0iQ29ubmVjdGluZyBTcG90aWZ54oCmIgogICAgICAgIGRhdGEtcGxheWVyLXN0YXR1cy1zcG90aWZ5LWF1dGgtZXJyb3I9IkNvdWxkIG5vdCBhdXRoZW50aWNhdGUgd2l0aCBTcG90aWZ5LiIKCiAgICAgICAgZGF0YS1wbGF5ZXItZXJyb3ItY2Fubm90LXBsYXktaXRlbT0iQ2Fubm90IHBsYXkgdGhhdCBpdGVtLiIKICAgICAgICBkYXRhLXBsYXllci1lcnJvci10cmFjay11bmF2YWlsYWJsZT0iVHJhY2sgdW5hdmFpbGFibGUuIgogICAgICAgIGRhdGEtcGxheWVyLW1vZGFsLXRpdGxlPSJQbGF5IHZpZGVvIgoKICAgICAgICAKCiAgICAgICAgY2xhc3M9IgogICAgICAgICAgICBwbGF5ZXItYmFyCiAgICAgICAgICAgIGluYWN0aXZlCiAgICAgICAgIgogICAgICAgIGFyaWEtbGFiZWw9ImF1ZGlvIHBsYXllciIKICAgICAgICBhcmlhLWRpc2FibGVkPSJ0cnVlIgogICAgPgogICAgICAgIDxkaXYgY2xhc3M9InBsYXllci1iYXItaW5uZXItd3JhcCI+CiAgICAgICAgICAgIDxhIGNsYXNzPSJwbGF5ZXItYmFyLWFydHdvcmsganMtYXJ0d29yayI+CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSIiIHNyYz0iL3N0YXRpYy9pbWFnZXMvZGVmYXVsdHMvcGxheWVyX2RlZmF1bHRfYWxidW0uNDMwMjIzNzA2YjE0LnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSIKICAgICAgICAgICAgICAgIHBsYXllci1iYXItc291cmNlCiAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXNvdXJjZS0tc3BvdGlmeQogICAgICAgICAgICAiPlBsYXlpbmcgdmlhIFNwb3RpZnk8L3NwYW4+CgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iCiAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXNvdXJjZQogICAgICAgICAgICAgICAgcGxheWVyLWJhci1zb3VyY2UtLXlvdXR1YmUKICAgICAgICAgICAgIj5QbGF5aW5nIHZpYSBZb3VUdWJlPC9zcGFuPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ic291cmNlLWluZm8iPgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwbGF5ZXItYmFyLXBsYXliYWNrLW9wdGlvbnMtYnV0dG9uIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtaG92ZXIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJwbGF5ZXItYmFyLXBsYXliYWNrLW9wdGlvbnMiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgUGxheWJhY2sgb3B0aW9ucwogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgaWQ9InBsYXllci1iYXItcGxheWJhY2stb3B0aW9ucyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItcGxheWJhY2stb3B0aW9ucy13cmFwCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1kYXJrCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItcGxheWJhY2stb3B0aW9ucy1zcG90aWZ5CiAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93bi1tZW51LW5vbi1pbnRlcmFjdGl2ZS1pdGVtLWRhcmsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBsYXllci1iYXItbGlzdGVuaW5nLW9uLWhlYWRpbmciPkxpc3RlbmluZyBvbuKApjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLWxpc3RlbmluZy1vbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXllci1iYXItbGlzdGVuaW5nLW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxidXR0b24gY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1pdGVtLWRhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLXN3aXRjaC1kZXZpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItcGxheWJhY2stb3B0aW9ucy1zd2l0Y2gtZGV2aWNlCiAgICAgICAgICAgICAgICAgICAgICAgICI+U3dpdGNoIFNwb3RpZnkgZGV2aWNlPC9idXR0b24+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganMtc291cmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1pdGVtLWRhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXBsYXliYWNrLW9wdGlvbnMtZXh0ZXJuYWwtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICAgICAgICAgICAgICAgID5PcGVuIGluIFNwb3RpZnkgV2ViIFBsYXllcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxsaSBjbGFzcz0ibWVudS1zZXBhcmF0b3ItLWRhcmsiPgogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS9zZXR0aW5ncy93ZWJzaXRlIgogICAgICAgICAgICAKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1pdGVtLWRhcmsKICAgICAgICAgICAgICAgIHBsYXllci1iYXItcGxheWJhY2stb3B0aW9ucy1zZXR0aW5ncwogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBDaGFuZ2UgcGxheWJhY2sgc291cmNlCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWRhcmsKICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1wbGF5YmFjay1vcHRpb25zLXlvdXR1YmUKICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWl0ZW0tZGFyawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLXNvdXJjZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItcGxheWJhY2stb3B0aW9ucy1leHRlcm5hbC1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgICAgICAgICAgICAgICAgPk9wZW4gb24gWW91VHViZSB3ZWJzaXRlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGxpIGNsYXNzPSJtZW51LXNlcGFyYXRvci0tZGFyayI+CiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3NldHRpbmdzL3dlYnNpdGUiCiAgICAgICAgICAgIAogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWl0ZW0tZGFyawogICAgICAgICAgICAgICAgcGxheWVyLWJhci1wbGF5YmFjay1vcHRpb25zLXNldHRpbmdzCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIENoYW5nZSBwbGF5YmFjayBzb3VyY2UKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwbGF5ZXItYmFyLWNvbnRyb2xzIj4KCiAgICAgICAgICAgICAgICA8dWwgYXJpYS1sYWJlbD0iY29udHJvbHMiIGNsYXNzPSJtZWRpYS1jb250cm9scyI+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLXByZXZpb3VzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLWJ0bi0tcHJldmlvdXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheWJhckJhY2tUcmFjayIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJldmlvdXMKICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheS1wYXVzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1idG4tLXBsYXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3RyaW5nLXBhdXNlPSJQYXVzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheWJhclJlc3VtZVRyYWNrIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uLXBhdXNlPSJQbGF5YmFyUGF1c2VUcmFjayIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxheQogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1uZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLWJ0bi0tbmV4dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5YmFyU2tpcFRyYWNrIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXh0CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgICAgIDxhIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLWJhci1za2lwbGluawogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXItYmFyLXNraXBsaW5rLS15b3V0dWJlCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGhyZWY9IiN5b3V0dWJlLXZpZGVvIgogICAgICAgICAgICAgICAgPlNraXAgdG8gWW91VHViZSB2aWRlbzwvYT4KCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0icGxheWVyLWJhci1ub3ctcGxheWluZyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwbGF5ZXItYmFyLW5vdy1wbGF5aW5nLWlubmVyLXdyYXAiPgogICAgICAgICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwbGF5ZXItYmFyLXRyYWNrIGpzLXBsYXllci1zdGF0dXMiCiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9Im5vdyBwbGF5aW5nIgogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1hdG9taWM9InRydWUiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICBMb2FkaW5nIHBsYXllcuKApgogICAgICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InBsYXllci1iYXItZXJyb3IganMtcGxheWVyLWVycm9yIHBsYXllci1iYXItc3RhdHVzLS1oaWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBsYXllci1iYXItZXJyb3ItbWVzc2FnZSBqcy1wbGF5ZXItZXJyb3ItbWVzc2FnZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0icGxheWVyLWJhci1wcm9ncmVzcy13cmFwIj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9InBsYXllci1iYXItcHJvZ3Jlc3MiCiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJwcm9ncmVzcyIKICAgICAgICAgICAgICAgIHJvbGU9InRpbWVyIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBqcy1wcm9ncmVzcy1zbHVnCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItcHJvZ3Jlc3Mtc2x1ZwogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1wcm9ncmVzcy1yZW1haW5pbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci1iYXItcHJvZ3Jlc3MtcmVtYWluaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0icmVtYWluaW5nIgogICAgICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgZGF0YS1yZXF1aXJlPSJwbGF5ZXIvc2Nyb2JibGUtY2xpZW50Ij48L2Rpdj4KICAgIDwvc2VjdGlvbj4KCiAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgY2xhc3M9IgogICAgICAgICAgICBtYXN0aGVhZC1wb3B1cAogICAgICAgICAgICBtYXN0aGVhZC1wb3B1cC0tc3BvdGlmeS1zY3JvYmJsaW5nCiAgICAgICAgICAgIG1hc3RoZWFkLXBvcHVwLS1oaWRkZW4KICAgICAgICAiCiAgICAgICAgZGF0YS1yZXF1aXJlPSJjb21wb25lbnRzL3Nwb3RpZnktc2Nyb2JibGluZy1wcm9tcHQsY29tcG9uZW50cy9hbGVydC1kaXNtaXNzYWJsZSxjb21wb25lbnRzL3Nwb3RpZnktc2Nyb2JibGluZy1iYW5uZXIiCiAgICAgICAgZGF0YS1zcG90aWZ5LXNjb2JibGluZy1zdWNjZXNzLW1vZGFsPSIvc29jaWFsbW9kYWwvc3BvdGlmeS1zY3JvYmJsaW5nLXN1Y2Nlc3MiCiAgICAgICAgZGF0YS1zcG90aWZ5LXNjb2JibGluZy1mYWlsLW1vZGFsPSIvc29jaWFsbW9kYWwvc3BvdGlmeS1zY3JvYmJsaW5nLWZhaWwiCiAgICA+CiAgICAgICAgPGRpdiBjbGFzcz0ibWFzdGhlYWQtcG9wdXAtaW5uZXIiPgogICAgICAgICAgICA8aDM+U2Nyb2JibGUgZnJvbSBTcG90aWZ5PzwvaDM+CiAgICAgICAgICAgIDxwPkNvbm5lY3QgeW91ciBTcG90aWZ5IGFjY291bnQgdG8geW91ciBMYXN0LmZtIGFjY291bnQgYW5kIHNjcm9iYmxlIGV2ZXJ5dGhpbmcgeW91IGxpc3RlbiB0bywgZnJvbSBhbnkgU3BvdGlmeSBhcHAgb24gYW55IGRldmljZSBvciBwbGF0Zm9ybS48L3A+CiAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuLXByaW1hcnkganMtc2V0dXAtc3BvdGlmeS1zY3JvYmJsaW5nIgogICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9zZXR0aW5ncy9hcHBsaWNhdGlvbnMiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgQ29ubmVjdCB0byBTcG90aWZ5CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGhyZWY9Ii9uYWdiYXIvZGlzbWlzcy9zcG90aWZ5LXNjcm9iYmxpbmctcHJvbXB0P3BlcmlvZD1wZXJtYW5lbnQiCiAgICAgICAgICAgICAgICBjbGFzcz0ibWFzdGhlYWQtcG9wdXAtY2xvc2UganMtYWxlcnQtZGlzbWlzc2FibGUtY2xvc2UiCiAgICAgICAgICAgICAgICBkYXRhLWNsb3NlLWFqYXgKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgRGlzbWlzcwogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAKCiAgICA8ZGl2IGlkPSJjb250ZW50IiBjbGFzcz0ibWFpbi1jb250ZW50IiByb2xlPSJtYWluIiBhcmlhLWxpdmU9InBvbGl0ZSI+CiAgICAgICAgCiAgICAKCiAgICA8ZGl2IGlkPSJ0bG1kYXRhIiBoaWRkZW4gY2xhc3M9ImhpZGRlbiIKICAgICAgICAgZGF0YS10ZWFsaXVtLWRhdGE9J3smIzM0O3NpdGVTZWN0aW9uJiMzNDs6ICYjMzQ7dXNlciYjMzQ7LCAmIzM0O3BhZ2VUeXBlJiMzNDs6ICYjMzQ7dXNlcl9saWJyYXJ5X3RyYWNrcyYjMzQ7LCAmIzM0O3BhZ2VOYW1lJiMzNDs6ICYjMzQ7dXNlci9saWJyYXJ5L3RyYWNrcyYjMzQ7LCAmIzM0O25hdGl2ZUV2ZW50VHJhY2tpbmcmIzM0OzogdHJ1ZSwgJiMzNDt1c2VyU3RhdGUmIzM0OzogJiMzNDtub3QgYXV0aGVudGljYXRlZCYjMzQ7LCAmIzM0O3VzZXJUeXBlJiMzNDs6ICYjMzQ7YW5vbiYjMzQ7LCAmIzM0O2RldmljZVR5cGUmIzM0OzogJiMzNDtkZXNrdG9wJiMzNDssICYjMzQ7aXBHZW8mIzM0OzogJiMzNDtOQyYjMzQ7fSc+CiAgICAgPC9kaXY+CgogICAgICAgIDxkaXYKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgIAogICAgPGRpdgogICAgICAgIGRhdGEtcmVxdWlyZT0iY29tcG9uZW50cy9kaXNjbG9zZS1iYXNlLGNvbXBvbmVudHMvZGlzY2xvc2UtYXV0b2Nsb3NlLXYyLGNvbXBvbmVudHMvZGlzY2xvc2UtZHJvcGRvd24tdjIsY29tcG9uZW50cy9kaXNjbG9zZS1kcm9wZG93bi1sb2NhdGlvbi1waWNrZXItdjIsY29tcG9uZW50cy9kaXNjbG9zZS1jb2xsYXBzaW5nLW5hdi12Mixjb21wb25lbnRzL2Rpc2Nsb3NlLWFydHdvcmssY29tcG9uZW50cy9kaXNjbG9zZS1yZW1vdmUsY29tcG9uZW50cy9kaXNjbG9zZS1zZWFyY2gsY29tcG9uZW50cy9kaXNjbG9zZS1ob3Zlci12Myxjb21wb25lbnRzL2Rpc2Nsb3NlLXNlbGVjdCxjb21wb25lbnRzL2Rpc2Nsb3NlLWxhenktYnV5bGlua3MsY29tcG9uZW50cy9mb2N1cy1jb250cm9scyxjb21wb25lbnRzL3ByZXZlbnQtcmVzdWJtaXQtdjIsY29tcG9uZW50cy9lZGl0LXNjcm9iYmxlLGNvbXBvbmVudHMvdG9nZ2xlLWJ1dHRvbnMsY29tcG9uZW50cy9jbGljay1wcm94eSxjb21wb25lbnRzL2Jvb2ttYXJrLW5vdGlmaWNhdGlvbiIKICAgID48L2Rpdj4KCiAgICAKICAgICAgICAKCiAgICA8bmF2IGNsYXNzPSJtYXN0aGVhZCI+PGRpdiBjbGFzcz0ibWFzdGhlYWQtaW5uZXItd3JhcCI+PGRpdiBjbGFzcz0ibWFzdGhlYWQtbG9nbyI+PHNwYW4gY2xhc3M9Im1hc3RoZWFkLWxvZ28tbG9hZGluZyI+PC9zcGFuPjxhIGhyZWY9Ii8iPiBMYXN0LmZtPC9hPjwvZGl2PjxhCiAgICAgICAgY2xhc3M9Im1hc3RoZWFkLXNlYXJjaC10b2dnbGUiIGhyZWY9Ii9zZWFyY2giIGRhdGEtZGlzY2xvc2Utc2VhcmNoIGFyaWEtY29udHJvbHM9Im1hc3RoZWFkLXNlYXJjaCI+U2VhcmNoPC9hPjxmb3JtCiAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1zZWFyY2gtZm9ybSBkaXNjbG9zZS1oaWRlIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkgIiBpZD0ibWFzdGhlYWQtc2VhcmNoIiBhY3Rpb249Ii9zZWFyY2giIG1ldGhvZD0iZ2V0Ij48ZGl2IGNsYXNzPSJtYXN0aGVhZC1zZWFyY2gtaW5uZXItd3JhcCI+PGxhYmVsIGZvcj0ibWFzdGhlYWQtc2VhcmNoLWZpZWxkIiBjbGFzcz0ic3Itb25seSI+U2VhcmNoPC9sYWJlbD48aW5wdXQKICAgICAgICAgICAgICAgIGlkPSJtYXN0aGVhZC1zZWFyY2gtZmllbGQiIGNsYXNzPSJtYXN0aGVhZC1zZWFyY2gtZmllbGQiIHR5cGU9InRleHQiIG5hbWU9InEiIHBsYWNlaG9sZGVyPSJTZWFyY2ggZm9yIG11c2lj4oCmIiAvPjxidXR0b24gY2xhc3M9Im1hc3RoZWFkLXNlYXJjaC1zdWJtaXQiIHR5cGU9InN1Ym1pdCI+U2VhcmNoPC9idXR0b24+PC9kaXY+PC9mb3JtPjxkaXYgY2xhc3M9InZpc2libGUteHMiPjxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1oYW1idXJnZXItdG9nZ2xlICIgZGF0YS1kaXNjbG9zZS1hdXRvY2xvc2UgYXJpYS1jb250cm9scz0ibWFzdGhlYWQtbmF2Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvYnV0dG9uPjx1bAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iIG1hc3RoZWFkLW5hdiBkaXNjbG9zZS1oaWRlIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkgIiBhcmlhLWxhYmVsPSJQcmltYXJ5IG5hdmlnYXRpb24iIGlkPSJtYXN0aGVhZC1uYXYiPjxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPjxhCiAgICAgICAgICAgICAgICBjbGFzcz0iIG1hc3RoZWFkLW5hdi1jb250cm9sICIgaHJlZj0iL2Rhc2hib2FyZCIgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJOYXZpZ2F0aW9uTGluayIgZGF0YS1hbmFseXRpY3MtbGFiZWw9ImxpdmUiPkxpdmU8L2E+PC9saT48bGkgY2xhc3M9Im1hc3RoZWFkLW5hdi1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1uYXYtY29udHJvbCAiIGhyZWY9Ii9tdXNpYyIgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJOYXZpZ2F0aW9uTGluayIgZGF0YS1hbmFseXRpY3MtbGFiZWw9Im11c2ljIj5NdXNpYzwvYT48L2xpPjxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPjxhCiAgICAgICAgICAgICAgICBjbGFzcz0iIG1hc3RoZWFkLW5hdi1jb250cm9sICIgaHJlZj0iL2NoYXJ0cyIgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJOYXZpZ2F0aW9uTGluayIgZGF0YS1hbmFseXRpY3MtbGFiZWw9ImNoYXJ0cyI+Q2hhcnRzPC9hPjwvbGk+PGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtbmF2LWNvbnRyb2wgIiBocmVmPSIvZXZlbnRzIiBkYXRhLWFuYWx5dGljcy1hY3Rpb249Ik5hdmlnYXRpb25MaW5rIiBkYXRhLWFuYWx5dGljcy1sYWJlbD0iZXZlbnRzIj5FdmVudHM8L2E+PC9saT48bGkgY2xhc3M9Im1hc3RoZWFkLW5hdi1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1uYXYtY29udHJvbCAiIGhyZWY9Ii9mZWF0dXJlcyIgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJOYXZpZ2F0aW9uTGluayIgZGF0YS1hbmFseXRpY3MtbGFiZWw9ImZlYXR1cmVzIj5GZWF0dXJlczwvYT48L2xpPgogICAgCiAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWFzdGhlYWQtbmF2LWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3N1YnNjcmliZSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ic3Vic2NyaWJlIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iVXNlck1lbnVDbGljayIKICAgICAgICAgICAgICAgID5TdWJzY3JpYmU8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgPGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0ibWFzdGhlYWQtbmF2LWNvbnRyb2wiCiAgICAgICAgICAgICAgICBocmVmPSIvam9pbiIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU2lnblVwQ2xpY2siCiAgICAgICAgICAgID5Kb2luPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0ibWFzdGhlYWQtbmF2LWNvbnRyb2wiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luIgogICAgICAgICAgICA+TG9naW48L2E+CiAgICAgICAgPC9saT4KICAgIAo8L3VsPjwvZGl2PjxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iIG5hdmxpc3QgbmF2bGlzdC0tbW9yZSBtYXN0aGVhZC1uYXYgaGlkZGVuLXhzICIgZGF0YS1yZXF1aXJlPSJjb21wb25lbnRzL3ByaW1hcnktbmF2IiBkYXRhLW1vcmUtc3RyaW5nPSJNb3Jl4oCmIj48dWwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImpzLW5hdmxpc3QtaXRlbXMgbmF2bGlzdC1pdGVtcyIgYXJpYS1sYWJlbD0iUHJpbWFyeSBuYXZpZ2F0aW9uIj48bGkgY2xhc3M9Im1hc3RoZWFkLW5hdi1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1uYXYtY29udHJvbCAiIGhyZWY9Ii9kYXNoYm9hcmQiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJsaXZlIj5MaXZlPC9hPjwvbGk+PGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtbmF2LWNvbnRyb2wgIiBocmVmPSIvbXVzaWMiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJtdXNpYyI+TXVzaWM8L2E+PC9saT48bGkgY2xhc3M9Im1hc3RoZWFkLW5hdi1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9IiBtYXN0aGVhZC1uYXYtY29udHJvbCAiIGhyZWY9Ii9jaGFydHMiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJjaGFydHMiPkNoYXJ0czwvYT48L2xpPjxsaSBjbGFzcz0ibWFzdGhlYWQtbmF2LWl0ZW0iPjxhCiAgICAgICAgICAgICAgICBjbGFzcz0iIG1hc3RoZWFkLW5hdi1jb250cm9sICIgaHJlZj0iL2V2ZW50cyIgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJOYXZpZ2F0aW9uTGluayIgZGF0YS1hbmFseXRpY3MtbGFiZWw9ImV2ZW50cyI+RXZlbnRzPC9hPjwvbGk+PGxpIGNsYXNzPSJtYXN0aGVhZC1uYXYtaXRlbSI+PGEKICAgICAgICAgICAgICAgIGNsYXNzPSIgbWFzdGhlYWQtbmF2LWNvbnRyb2wgIiBocmVmPSIvZmVhdHVyZXMiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iTmF2aWdhdGlvbkxpbmsiIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJmZWF0dXJlcyI+RmVhdHVyZXM8L2E+PC9saT48L3VsPjwvZGl2Pjx1bAogICAgICAgICAgICBjbGFzcz0iIHNpdGUtYXV0aCBzaXRlLWF1dGgtLWFub24gaGlkZGVuLXhzICI+CiAgICA8bGkgY2xhc3M9InNpdGUtYXV0aC1pdGVtIj48YQogICAgICAgICAgICAgICAgY2xhc3M9InNpdGUtYXV0aC1jb250cm9sIiBocmVmPSIvam9pbiIgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJTaWduVXBDbGljayI+Sm9pbjwvYT48L2xpPjxsaSBjbGFzcz0ic2l0ZS1hdXRoLWl0ZW0iPjxhCiAgICAgICAgICAgICAgICBjbGFzcz0ic2l0ZS1hdXRoLWNvbnRyb2wiIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4iPkxvZ2luPC9hPjwvbGk+CjwvdWw+PC9kaXY+PC9uYXY+CgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICAKCgogICAgCiAgICAKCgogICAgCgogICAgCiAgICAKICAgIAogICAgPGRpdgogICAgICAgIGNsYXNzPSJuYWctYmFyIG5hZy1iYXItLXBseWJhci1tYXN0aGVhZC1yZWxlYXNlLXdhcm5pbmciCiAgICAgICAgCiAgICAgICAgcm9sZT0ic3RhdHVzIgogICAgPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8cCBjbGFzcz0ibmFnLWJhci1tZXNzYWdlIj4KICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIEEgbmV3IHZlcnNpb24gb2YgTGFzdC5mbSBpcyBhdmFpbGFibGUsIHRvIGtlZXAgZXZlcnl0aGluZyBydW5uaW5nIHNtb290aGx5LCBwbGVhc2UgPGEgaHJlZj0iamF2YXNjcmlwdDp3aW5kb3cubG9jYXRpb24ucmVsb2FkKCkiPnJlbG9hZDwvYT4gdGhlIHNpdGUuCiAgICAKICAgIAogICAgICAgICAgICA8L3A+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKICAgIAoKICAgIAoKICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAKCgogICAgCiAgICAKCgoKCgoKICAgIAogICAgCgogICAgPGhlYWRlciBjbGFzcz0iCiAgICAgICAgaGVhZGVyCiAgICAgICAgCiAgICAgICAgICAgIGhlYWRlci0td2l0aC1hdmF0YXIKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgaGVhZGVyLS1zdWItcGFnZQogICAgICAgIAogICAgICAgIAogICAgICAgICAgICBoZWFkZXItLXVzZXIKICAgICAgICAKICAgICAgICAKICAgICI+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBoZWFkZXItYmFja2dyb3VuZAogICAgICAgICAgICAgICAgICAgIGhlYWRlci1iYWNrZ3JvdW5kLS1oYXMtaW1hZ2UKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIHN0eWxlPSJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS9hcjAvN2U3NTMxZGIzZjViNDEwOGE1NGMwZDQxZmExYTQ2MzEuanBnKTsiCiAgICAgICAgICAgID48L2Rpdj4KICAgICAgICAKCiAgICAgICAgCiAgICAKCgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1pbm5lci13cmFwIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAoKICAgIAoKICAgIDxkaXYgY2xhc3M9ImhlYWRlci1hdmF0YXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImV4cGFuZC1pbWFnZS1zaG93LW9uLWZvY3VzIGhlYWRlci1hdmF0YXItaW5uZXItd3JhcCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUiPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIDxzcGFuCiAgICAKICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgIGF2YXRhcgogICAgICAgICAgICAKICAgICAgICAiCiAgICAgICAgCiAgICA+CiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvYXZhdGFyMTcwcy8wMGI0OGMzYjBhYjg0NGZlYzQ4ZGE3NTk5Nzk4MjM0Zi5wbmciCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgYWx0PSJBdmF0YXIgZm9yIGFsZXhpc3RvdWxvdHRlIgogICAgICAgICAgICAKICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CgogICAgICAgIAogICAgPC9kaXY+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXItaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJoZWFkZXItaW5mby1wcmltYXJ5IGhlYWRlci1pbmZvLXByaW1hcnktLXdpdGgtY29sdW1ucyI+CiAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLWluZm8tcHJpbWFyeS1jb2wxIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iCiAgICAgICAgICAgICAgICBoZWFkZXItdGl0bGUtbGFiZWwtd3JhcAogICAgICAgICAgICAgICAgaGVhZGVyLXRpdGxlLWNvbHVtbi1lbGxpcHNpcy13cmFwCiAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICA8aDEgY2xhc3M9ImhlYWRlci10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA+YWxleGlzdG91bG90dGU8L2E+CiAgICAgICAgICAgICAgICA8L2gxPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgPG5hdgogICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBuYXZsaXN0CiAgICAgICAgICAgIAogICAgICAgICAgICBzZWNvbmRhcnktbmF2CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgbmF2bGlzdC0tbW9yZQogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgIgogICAgICAgIGFyaWEtbGFiZWw9IlNlY29uZGFyeSBuYXZpZ2F0aW9uIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXJlcXVpcmU9ImNvbXBvbmVudHMvY29sbGFwc2luZy1uYXYtdjIiCiAgICAgICAgICAgIGRhdGEtbW9yZS1zdHJpbmc9Ik1vcmXigKYiCiAgICAgICAgCiAgICA+CiAgICAgICAgPHVsIGNsYXNzPSJuYXZsaXN0LWl0ZW1zIGpzLW5hdmxpc3QtaXRlbXMiPgogICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLW92ZXJ2aWV3CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPdmVydmlldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPjxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0td2VlawogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlzdGVuaW5nLXJlcG9ydC93ZWVrIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpc3RlbmluZyBSZXBvcnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvbGk+PGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmxpc3QtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLS1saWJyYXJ5CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS1saW5rLS1hY3RpdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTGlicmFyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPihjdXJyZW50IHNlY3Rpb24pPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPjxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0tZm9sbG93aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9mb2xsb3dpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9sbG93aW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvbGk+PGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmxpc3QtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLS1mb2xsb3dlcnMKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2ZvbGxvd2VycyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb2xsb3dlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT48bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLWxvdmVkCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9sb3ZlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb3ZlZCBUcmFja3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT48bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLW9ic2Vzc2lvbnMKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL29ic2Vzc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JzZXNzaW9ucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPjxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0tZXZlbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9ldmVudHMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvbGk+PGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmxpc3QtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLS1uZWlnaGJvdXJzCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9uZWlnaGJvdXJzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5laWdoYm91cnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT48bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLXRhZ3MKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL3RhZ3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGFncwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPjxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0tc2hvdXRib3gKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL3Nob3V0Ym94IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNob3V0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPgogICAgICAgIDwvdWw+CiAgICA8L25hdj4KCiAgICAKCiAgICAgICAgPC9kaXY+CgogICAgICAgIAogICAgCiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAgICAgPGRpdiBjbGFzcz0iCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaGVhZGVyLWZlYXR1cmVkLXRyYWNrCiAgICAgICAgICAgICAgICBoZWFkZXItaW5mby1wcmltYXJ5LWNvbDIKICAgICAgICAgICAgICAgIGZlYXR1cmVkLWl0ZW0tLXRydW5jYXRlZAogICAgICAgICAgICAgICAgZmVhdHVyZWQtaXRlbS0tcmlnaHQKICAgICAgICAgICAgCiAgICAgICAgICAgIGZlYXR1cmVkLWl0ZW0KICAgICAgICAiPgogICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9ImZlYXR1cmVkLWl0ZW0tYXJ0Ij4KICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvOWMwOTRkOWZhNmMwNDQ5YWI1NGYxNzllOWIyNjhlMDUuanBnIgogICAgICAgICAgICBhbHQ9IlN5bmNvcGF0ZWQgQ2l0eSAoU3BlY2lhbCBKYXBhbiBFZGl0aW9uKSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGltYWdlLW92ZXJsYXktcGxheWxpbmstbGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1Xa2F6SWJvMzhRVSIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJXa2F6SWJvMzhRVSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9V2theklibzM4UVUiCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJNYXliZSBJIFdhcyBXcm9uZyIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L18vTWF5YmUrSStXYXMrV3JvbmciCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJMb25kb24gRWxla3RyaWNpdHkiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5IgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IkZlYXR1cmVkVHJhY2tQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZWQtaXRlbS1kZXRhaWxzIj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iZmVhdHVyZWQtaXRlbS1oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgVG9wIFRyYWNrCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2g0PgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9fL01heWJlK0krV2FzK1dyb25nIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iRmVhdHVyZWRUcmFja1RyYWNrTmFtZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImZlYXR1cmVkLWl0ZW0tbmFtZSIKICAgICAgICAgICAgCiAgICAgICAgPk1heWJlIEkgV2FzIFdyb25nPC9hPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IkZlYXR1cmVkVHJhY2tBcnRpc3ROYW1lIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iZmVhdHVyZWQtaXRlbS1hcnRpc3QiCiAgICAgICAgICAgIAogICAgICAgID5Mb25kb24gRWxla3RyaWNpdHk8L2E+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAKCgogICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9oZWFkZXI+CgoKCiAgICAKICAgIDxkaXYgaWQ9Im1hbnRsZV9za2luIiBjbGFzcz0iYWRhcHRpdmUtc2tpbi1jb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImFkYXB0aXZlLXNraW4td3JhcHBlciI+CiAgICAgICAgICAgIDxkaXYgaWQ9ImFkU2tpbkxlZnQiIGNsYXNzPSJhZGFwdGl2ZS1za2luLWxlZnQiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGlkPSJhZFNraW5SaWdodCIgY2xhc3M9ImFkYXB0aXZlLXNraW4tcmlnaHQiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgaWQ9InNraW4iIGRhdGEtYWQ9InNraW4iIGNsYXNzPSJza2luIGxhc3RmbS1hZCIgZGF0YS1hZHMtcGxhY2VtZW50PSd7JiMzNDtpZCYjMzQ7OiAmIzM0O3NraW4mIzM0OywgJiMzNDtzaXplcyYjMzQ7OiBbWzE2MDAsIDEwMDBdXSwgJiMzNDt0YXJnZXRpbmcmIzM0OzogeyYjMzQ7cG9zJiMzNDs6ICYjMzQ7dG9wJiMzNDt9LCAmIzM0O2NvbGxhcHNlX2JlZm9yZV9sb2FkJiMzNDs6IHRydWV9Jz48L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgIAoKCiAgICAgICAgCgogICAgICAgIAogICAgPGRpdiBjbGFzcz0iY29udGVudC10b3AiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtdG9wLWlubmVyLXdyYXAiPgogICAgICAgICAgICAKICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgaWQ9ImxlYWRlcl90b3AiIGRhdGEtYWQ9ImxlYWRlcl90b3AiIGNsYXNzPSJsZWFkZXJfdG9wIGxhc3RmbS1hZCIgZGF0YS1hZHMtcGxhY2VtZW50PSd7JiMzNDtpZCYjMzQ7OiAmIzM0O2xlYWRlcl90b3AmIzM0OywgJiMzNDtzaXplcyYjMzQ7OiBbWzcyOCwgOTBdLCBbOTcwLCA2Nl1dLCAmIzM0O3RhcmdldGluZyYjMzQ7OiB7JiMzNDtwb3MmIzM0OzogJiMzNDt0b3AmIzM0O30sICYjMzQ7YWRibG9ja19tZXNzYWdlJiMzNDs6IHRydWV9Jz48L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgIAoKCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgY29udGVudC10b3AtbG93ZXIiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9ImNvbnRlbnQtdG9wLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIExpYnJhcnkKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgIAogICAgPGRpdiBjbGFzcz0ibGlicmFyeS1jb250cm9scyI+CiAgICAgICAgCiAgICAKICAgICAgICAKICAgIDxuYXYKICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgbmF2bGlzdAogICAgICAgICAgICAKICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIG5hdmxpc3QtLW1vcmUKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICIKICAgICAgICBhcmlhLWxhYmVsPSJUZXJ0aWFyeSBuYXZpZ2F0aW9uIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXJlcXVpcmU9ImNvbXBvbmVudHMvY29sbGFwc2luZy1uYXYtdjIiCiAgICAgICAgICAgIGRhdGEtbW9yZS1zdHJpbmc9Ik1vcmXigKYiCiAgICAgICAgCiAgICA+CiAgICAgICAgPHVsIGNsYXNzPSJuYXZsaXN0LWl0ZW1zIGpzLW5hdmxpc3QtaXRlbXMiPgogICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLW92ZXJ2aWV3CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5P2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTY3JvYmJsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9saT48bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2bGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnktbmF2LWl0ZW0tLWFydGlzdHMKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvYXJ0aXN0cz9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJ0aXN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPjxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZsaXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS0tYWxidW1zCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID48YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeS1uYXYtaXRlbS1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L2FsYnVtcz9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxidW1zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvbGk+PGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmxpc3QtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLS10cmFja3MKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPjxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5LW5hdi1pdGVtLWxpbmstLWFjdGl2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3M/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyYWNrcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPihjdXJyZW50IHNlY3Rpb24pPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2xpPgogICAgICAgIDwvdWw+CiAgICA8L25hdj4KCiAgICAKCgogICAgICAgIDxkaXYgY2xhc3M9ImxpYnJhcnktY29udHJvbHMtZGF0ZXBpY2tlciI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgoKCgo8YnV0dG9uCiAgICBhcmlhLWNvbnRyb2xzPSJkYXRlLXJhbmdlLXBpY2tlciIKICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgZGF0YS1kaXNjbG9zZS1kcm9wZG93bgogICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJEYXRlU2VsZWN0b3IiCiAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iVG9nZ2xlIgogICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9InJpZ2h0LTM3IGJvdHRvbSIKICAgIGNsYXNzPSIKICAgICAgICBkYXRlLXJhbmdlLXBpY2tlci1idXR0b24KICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAiCj4KICAgIDxzcGFuIGNsYXNzPSJkYXRlLXJhbmdlLXBpY2tlci1idXR0b24taW5uZXIiPgogICAgICAgIAogICAgICAgICAgICBMYXN0IDkwIGRheXMKICAgICAgICAKICAgIDwvc3Bhbj4KPC9idXR0b24+Cgo8ZGl2CiAgICBpZD0iZGF0ZS1yYW5nZS1waWNrZXIiCiAgICBjbGFzcz0iCiAgICAgICAgZGF0ZS1yYW5nZS1waWNrZXItY29udGVudAogICAgICAgIAogICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAKICAgICIKPgogICAgCiAgICA8ZGl2IGNsYXNzPSJkYXRlLXJhbmdlLXBpY2tlci1wcmVzZXRzLXdyYXAiPgogICAgICAgIDx1bCBjbGFzcz0iZGF0ZS1yYW5nZS1waWNrZXItcHJlc2V0cyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUtcmFuZ2UtcGlja2VyLXByZXNldAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3M/ZGF0ZV9wcmVzZXQ9TEFTVF83X0RBWVMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iRGF0ZVNlbGVjdG9yIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQXBwbHlQcmVzZXQiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgTGFzdCA3IGRheXMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRlLXJhbmdlLXBpY2tlci1wcmVzZXQKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzP2RhdGVfcHJlc2V0PUxBU1RfMzBfREFZUyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJEYXRlU2VsZWN0b3IiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBcHBseVByZXNldCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICBMYXN0IDMwIGRheXMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRlLXJhbmdlLXBpY2tlci1wcmVzZXQKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlLXJhbmdlLXBpY2tlci1wcmVzZXQtLXNlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcz9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iRGF0ZVNlbGVjdG9yIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQXBwbHlQcmVzZXQiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgTGFzdCA5MCBkYXlzCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUtcmFuZ2UtcGlja2VyLXByZXNldHMKICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS1yYW5nZS1waWNrZXItcHJlc2V0cy0tY29sLTIKICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUtcmFuZ2UtcGlja2VyLXByZXNldAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3M/ZGF0ZV9wcmVzZXQ9TEFTVF8xODBfREFZUyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJEYXRlU2VsZWN0b3IiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBcHBseVByZXNldCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICBMYXN0IDE4MCBkYXlzCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS1yYW5nZS1waWNrZXItcHJlc2V0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcz9kYXRlX3ByZXNldD1MQVNUXzM2NV9EQVlTIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IkRhdGVTZWxlY3RvciIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9IkFwcGx5UHJlc2V0IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIExhc3QgMzY1IGRheXMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRlLXJhbmdlLXBpY2tlci1wcmVzZXQKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzP2RhdGVfcHJlc2V0PUFMTCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJEYXRlU2VsZWN0b3IiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBcHBseVByZXNldCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICBBbGwgdGltZQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIAogICAgICAgIDwvdWw+CiAgICA8L2Rpdj4KCiAgICA8Zm9ybQogICAgICAgIG1ldGhvZD0iZ2V0IgogICAgICAgIGFjdGlvbj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCiAgICAgICAgY2xhc3M9IgogICAgICAgICAgICBkYXRlLXJhbmdlLXBpY2tlci1mb3JtCiAgICAgICAgICAgIGNvbnRlbnQtZm9ybQogICAgICAgICAgICBqcy1kaXNjbG9zZS1kaXNhYmxlLWtleWJvYXJkCiAgICAgICAgIgogICAgPgogICAgICAgIAogICAgCiAgICAKCiAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSIKICAgICAgICAgICAgZm9ybS1ncm91cAogICAgICAgICAgICBmb3JtLWdyb3VwLS1mcm9tCiAgICAgICAgICAgIGpzLWZvcm0tZ3JvdXAKICAgICAgICAgICAgCiAgICAgICAgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgZm9yPSJpZF9mcm9tIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLWxhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgID5Gcm9tPC9sYWJlbD4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0ianMtZm9ybS1ncm91cC1jb250cm9scyBmb3JtLWdyb3VwLWNvbnRyb2xzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iaWRfZnJvbSIgbmFtZT0iZnJvbSIgcGxhY2Vob2xkZXI9IllZWVktTU0tREQiIHR5cGU9ImRhdGUiIHZhbHVlPSIyMDE5LTA0LTEzIiAvPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAKCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgIAogICAgICAgIDxkaXYgY2xhc3M9IgogICAgICAgICAgICBmb3JtLWdyb3VwCiAgICAgICAgICAgIGZvcm0tZ3JvdXAtLXRvCiAgICAgICAgICAgIGpzLWZvcm0tZ3JvdXAKICAgICAgICAgICAgCiAgICAgICAgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgZm9yPSJpZF90byIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC1sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+VG88L2xhYmVsPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJqcy1mb3JtLWdyb3VwLWNvbnRyb2xzIGZvcm0tZ3JvdXAtY29udHJvbHMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJpZF90byIgbmFtZT0idG8iIHBsYWNlaG9sZGVyPSJZWVlZLU1NLUREIiB0eXBlPSJkYXRlIiB2YWx1ZT0iMjAxOS0wNy0xMiIgLz4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgCgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIAoKICAgICAgICAKICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1zdWJtaXQgZm9ybS1zdWJtaXQtLWFsaWduLXJpZ2h0Ij4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBqcy1kaXNjbG9zZS1jbG9zZQogICAgICAgICAgICAgICAgICAgICAgICBidG4tY2FuY2VsCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIENhbmNlbAogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgdHlwZT0ic3VibWl0IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4tcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IkRhdGVTZWxlY3RvciIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQXBwbHlDdXN0b20iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgQXBwbHkKICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZm9ybT4KPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgogICAgICAgIAogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIHBhZ2UtY29udGVudCI+CiAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tYWluIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaWJyYXJ5LXRvcCI+CiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJtZXRhZGF0YS1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0ibWV0YWRhdGEtdGl0bGUiPlRyYWNrcyBTY3JvYmJsZWQ8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1ldGFkYXRhLWRpc3BsYXkiPjEsMTA5PC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgaWQ9Im1vYmlsZV9wb3NfMSIgZGF0YS1hZD0ibW9iaWxlX3Bvc18xIiBjbGFzcz0ibW9iaWxlX3Bvc18xIGxhc3RmbS1hZC1tb2JpbGUiIGRhdGEtYWRzLXBsYWNlbWVudD0neyYjMzQ7aWQmIzM0OzogJiMzNDttb2JpbGVfcG9zXzEmIzM0OywgJiMzNDtzaXplcyYjMzQ7OiBbWzMwMCwgMjUwXSwgWzMyMCwgNTBdXSwgJiMzNDtpc19tb2JpbGUmIzM0OzogdHJ1ZSwgJiMzNDt0YXJnZXRpbmcmIzM0OzogeyYjMzQ7cG9zJiMzNDs6ICYjMzQ7MSYjMzQ7fSwgJiMzNDthZGJsb2NrX21lc3NhZ2UmIzM0OzogdHJ1ZX0nPjwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8cCBjbGFzcz0ibXB1LXN1YnNjcmlwdGlvbi11cHNlbGwgbXB1LXN1YnNjcmlwdGlvbi11cHNlbGwtLW1vYmlsZV9wb3NfMSI+CiAgICAgICAgICAgICAgICBEb24ndCB3YW50IHRvIHNlZSBhZHM/IDxhIGhyZWY9Ii9zdWJzY3JpYmUiIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3Vic2NyaWJlQ2xpY2siIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBZFVwc2VsbENUQSI+U3Vic2NyaWJlIG5vdzwvYT4KICAgICAgICAgICAgPC9wPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgPHNlY3Rpb24gaWQ9InRvcC10cmFja3Mtc2VjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKCiAgICA8dGFibGUKICAgICAgICAKICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgIGNoYXJ0bGlzdAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtaW5kZXgKICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC0td2l0aC1pbmRleC0tbGVuZ3RoLTIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2hhcnRsaXN0LS13aXRoLXBsYXkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2hhcnRsaXN0LS13aXRoLW1vYmlsZS1wbGF5CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtaW1hZ2UKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2hhcnRsaXN0LS13aXRoLWxvdmVkCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC0td2l0aC1hcnRpc3QKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC0td2l0aC1tb3JlCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjaGFydGxpc3QtLXdpdGgtYmFyCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2hhcnRsaXN0LS13aXRoLWJ1eWxpbmtzCiAgICAgICAgICAgIAogICAgICAgICIKICAgID4KICAgICAgICA8dGhlYWQgY2xhc3M9InNyLW9ubHkiPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dGg+UmFuazwvdGg+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dGg+UGxheTwvdGg+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dGg+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxidW0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0aD5Mb3ZlZDwvdGg+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dGg+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIFRyYWNrIG5hbWUKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGg+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHRoPkFydGlzdCBuYW1lPC90aD4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0aD5CdXk8L3RoPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHRoPk9wdGlvbnM8L3RoPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHRoPlNjcm9iYmxlczwvdGg+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC90cj4KICAgICAgICA8L3RoZWFkPgogICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9V2theklibzM4UVUiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iV2theklibzM4UVUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVdrYXpJYm8zOFFVIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iTWF5YmUgSSBXYXMgV3JvbmciCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9fL01heWJlK0krV2FzK1dyb25nIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iTG9uZG9uIEVsZWt0cmljaXR5IgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9TeW5jb3BhdGVkK0NpdHkrKFNwZWNpYWwrSmFwYW4rRWRpdGlvbikiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzljMDk0ZDlmYTZjMDQ0OWFiNTRmMTc5ZTliMjY4ZTA1LmpwZyIKICAgICAgICAgICAgYWx0PSJTeW5jb3BhdGVkIENpdHkgKFNwZWNpYWwgSmFwYW4gRWRpdGlvbikiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNGRlNzIwOWY2YTkyNjg3Yjg1MWJkNDBiNWQ1MGNkZGUiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI0ZGU3MjA5ZjZhOTI2ODdiODUxYmQ0MGI1ZDUwY2RkZSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkvXy9NYXliZStJK1dhcytXcm9uZyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Ik1heWJlIEkgV2FzIFdyb25nIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPk1heWJlIEkgV2FzIFdyb25nPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJMb25kb24gRWxla3RyaWNpdHkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkxvbmRvbiBFbGVrdHJpY2l0eTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1kYzZjYTYxOC1mNWFjLTRhYzAtOTcwOS0yMjQ4M2ZmMGFjZDciCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9fL01heWJlK0krV2FzK1dyb25nLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1kYzZjYTYxOC1mNWFjLTRhYzAtOTcwOS0yMjQ4M2ZmMGFjZDciCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtZDQzZDBmYzktYTAyMy00YjRhLWI2ZjAtZDk4YmQxZTBhNWNhIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9fL01heWJlK0krV2FzK1dyb25nLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWQ0M2QwZmM5LWEwMjMtNGI0YS1iNmYwLWQ5OGJkMWUwYTVjYSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTG9uZG9uK0VsZWt0cmljaXR5L18vTWF5YmUrSStXYXMrV3JvbmciCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Mb25kb24rRWxla3RyaWNpdHkvXy9NYXliZStJK1dhcytXcm9uZz9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0xvbmRvbitFbGVrdHJpY2l0eSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0xvbmRvbitFbGVrdHJpY2l0eT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0xvbmRvbitFbGVrdHJpY2l0eS9fL01heWJlK0krV2FzK1dyb25nP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxMDAuMCU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAzMyA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvVmFyaW91cytBcnRpc3RzL0Jhc3NydXNoKzEuMCsoVmlwZXIrUHJlc2VudHMpIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy83MjMxNGQ0YTc1OWRkMTQ3NTFhOTg4NDQ0MzNkNTBhYi5qcGciCiAgICAgICAgICAgIGFsdD0iQmFzc3J1c2ggMS4wIChWaXBlciBQcmVzZW50cykiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZGEwZmJjMmFjMWU0NmQ0MTRjODEzMjc5ZjgwYTM0ZTAiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJkYTBmYmMyYWMxZTQ2ZDQxNGM4MTMyNzlmODBhMzRlMCIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9UaGUrUHJvdG90eXBlcy9fL0tpbGwrVGhlK1NpbGVuY2UrKGZlYXQuK0F5YWgrTWFyYXIpIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iS2lsbCBUaGUgU2lsZW5jZSAoZmVhdC4gQXlhaCBNYXJhcikiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+S2lsbCBUaGUgU2lsZW5jZSAoZmVhdC4gQXlhaCBNYXJhcik8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1RoZStQcm90b3R5cGVzIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iVGhlIFByb3RvdHlwZXMiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlRoZSBQcm90b3R5cGVzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTA4MjVlMzk3LTI5MTktNDNkYi1hZGFlLWE2YmJkMTIwODlhNCIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvVGhlK1Byb3RvdHlwZXMvXy9LaWxsK1RoZStTaWxlbmNlKyhmZWF0LitBeWFoK01hcmFyKS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtMDgyNWUzOTctMjkxOS00M2RiLWFkYWUtYTZiYmQxMjA4OWE0IgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLWYwNTMwNjlhLTkwNDktNGQzYi05Yjc5LTRlMGU1M2E0ZDQyZiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9UaGUrUHJvdG90eXBlcy9fL0tpbGwrVGhlK1NpbGVuY2UrKGZlYXQuK0F5YWgrTWFyYXIpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWYwNTMwNjlhLTkwNDktNGQzYi05Yjc5LTRlMGU1M2E0ZDQyZiIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvVGhlK1Byb3RvdHlwZXMvXy9LaWxsK1RoZStTaWxlbmNlKyhmZWF0LitBeWFoK01hcmFyKSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1RoZStQcm90b3R5cGVzL18vS2lsbCtUaGUrU2lsZW5jZSsoZmVhdC4rQXlhaCtNYXJhcik/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9UaGUrUHJvdG90eXBlcyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1RoZStQcm90b3R5cGVzP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvVGhlK1Byb3RvdHlwZXMvXy9LaWxsK1RoZStTaWxlbmNlKyhmZWF0LitBeWFoK01hcmFyKT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6NzIuNzI3MjcyNzI3MjcyNzMlOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgMjQgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0VkK1NvbG8vU291bmRzeXN0ZW0rRW50ZXJ0YWluZXIrKGZlYXQuK01DK1NweWRhKSstK1NpbmdsZSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iU291bmRzeXN0ZW0gRW50ZXJ0YWluZXIgKGZlYXQuIE1DIFNweWRhKSAtIFNpbmdsZSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJlMmVmY2NmMTQ1ZGU3ZTNkZjEyOWQ3NDliZjZlOWI0NCIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImUyZWZjY2YxNDVkZTdlM2RmMTI5ZDc0OWJmNmU5YjQ0IgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0VkK1NvbG8vXy9Tb3VuZHN5c3RlbStFbnRlcnRhaW5lcisoZmVhdC4rTUMrU3B5ZGEpIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iU291bmRzeXN0ZW0gRW50ZXJ0YWluZXIgKGZlYXQuIE1DIFNweWRhKSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Tb3VuZHN5c3RlbSBFbnRlcnRhaW5lciAoZmVhdC4gTUMgU3B5ZGEpPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9FZCtTb2xvIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iRWQgU29sbyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+RWQgU29sbzwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy02MmQ0NDdhZS1kMmQ4LTRlZDAtYmI1ZS1jNWRiNDkzMDc3NjYiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0VkK1NvbG8vXy9Tb3VuZHN5c3RlbStFbnRlcnRhaW5lcisoZmVhdC4rTUMrU3B5ZGEpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy02MmQ0NDdhZS1kMmQ4LTRlZDAtYmI1ZS1jNWRiNDkzMDc3NjYiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtNjUxYThiN2UtZjM1OS00NTNjLTk5ZWQtNjM1YjEwMzZlODFkIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0VkK1NvbG8vXy9Tb3VuZHN5c3RlbStFbnRlcnRhaW5lcisoZmVhdC4rTUMrU3B5ZGEpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTY1MWE4YjdlLWYzNTktNDUzYy05OWVkLTYzNWIxMDM2ZTgxZCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRWQrU29sby9fL1NvdW5kc3lzdGVtK0VudGVydGFpbmVyKyhmZWF0LitNQytTcHlkYSkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9FZCtTb2xvL18vU291bmRzeXN0ZW0rRW50ZXJ0YWluZXIrKGZlYXQuK01DK1NweWRhKT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0VkK1NvbG8iCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9FZCtTb2xvP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRWQrU29sby9fL1NvdW5kc3lzdGVtK0VudGVydGFpbmVyKyhmZWF0LitNQytTcHlkYSk/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjQ4LjQ4NDg0ODQ4NDg0ODQ4NCU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAxNiA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJTZWVpcG9yYSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJhOTA5ZjM4NTRmYmI1NDRiOTU5YjQ5NmQyYTRjYTIyYSIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImE5MDlmMzg1NGZiYjU0NGI5NTliNDk2ZDJhNGNhMjJhIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0lubmFDaXJjbGUvXy9TZWVpcG9yYSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlNlZWlwb3JhIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlNlZWlwb3JhPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Jbm5hQ2lyY2xlIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iSW5uYUNpcmNsZSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+SW5uYUNpcmNsZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1mNTk1MzlkZC1mZmI3LTQ4NTItOWNiZS01NjFhYTE4NzlhZGMiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0lubmFDaXJjbGUvXy9TZWVpcG9yYS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtZjU5NTM5ZGQtZmZiNy00ODUyLTljYmUtNTYxYWExODc5YWRjIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTU0OTIxNjk3LWI1N2ItNGQzYy1hZGUyLWYyM2Q5Njk3ZTVmMyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Jbm5hQ2lyY2xlL18vU2VlaXBvcmEvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNTQ5MjE2OTctYjU3Yi00ZDNjLWFkZTItZjIzZDk2OTdlNWYzIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Jbm5hQ2lyY2xlL18vU2VlaXBvcmEiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Jbm5hQ2lyY2xlL18vU2VlaXBvcmE/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Jbm5hQ2lyY2xlIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvSW5uYUNpcmNsZT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0lubmFDaXJjbGUvXy9TZWVpcG9yYT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6NDguNDg0ODQ4NDg0ODQ4NDg0JTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDE2IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1SbHJYNkJJR2xaNCIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJSbHJYNkJJR2xaNCIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9UmxyWDZCSUdsWjQiCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJEaWFnb25hbCIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvR3V5K0ovXy9EaWFnb25hbCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9Ikd1eSBKIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL0d1eStKIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvR3V5K0ovTURRKyUyRitEaWFnb25hbCIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYWQ4MDU5ZDUwMDM4MzZiNmQxNGJhYmIyZjVkZTEyOGMuanBnIgogICAgICAgICAgICBhbHQ9Ik1EUSAvIERpYWdvbmFsIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImIyN2YxODZmNmQ4NTE2NTg5MDljNGI5ODRiN2NkNjliIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYjI3ZjE4NmY2ZDg1MTY1ODkwOWM0Yjk4NGI3Y2Q2OWIiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR3V5K0ovXy9EaWFnb25hbCIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkRpYWdvbmFsIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkRpYWdvbmFsPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9HdXkrSiIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Ikd1eSBKIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5HdXkgSjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1lM2Q3ZmE0Ny1mN2RhLTQ5OTUtOTZiOS03MjY0ZGZhOWQ2NTgiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0d1eStKL18vRGlhZ29uYWwvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWUzZDdmYTQ3LWY3ZGEtNDk5NS05NmI5LTcyNjRkZmE5ZDY1OCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0wMDEyNTFkNy1iY2Q1LTRjYzUtYjhhMS1lM2Q0Zjg5Y2RlYzIiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvR3V5K0ovXy9EaWFnb25hbC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS0wMDEyNTFkNy1iY2Q1LTRjYzUtYjhhMS1lM2Q0Zjg5Y2RlYzIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0d1eStKL18vRGlhZ29uYWwiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9HdXkrSi9fL0RpYWdvbmFsP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR3V5K0oiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9HdXkrSj9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0d1eStKL18vRGlhZ29uYWw/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjQ1LjQ1NDU0NTQ1NDU0NTQ1JTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDE1IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9WYXJpb3VzK0FydGlzdHMvVW5kZXJncm91bmQrRnJlcXVlbmNpZXM6K0liaXphK0VkaXRpb24rMjAxOSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iVW5kZXJncm91bmQgRnJlcXVlbmNpZXM6IEliaXphIEVkaXRpb24gMjAxOSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJjMzhlYTY1NDFhOTBkOGJmNTA1MjM4NzRkNThmOTliMSIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImMzOGVhNjU0MWE5MGQ4YmY1MDUyMzg3NGQ1OGY5OWIxIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0lubmFDaXJjbGUvXy9WYWxreXJpYSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlZhbGt5cmlhIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlZhbGt5cmlhPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Jbm5hQ2lyY2xlIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iSW5uYUNpcmNsZSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+SW5uYUNpcmNsZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1mNDNhMGJiNS0xNjlkLTQ5YjUtYmRkZC0zZmEwNmI1YmI3YWMiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0lubmFDaXJjbGUvXy9WYWxreXJpYS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtZjQzYTBiYjUtMTY5ZC00OWI1LWJkZGQtM2ZhMDZiNWJiN2FjIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTc2M2VhYmUwLWQyZTgtNDM0Yy1iNDA2LTQ0MmMzOGY2ZGEwYyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Jbm5hQ2lyY2xlL18vVmFsa3lyaWEvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNzYzZWFiZTAtZDJlOC00MzRjLWI0MDYtNDQyYzM4ZjZkYTBjIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Jbm5hQ2lyY2xlL18vVmFsa3lyaWEiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Jbm5hQ2lyY2xlL18vVmFsa3lyaWE/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Jbm5hQ2lyY2xlIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvSW5uYUNpcmNsZT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0lubmFDaXJjbGUvXy9WYWxreXJpYT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6NDIuNDI0MjQyNDI0MjQyNDIlOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgMTQgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDcKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0hlbnJ5K1NhaXovSW4rVGhlK0Rpc3RhbmNlIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9kYTc3OTU4YjczOTk1MGFmNzEwNGNkMmRlNGNjNGJlNy5qcGciCiAgICAgICAgICAgIGFsdD0iSW4gVGhlIERpc3RhbmNlIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjZiOGNmNjMxNjk3MmIzYWY3NDRiYjdlYTMxZjdlNmNmIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNmI4Y2Y2MzE2OTcyYjNhZjc0NGJiN2VhMzFmN2U2Y2YiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvSGVucnkrU2Fpei9fL0luK3RoZStEaXN0YW5jZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkluIHRoZSBEaXN0YW5jZSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5JbiB0aGUgRGlzdGFuY2U8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0hlbnJ5K1NhaXoiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJIZW5yeSBTYWl6IgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5IZW5yeSBTYWl6PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTBhZWZjNjE2LWFkNjktNDEwNC1hOGVkLTE0NDM4ZmI2ODA3MyIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvSGVucnkrU2Fpei9fL0luK3RoZStEaXN0YW5jZS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtMGFlZmM2MTYtYWQ2OS00MTA0LWE4ZWQtMTQ0MzhmYjY4MDczIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTBkZWRhOTMwLTg0OWEtNDkwNC1hODY4LTg2MDQ5NTM0NjVkNiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9IZW5yeStTYWl6L18vSW4rdGhlK0Rpc3RhbmNlLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTBkZWRhOTMwLTg0OWEtNDkwNC1hODY4LTg2MDQ5NTM0NjVkNiIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvSGVucnkrU2Fpei9fL0luK3RoZStEaXN0YW5jZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0hlbnJ5K1NhaXovXy9Jbit0aGUrRGlzdGFuY2U/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9IZW5yeStTYWl6IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvSGVucnkrU2Fpej9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0hlbnJ5K1NhaXovXy9Jbit0aGUrRGlzdGFuY2U/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjMzLjMzMzMzMzMzMzMzMzMzJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDExIDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA4CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzQxMjhhNmViMjlmOTQ5NDNjOWQyMDZjMDhlNjI1OTA0IgogICAgICAgICAgICBhbHQ9IlNoaXZhIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImVhMGQ0MzBkNWM0OGFlNzc4NTU3ZTAxZTRiYjc5ZWIxIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZWEwZDQzMGQ1YzQ4YWU3Nzg1NTdlMDFlNGJiNzllYjEiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvSW5uYUNpcmNsZS9fL1NoaXZhIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iU2hpdmEiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+U2hpdmE8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0lubmFDaXJjbGUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJJbm5hQ2lyY2xlIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Jbm5hQ2lyY2xlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTE4NThlNzQxLTFkN2EtNDFhMS05OGZiLWJkZjA5MGNlZTBkYyIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvSW5uYUNpcmNsZS9fL1NoaXZhLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy0xODU4ZTc0MS0xZDdhLTQxYTEtOThmYi1iZGYwOTBjZWUwZGMiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtZWFmYzZjOTAtZGRkMC00MzRkLTk5YjctNTYyZWI5NGJiNjE4IgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0lubmFDaXJjbGUvXy9TaGl2YS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1lYWZjNmM5MC1kZGQwLTQzNGQtOTliNy01NjJlYjk0YmI2MTgiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0lubmFDaXJjbGUvXy9TaGl2YSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0lubmFDaXJjbGUvXy9TaGl2YT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0lubmFDaXJjbGUiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Jbm5hQ2lyY2xlP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvSW5uYUNpcmNsZS9fL1NoaXZhP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDozMy4zMzMzMzMzMzMzMzMzMyU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAxMSA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgOQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJUaGUgVHJvdWJsZW1ha2VyeiIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSIyNTU1MGY5ZjdhZmYzMzk4NzUwMGI2NzVkOGJiMTg5ZiIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjI1NTUwZjlmN2FmZjMzOTg3NTAwYjY3NWQ4YmIxODlmIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9UaGUrVHJvdWJsZW1ha2VyeiIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlRoZSBUcm91YmxlbWFrZXJ6IgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlRoZSBUcm91YmxlbWFrZXJ6PC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQm9yaXMgQnJlamNoYSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Qm9yaXMgQnJlamNoYTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1iNzM2MmVhMC01MjNlLTQxZDktYTc5YS03ZmNlMDRlMWUwZjYiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9UaGUrVHJvdWJsZW1ha2Vyei8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtYjczNjJlYTAtNTIzZS00MWQ5LWE3OWEtN2ZjZTA0ZTFlMGY2IgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTMwYjcyNTAxLTQ0YmUtNGIwZi04YjljLTE4ZTcwMDgxMTQ5MCIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vVGhlK1Ryb3VibGVtYWtlcnovK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtMzBiNzI1MDEtNDRiZS00YjBmLThiOWMtMThlNzAwODExNDkwIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhL18vVGhlK1Ryb3VibGVtYWtlcnoiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Cb3JpcytCcmVqY2hhL18vVGhlK1Ryb3VibGVtYWtlcno/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JpcytCcmVqY2hhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JvcmlzK0JyZWpjaGEvXy9UaGUrVHJvdWJsZW1ha2Vyej9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MzAuMzAzMDMwMzAzMDMwMzA1JTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDEwIDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvSW5uYUNpcmNsZS9TZWVpcG9yYStFUCIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iU2VlaXBvcmEgRVAiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iODJkMjY4Y2JjOTc1YWI1ZjhiN2ZkM2Q3ZWFkYWZhMWQiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iODJkMjY4Y2JjOTc1YWI1ZjhiN2ZkM2Q3ZWFkYWZhMWQiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Jbm5hQ2lyY2xlL18vU2VlaXBvcmErKFN0cmlubmVyK1JlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlNlZWlwb3JhIChTdHJpbm5lciBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+U2VlaXBvcmEgKFN0cmlubmVyIFJlbWl4KTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvSW5uYUNpcmNsZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IklubmFDaXJjbGUiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPklubmFDaXJjbGU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtODY5ZmNkNmUtYmEzZS00YTNkLThjODUtMTliODA0MWRjMjljIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Jbm5hQ2lyY2xlL18vU2VlaXBvcmErKFN0cmlubmVyK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtODY5ZmNkNmUtYmEzZS00YTNkLThjODUtMTliODA0MWRjMjljIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLWQ1MmMzMDhkLTRhZTktNDQyMi04Mjg2LTBlZmQzNmIzZTA1NiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Jbm5hQ2lyY2xlL18vU2VlaXBvcmErKFN0cmlubmVyK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1kNTJjMzA4ZC00YWU5LTQ0MjItODI4Ni0wZWZkMzZiM2UwNTYiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0lubmFDaXJjbGUvXy9TZWVpcG9yYSsoU3RyaW5uZXIrUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvSW5uYUNpcmNsZS9fL1NlZWlwb3JhKyhTdHJpbm5lcitSZW1peCk/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Jbm5hQ2lyY2xlIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvSW5uYUNpcmNsZT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0lubmFDaXJjbGUvXy9TZWVpcG9yYSsoU3RyaW5uZXIrUmVtaXgpP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDozMC4zMDMwMzAzMDMwMzAzMDUlOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgMTAgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY2hhcnRsaXN0LWJyZWFrIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJqb2luLWN0YSBsaW5rLWJsb2NrIGpzLWxpbmstYmxvY2siPgogICAgICAgIDxkaXYgY2xhc3M9ImpvaW4tY3RhLWRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgPGgzPldhbnQgeW91ciBvd24gcGVyc29uYWxpc2VkIG11c2ljIGNoYXJ0cz88L2gzPgogICAgICAgICAgICA8cD5Kb2luIExhc3QuZm0gZm9yIGZyZWUgdG8gZ2V0IHlvdXIgb3duIG11c2ljIHByb2ZpbGUhPC9wPgogICAgICAgIDwvZGl2PgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9qb2luIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBidG4tcHJpbWFyeQogICAgICAgICAgICAgICAgYnRuLWJpZwogICAgICAgICAgICAgICAgam9pbi1jdGEtYnV0dG9uCiAgICAgICAgICAgICAgICBsaW5rLWJsb2NrLXRhcmdldAogICAgICAgICAgICAiCiAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iSm9pbkNUQUNsaWNrIgogICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iV2FudFlvdXJPd25NdXNpY0NoYXJ0cyIKICAgICAgICA+Sm9pbiBMYXN0LmZtPC9hPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9qb2luIgogICAgICAgICAgICBjbGFzcz0ianMtbGluay1ibG9jay1jb3Zlci1saW5rIGxpbmstYmxvY2stY292ZXItbGluayIKICAgICAgICAgICAgdGFiaW5kZXg9Ii0xIgogICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJKb2luQ1RBQ2xpY2siCiAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJXYW50WW91ck93bk11c2ljQ2hhcnRzIgogICAgICAgID48L2E+CiAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1EYUJDZjJqbmVtcyIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJEYUJDZjJqbmVtcyIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9RGFCQ2Yyam5lbXMiCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJEZWx0YXZveCIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvTmhhci9fL0RlbHRhdm94IgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iTmhhciIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy9OaGFyIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvTmhhci9EZWx0YXZveCstK1NpbmdsZSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iRGVsdGF2b3ggLSBTaW5nbGUiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNDhmNDk4ZmQ2NGVhNGNhNTI2MzdiZGNkYjdlNzUxMmIiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI0OGY0OThmZDY0ZWE0Y2E1MjYzN2JkY2RiN2U3NTEyYiIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9OaGFyL18vRGVsdGF2b3giCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJEZWx0YXZveCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5EZWx0YXZveDwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTmhhciIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Ik5oYXIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPk5oYXI8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNDFhNzNmOTktYTEwZS00MjVhLThjMGQtYjY1ZjQzMDk2Y2I4IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9OaGFyL18vRGVsdGF2b3gvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTQxYTczZjk5LWExMGUtNDI1YS04YzBkLWI2NWY0MzA5NmNiOCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1hNjc0NDA4NC0wYzFjLTRiNmMtYTI0Ny01MjUyODMyOGNkN2IiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvTmhhci9fL0RlbHRhdm94LytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWE2NzQ0MDg0LTBjMWMtNGI2Yy1hMjQ3LTUyNTI4MzI4Y2Q3YiIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTmhhci9fL0RlbHRhdm94IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvTmhhci9fL0RlbHRhdm94P2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTmhhciIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL05oYXI/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsaWJyYXJ5JTJGdHJhY2tzIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9OaGFyL18vRGVsdGF2b3g/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjMwLjMwMzAzMDMwMzAzMDMwNSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAxMCA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMTIKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iTW9ua2V5IEt1c2giCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZTQ3MjY4OTljYzQwNWNmMDliNjk5NjdkMjE5ZmJhMzkiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJlNDcyNjg5OWNjNDA1Y2YwOWI2OTk2N2QyMTlmYmEzOSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9MYUNoaXBzL18vTW9ua2V5K0t1c2giCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJNb25rZXkgS3VzaCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Nb25rZXkgS3VzaDwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTGFDaGlwcyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkxhQ2hpcHMiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkxhQ2hpcHM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtZWQ0ZWNmM2YtYjAzZi00OGM0LTljYWEtYTE0NTljMzBiZDgwIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9MYUNoaXBzL18vTW9ua2V5K0t1c2gvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWVkNGVjZjNmLWIwM2YtNDhjNC05Y2FhLWExNDU5YzMwYmQ4MCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0zNGM1OWRkMC03M2UzLTQwZTctODdiMi1mNjcxM2I4MjI5MGMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvTGFDaGlwcy9fL01vbmtleStLdXNoLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTM0YzU5ZGQwLTczZTMtNDBlNy04N2IyLWY2NzEzYjgyMjkwYyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTGFDaGlwcy9fL01vbmtleStLdXNoIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvTGFDaGlwcy9fL01vbmtleStLdXNoP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTGFDaGlwcyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0xhQ2hpcHM/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsaWJyYXJ5JTJGdHJhY2tzIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9MYUNoaXBzL18vTW9ua2V5K0t1c2g/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjI3LjI3MjcyNzI3MjcyNzI3JTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDkgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzQxMjhhNmViMjlmOTQ5NDNjOWQyMDZjMDhlNjI1OTA0IgogICAgICAgICAgICBhbHQ9Ik5vdyBTaGUmIzM5O3MgR29uZSAoSiBCb3N0cm9uIFJlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI2YTI0MDEyZDgwMWU5ZTAxYTE5NGEzNjZhYTEwNWQ2MyIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjZhMjQwMTJkODAxZTllMDFhMTk0YTM2NmFhMTA1ZDYzIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0NvbGxpZStCdWRkei9fL05vdytTaGUlMjdzK0dvbmUrKEorQm9zdHJvbitSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJOb3cgU2hlJiMzOTtzIEdvbmUgKEogQm9zdHJvbiBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Tm93IFNoZSYjMzk7cyBHb25lIChKIEJvc3Ryb24gUmVtaXgpPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Db2xsaWUrQnVkZHoiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJDb2xsaWUgQnVkZHoiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkNvbGxpZSBCdWRkejwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy0xNzhiYzJmNi1hZWYwLTQwZjUtYTk5OC0xNWExZTJhZmE0NDciCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0NvbGxpZStCdWRkei9fL05vdytTaGUlMjdzK0dvbmUrKEorQm9zdHJvbitSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTE3OGJjMmY2LWFlZjAtNDBmNS1hOTk4LTE1YTFlMmFmYTQ0NyIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1lNzNkNWZkNC04YWRmLTQzMGItYmQ5Yy02NmY2MTRlMDcwYmIiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQ29sbGllK0J1ZGR6L18vTm93K1NoZSUyN3MrR29uZSsoSitCb3N0cm9uK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1lNzNkNWZkNC04YWRmLTQzMGItYmQ5Yy02NmY2MTRlMDcwYmIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0NvbGxpZStCdWRkei9fL05vdytTaGUlMjdzK0dvbmUrKEorQm9zdHJvbitSZW1peCkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Db2xsaWUrQnVkZHovXy9Ob3crU2hlJTI3cytHb25lKyhKK0Jvc3Ryb24rUmVtaXgpP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ29sbGllK0J1ZGR6IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ29sbGllK0J1ZGR6P2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ29sbGllK0J1ZGR6L18vTm93K1NoZSUyN3MrR29uZSsoSitCb3N0cm9uK1JlbWl4KT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MjQuMjQyNDI0MjQyNDI0MjQyJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDggPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE0CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzQxMjhhNmViMjlmOTQ5NDNjOWQyMDZjMDhlNjI1OTA0IgogICAgICAgICAgICBhbHQ9IlRvbW9ycm93bGFuZCAyMDE4IgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjM4Zjc3NTkyNTJmZmEyNDYwZTU4M2E1NDU5MjY5Y2RkIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMzhmNzc1OTI1MmZmYTI0NjBlNTgzYTU0NTkyNjljZGQiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvU29sb211bi9fL1RvbW9ycm93bGFuZCsyMDE4IgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iVG9tb3Jyb3dsYW5kIDIwMTgiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+VG9tb3Jyb3dsYW5kIDIwMTg8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1NvbG9tdW4iCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJTb2xvbXVuIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Tb2xvbXVuPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTE3NGVhM2Q0LTBiNzgtNDMyZC04OTIwLWU1YzEyYTg1MTI1MiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvU29sb211bi9fL1RvbW9ycm93bGFuZCsyMDE4LytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy0xNzRlYTNkNC0wYjc4LTQzMmQtODkyMC1lNWMxMmE4NTEyNTIiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtNGVjNjRlMzAtMTFjZS00NDc1LTg1Y2QtNTc3ZjUyNzM2MGE0IgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1NvbG9tdW4vXy9Ub21vcnJvd2xhbmQrMjAxOC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS00ZWM2NGUzMC0xMWNlLTQ0NzUtODVjZC01NzdmNTI3MzYwYTQiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1NvbG9tdW4vXy9Ub21vcnJvd2xhbmQrMjAxOCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1NvbG9tdW4vXy9Ub21vcnJvd2xhbmQrMjAxOD9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1NvbG9tdW4iCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Tb2xvbXVuP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvU29sb211bi9fL1RvbW9ycm93bGFuZCsyMDE4P2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoyNC4yNDI0MjQyNDI0MjQyNDIlOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgOCA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMTUKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PThsTjB4QkdXTC1FIgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9IjhsTjB4QkdXTC1FIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj04bE4weEJHV0wtRSIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9IkhlYXJ0YmVhdCBMb3VkIChFeHRlbmRlZCBWZXJzaW9uKSIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvQW5keStDKyZhbXA7K0Zpb3JhL18vSGVhcnRiZWF0K0xvdWQrKEV4dGVuZGVkK1ZlcnNpb24pIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iQW5keSBDICZhbXA7IEZpb3JhIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL0FuZHkrQysmYW1wOytGaW9yYSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iSGVhcnRiZWF0IExvdWQgKEV4dGVuZGVkIFZlcnNpb24pIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9Ijg2MmFmYTY2ZDU2ZjBkNDkyNGIwODk3Yzc3YzBhZDBlIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iODYyYWZhNjZkNTZmMGQ0OTI0YjA4OTdjNzdjMGFkMGUiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQW5keStDKyZhbXA7K0Zpb3JhL18vSGVhcnRiZWF0K0xvdWQrKEV4dGVuZGVkK1ZlcnNpb24pIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iSGVhcnRiZWF0IExvdWQgKEV4dGVuZGVkIFZlcnNpb24pIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkhlYXJ0YmVhdCBMb3VkIChFeHRlbmRlZCBWZXJzaW9uKTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQW5keStDKyZhbXA7K0Zpb3JhIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQW5keSBDICZhbXA7IEZpb3JhIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5BbmR5IEMgJmFtcDsgRmlvcmE8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtMTBjM2EwZWEtNjU5Yy00MzllLThhZmMtNTUyNmVlNzc1ZjkzIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9BbmR5K0MrJmFtcDsrRmlvcmEvXy9IZWFydGJlYXQrTG91ZCsoRXh0ZW5kZWQrVmVyc2lvbikvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTEwYzNhMGVhLTY1OWMtNDM5ZS04YWZjLTU1MjZlZTc3NWY5MyIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0zODczNzIwMy1hMDhlLTQwYzYtOGE2Ni0xOWUyMzI5ZGVmMjkiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQW5keStDKyZhbXA7K0Zpb3JhL18vSGVhcnRiZWF0K0xvdWQrKEV4dGVuZGVkK1ZlcnNpb24pLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTM4NzM3MjAzLWEwOGUtNDBjNi04YTY2LTE5ZTIzMjlkZWYyOSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQW5keStDKyZhbXA7K0Zpb3JhL18vSGVhcnRiZWF0K0xvdWQrKEV4dGVuZGVkK1ZlcnNpb24pIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQW5keStDKyZhbXA7K0Zpb3JhL18vSGVhcnRiZWF0K0xvdWQrKEV4dGVuZGVkK1ZlcnNpb24pP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQW5keStDKyZhbXA7K0Zpb3JhIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQW5keStDKyZhbXA7K0Zpb3JhP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQW5keStDKyZhbXA7K0Zpb3JhL18vSGVhcnRiZWF0K0xvdWQrKEV4dGVuZGVkK1ZlcnNpb24pP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoyMS4yMTIxMjEyMTIxMjEyMSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA3IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Nl9rVTJyUkt5NjQiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iNl9rVTJyUkt5NjQiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTZfa1UyclJLeTY0IgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iU3luYyBCaWciCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL0tydW5jaC9fL1N5bmMrQmlnIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iS3J1bmNoIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL0tydW5jaCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL1ZhcmlvdXMrQXJ0aXN0cy9JU1JBbGllbnMsK1ZvbC4rNystK09yaWdpbitFYXJ0aCIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvMGNiMzZkMDY3MTU1NDZhZGM2MjcxZGVmNGQwMTAzYmMuanBnIgogICAgICAgICAgICBhbHQ9IklTUkFsaWVucywgVm9sLiA3IC0gT3JpZ2luIEVhcnRoIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImQ5NmQ1NGVmZmFiNGU3OGZkMDkwYjBmODI3ZDNmM2VmIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZDk2ZDU0ZWZmYWI0ZTc4ZmQwOTBiMGY4MjdkM2YzZWYiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvS3J1bmNoL18vU3luYytCaWciCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJTeW5jIEJpZyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5TeW5jIEJpZzwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvS3J1bmNoIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iS3J1bmNoIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5LcnVuY2g8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtMzZiNjA4MGMtMTczNS00M2E0LTliMWYtYmU1MWE4NjYxZmRkIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9LcnVuY2gvXy9TeW5jK0JpZy8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtMzZiNjA4MGMtMTczNS00M2E0LTliMWYtYmU1MWE4NjYxZmRkIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTI4NzZjMTg0LTZkODEtNDdjNi04MWExLTI2ZmY4N2UwZjdjMiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9LcnVuY2gvXy9TeW5jK0JpZy8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS0yODc2YzE4NC02ZDgxLTQ3YzYtODFhMS0yNmZmODdlMGY3YzIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0tydW5jaC9fL1N5bmMrQmlnIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvS3J1bmNoL18vU3luYytCaWc/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9LcnVuY2giCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9LcnVuY2g/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsaWJyYXJ5JTJGdHJhY2tzIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9LcnVuY2gvXy9TeW5jK0JpZz9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MjEuMjEyMTIxMjEyMTIxMjElOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNyA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMTcKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0FsZWMrQXJhdWpvL01hZnJhIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgYWx0PSJNYWZyYSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJkZjkxOTA5NDYzZDBkZDE0NWUzY2RhOGQwZWNlYmEzZCIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJkZjkxOTA5NDYzZDBkZDE0NWUzY2RhOGQwZWNlYmEzZCIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL25pY29sYStzYWxhZGluby9fL01hZnJhIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTWFmcmEiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TWFmcmE8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL25pY29sYStzYWxhZGlubyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Im5pY29sYSBzYWxhZGlubyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+bmljb2xhIHNhbGFkaW5vPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWE3ODY2MjkwLTg4NGYtNDNkZS05ZWViLTFiY2ZkMjJiMWE1ZSIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvbmljb2xhK3NhbGFkaW5vL18vTWFmcmEvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWE3ODY2MjkwLTg4NGYtNDNkZS05ZWViLTFiY2ZkMjJiMWE1ZSIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0wODNhYmRlYS1kNmY0LTQxNmMtYTQyZS04MGJiNDE2NmIwMDgiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvbmljb2xhK3NhbGFkaW5vL18vTWFmcmEvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtMDgzYWJkZWEtZDZmNC00MTZjLWE0MmUtODBiYjQxNjZiMDA4IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9uaWNvbGErc2FsYWRpbm8vXy9NYWZyYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL25pY29sYStzYWxhZGluby9fL01hZnJhP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvbmljb2xhK3NhbGFkaW5vIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvbmljb2xhK3NhbGFkaW5vP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvbmljb2xhK3NhbGFkaW5vL18vTWFmcmE/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjIxLjIxMjEyMTIxMjEyMTIxJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDcgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE4CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzQxMjhhNmViMjlmOTQ5NDNjOWQyMDZjMDhlNjI1OTA0IgogICAgICAgICAgICBhbHQ9IlRvIHRoZSBtb29uIGFuZCBiYWNrIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjA5NzA2YTFmNWQyZjBlMjYyNWNlNTI2MmM5NWQ4MzM0IgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMDk3MDZhMWY1ZDJmMGUyNjI1Y2U1MjYyYzk1ZDgzMzQiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RvK3RoZSttb29uK2FuZCtiYWNrIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iVG8gdGhlIG1vb24gYW5kIGJhY2siCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+VG8gdGhlIG1vb24gYW5kIGJhY2s8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJCb3JpcyBCcmVqY2hhIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Cb3JpcyBCcmVqY2hhPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTRkZGViZDBiLWE3ZjAtNDRmNi1iNTFhLTdhMTY4YTk3Mzg3ZSIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RvK3RoZSttb29uK2FuZCtiYWNrLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy00ZGRlYmQwYi1hN2YwLTQ0ZjYtYjUxYS03YTE2OGE5NzM4N2UiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtNzE5ODQ0MzktMjUzMC00ZTQ4LTgwYTctY2NiNTI2NTRhMTdhIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9Ubyt0aGUrbW9vbithbmQrYmFjay8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS03MTk4NDQzOS0yNTMwLTRlNDgtODBhNy1jY2I1MjY1NGExN2EiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEvXy9Ubyt0aGUrbW9vbithbmQrYmFjayIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JvcmlzK0JyZWpjaGEvXy9Ubyt0aGUrbW9vbithbmQrYmFjaz9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JvcmlzK0JyZWpjaGEiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Cb3JpcytCcmVqY2hhP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yaXMrQnJlamNoYS9fL1RvK3RoZSttb29uK2FuZCtiYWNrP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxOC4xODE4MTgxODE4MTgxODMlOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNiA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMTkKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iVW5rbm93biBOdW1iZXIgKEp1bmdsZSBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNjQ2NzI3NGJjZDkyMWQ2YjY0ZTM1MjhkYWIyYTJjN2IiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI2NDY3Mjc0YmNkOTIxZDZiNjRlMzUyOGRhYjJhMmM3YiIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9CdXN5K1NpZ25hbC9fL1Vua25vd24rTnVtYmVyKyhKdW5nbGUrUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iVW5rbm93biBOdW1iZXIgKEp1bmdsZSBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+VW5rbm93biBOdW1iZXIgKEp1bmdsZSBSZW1peCk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0J1c3krU2lnbmFsIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQnVzeSBTaWduYWwiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkJ1c3kgU2lnbmFsPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWFhNWQwYjM3LTFhNDMtNGRiMy04YjYxLWFmNmZmMDQ3YWQ1YyIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQnVzeStTaWduYWwvXy9Vbmtub3duK051bWJlcisoSnVuZ2xlK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtYWE1ZDBiMzctMWE0My00ZGIzLThiNjEtYWY2ZmYwNDdhZDVjIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTNmNTFlMjI3LTU5YzktNDYyMC1hNzU1LWE4NDVmZmZiYWUzMiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9CdXN5K1NpZ25hbC9fL1Vua25vd24rTnVtYmVyKyhKdW5nbGUrUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTNmNTFlMjI3LTU5YzktNDYyMC1hNzU1LWE4NDVmZmZiYWUzMiIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQnVzeStTaWduYWwvXy9Vbmtub3duK051bWJlcisoSnVuZ2xlK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0J1c3krU2lnbmFsL18vVW5rbm93bitOdW1iZXIrKEp1bmdsZStSZW1peCk/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9CdXN5K1NpZ25hbCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0J1c3krU2lnbmFsP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQnVzeStTaWduYWwvXy9Vbmtub3duK051bWJlcisoSnVuZ2xlK1JlbWl4KT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTguMTgxODE4MTgxODE4MTgzJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDYgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1UeWZXYkJuRFY2byIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJUeWZXYkJuRFY2byIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VHlmV2JCbkRWNm8iCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJOZXZlciBTdG9wIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9EQytCcmVha3MvXy9OZXZlcitTdG9wIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iREMgQnJlYWtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL0RDK0JyZWFrcyIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0RDK0JyZWFrcy9EaWZmZXJlbnQrQnJlZWQiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzBiZmY1YmZkYTNjZWQwNWI1MTJhMTc5M2JhNmMwNzUzLmpwZyIKICAgICAgICAgICAgYWx0PSJEaWZmZXJlbnQgQnJlZWQiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYTE0NjQzYTU1ZjAxNWRjZjBjYzY5NzcwMjFhMDg2Y2IiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJhMTQ2NDNhNTVmMDE1ZGNmMGNjNjk3NzAyMWEwODZjYiIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EQytCcmVha3MvXy9OZXZlcitTdG9wIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTmV2ZXIgU3RvcCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5OZXZlciBTdG9wPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EQytCcmVha3MiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJEQyBCcmVha3MiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkRDIEJyZWFrczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy05MDYxNzNjNS1lNGEwLTQ4OTAtYWNiMS1lMTIzNmNmYTg2Y2IiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0RDK0JyZWFrcy9fL05ldmVyK1N0b3AvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTkwNjE3M2M1LWU0YTAtNDg5MC1hY2IxLWUxMjM2Y2ZhODZjYiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1iMGE1NWI2ZC0xZWM3LTRhMjQtYjI4Ni05Mjg4NGVlOGY2MzgiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvREMrQnJlYWtzL18vTmV2ZXIrU3RvcC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1iMGE1NWI2ZC0xZWM3LTRhMjQtYjI4Ni05Mjg4NGVlOGY2MzgiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RDK0JyZWFrcy9fL05ldmVyK1N0b3AiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9EQytCcmVha3MvXy9OZXZlcitTdG9wP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvREMrQnJlYWtzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvREMrQnJlYWtzP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvREMrQnJlYWtzL18vTmV2ZXIrU3RvcD9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTguMTgxODE4MTgxODE4MTgzJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDYgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIxCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1mN3VpUGpzM2NBQSIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJmN3VpUGpzM2NBQSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Zjd1aVBqczNjQUEiCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJNRFEiCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL0d1eStKL18vTURRIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iR3V5IEoiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvR3V5K0oiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5IG9uIHlvdXR1YmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheVRyYWNrT25QYWdlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InlvdXR1YmUiCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIFBsYXkgdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9HdXkrSi9NRFErJTJGK0RpYWdvbmFsIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9hZDgwNTlkNTAwMzgzNmI2ZDE0YmFiYjJmNWRlMTI4Yy5qcGciCiAgICAgICAgICAgIGFsdD0iTURRIC8gRGlhZ29uYWwiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYWMzZjgwYTYwMjhkN2MwZDhmZTIwOWE2MDJhM2FkNmYiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYWMzZjgwYTYwMjhkN2MwZDhmZTIwOWE2MDJhM2FkNmYiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9HdXkrSi9fL01EUSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Ik1EUSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5NRFE8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0d1eStKIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iR3V5IEoiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkd1eSBKPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTk2NTUyYTUwLWQwZjItNDJiZS04MWQ5LWZkYmNjYTc5ZjMyMiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvR3V5K0ovXy9NRFEvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTk2NTUyYTUwLWQwZjItNDJiZS04MWQ5LWZkYmNjYTc5ZjMyMiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS03ZGRkNTY1ZC0xMTFlLTQzZGItOGJkNy1iYWY2NDlmNGZhMmEiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvR3V5K0ovXy9NRFEvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtN2RkZDU2NWQtMTExZS00M2RiLThiZDctYmFmNjQ5ZjRmYTJhIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9HdXkrSi9fL01EUSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0d1eStKL18vTURRP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvR3V5K0oiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9HdXkrSj9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0d1eStKL18vTURRP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxOC4xODE4MTgxODE4MTgxODMlOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNiA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjIKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iQXV0dW1uIER1YiIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJjNDU1NDhkZjU1ODIzZGJjZmJiMmMyMTIzOWIwYjEzOSIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImM0NTU0OGRmNTU4MjNkYmNmYmIyYzIxMjM5YjBiMTM5IgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL01vb25jYXQvXy9BdXR1bW4rRHViIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQXV0dW1uIER1YiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5BdXR1bW4gRHViPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Nb29uY2F0IgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTW9vbmNhdCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TW9vbmNhdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy01ZDQ0MzExNS1lMGI0LTRhMWItYmU0Yi05ZmJhYmEyMjI5ZjEiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL01vb25jYXQvXy9BdXR1bW4rRHViLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy01ZDQ0MzExNS1lMGI0LTRhMWItYmU0Yi05ZmJhYmEyMjI5ZjEiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtYmQ2NjIwOTctMWJkZi00ZjlkLTliYTYtZWYwYzAwOGVlN2ZhIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL01vb25jYXQvXy9BdXR1bW4rRHViLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWJkNjYyMDk3LTFiZGYtNGY5ZC05YmE2LWVmMGMwMDhlZTdmYSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvTW9vbmNhdC9fL0F1dHVtbitEdWIiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Nb29uY2F0L18vQXV0dW1uK0R1Yj9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL01vb25jYXQiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Nb29uY2F0P2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvTW9vbmNhdC9fL0F1dHVtbitEdWI/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjE4LjE4MTgxODE4MTgxODE4MyU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA2IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMwogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJQbGF5Z3JvdW5kIChBdG1vcyBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNjFhMDBkZDkwYTZiYTU2YzZiMmQ3Y2ZjMjNjNWE5ZWYiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI2MWEwMGRkOTBhNmJhNTZjNmIyZDdjZmMyM2M1YTllZiIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9QaG9ueStPcnBoYW50cy9fL1BsYXlncm91bmQrKEF0bW9zK1JlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXlncm91bmQgKEF0bW9zIFJlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5QbGF5Z3JvdW5kIChBdG1vcyBSZW1peCk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1Bob255K09ycGhhbnRzIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGhvbnkgT3JwaGFudHMiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlBob255IE9ycGhhbnRzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTVkZWZlMDE0LWRmNDEtNDYzMy04ZDdjLTFkMWU0ZTZkZGZiMiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvUGhvbnkrT3JwaGFudHMvXy9QbGF5Z3JvdW5kKyhBdG1vcytSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTVkZWZlMDE0LWRmNDEtNDYzMy04ZDdjLTFkMWU0ZTZkZGZiMiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS02NWZhMTcyOC04N2Y2LTRiZTAtYmZiZC1jYjIzMDFhMjViYjAiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvUGhvbnkrT3JwaGFudHMvXy9QbGF5Z3JvdW5kKyhBdG1vcytSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNjVmYTE3MjgtODdmNi00YmUwLWJmYmQtY2IyMzAxYTI1YmIwIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9QaG9ueStPcnBoYW50cy9fL1BsYXlncm91bmQrKEF0bW9zK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1Bob255K09ycGhhbnRzL18vUGxheWdyb3VuZCsoQXRtb3MrUmVtaXgpP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvUGhvbnkrT3JwaGFudHMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9QaG9ueStPcnBoYW50cz9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1Bob255K09ycGhhbnRzL18vUGxheWdyb3VuZCsoQXRtb3MrUmVtaXgpP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxOC4xODE4MTgxODE4MTgxODMlOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNiA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjQKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUlJbTF2dDBoVk13IgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9IklJbTF2dDBoVk13IgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1JSW0xdnQwaFZNdyIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9Ik5lYXIgTWlzcyIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvU3lzdGVtL18vTmVhcitNaXNzIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iU3lzdGVtIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL1N5c3RlbSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL1N5c3RlbS9OZWFyK01pc3MrJTJGK0NhZ2UiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2ZjMDBmMTJmNDUzODQxNmU4MGFiMzIyNDdjMDQ5YjFjLmpwZyIKICAgICAgICAgICAgYWx0PSJOZWFyIE1pc3MgLyBDYWdlIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjgxZDM1ZDRiOGYxZTM2YjQ5MWRlZTFjYzZiZmIzYjk2IgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjgxZDM1ZDRiOGYxZTM2YjQ5MWRlZTFjYzZiZmIzYjk2IgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvU3lzdGVtL18vTmVhcitNaXNzIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTmVhciBNaXNzIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPk5lYXIgTWlzczwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvU3lzdGVtIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iU3lzdGVtIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5TeXN0ZW08L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtYzIyYTUxMWItNmM3Yy00NWU4LTkyMGYtMDEzNmQ2ODNkMDkwIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9TeXN0ZW0vXy9OZWFyK01pc3MvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWMyMmE1MTFiLTZjN2MtNDVlOC05MjBmLTAxMzZkNjgzZDA5MCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS02OTUzZDI0Yi0wMzY5LTRhNGYtYTQwNS1kYjhmMGZhMGIzZjEiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvU3lzdGVtL18vTmVhcitNaXNzLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTY5NTNkMjRiLTAzNjktNGE0Zi1hNDA1LWRiOGYwZmEwYjNmMSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvU3lzdGVtL18vTmVhcitNaXNzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvU3lzdGVtL18vTmVhcitNaXNzP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvU3lzdGVtIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvU3lzdGVtP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvU3lzdGVtL18vTmVhcitNaXNzP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxOC4xODE4MTgxODE4MTgxODMlOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNiA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjUKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL1RvZGFiYXJhL0Jhc2lzJTJGV2lzZG9tIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgYWx0PSJCYXNpcy9XaXNkb20iCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZjA1OThjYmU5ZWZkNWIyZWIxMDM1YWNiNDI1YTA2ZTciCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSJmMDU5OGNiZTllZmQ1YjJlYjEwMzVhY2I0MjVhMDZlNyIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Ub2RhYmFyYS9fL0Jhc2lzKyhIYXNpdGgrUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQmFzaXMgKEhhc2l0aCBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+QmFzaXMgKEhhc2l0aCBSZW1peCk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1RvZGFiYXJhIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iVG9kYWJhcmEiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlRvZGFiYXJhPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTk2NjUyNTY2LTMwZjMtNGY1Yi1iYzM1LTFkNzczMTQwNWEzZiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvVG9kYWJhcmEvXy9CYXNpcysoSGFzaXRoK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtOTY2NTI1NjYtMzBmMy00ZjViLWJjMzUtMWQ3NzMxNDA1YTNmIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTE5NGE5OWZmLWI4NmEtNDA2MS04OWU3LTE0YTFlYTdiNWUwMiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Ub2RhYmFyYS9fL0Jhc2lzKyhIYXNpdGgrUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTE5NGE5OWZmLWI4NmEtNDA2MS04OWU3LTE0YTFlYTdiNWUwMiIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvVG9kYWJhcmEvXy9CYXNpcysoSGFzaXRoK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1RvZGFiYXJhL18vQmFzaXMrKEhhc2l0aCtSZW1peCk/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Ub2RhYmFyYSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1RvZGFiYXJhP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvVG9kYWJhcmEvXy9CYXNpcysoSGFzaXRoK1JlbWl4KT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTguMTgxODE4MTgxODE4MTgzJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDYgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI2CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9OaGFyL0RlbHRhdm94Ky0rU2luZ2xlIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgYWx0PSJEZWx0YXZveCAtIFNpbmdsZSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI5NWEyNWY4Mjg2MDBlNGQ1OTAyN2Y5MmU2MDAxM2FlNSIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI5NWEyNWY4Mjg2MDBlNGQ1OTAyN2Y5MmU2MDAxM2FlNSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL05oYXIvXy9GYWRpbmcrRXllcyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkZhZGluZyBFeWVzIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkZhZGluZyBFeWVzPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9OaGFyIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iTmhhciIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TmhhcjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy0wYzExMmY4MC1hZmIyLTQ2ZmMtODEwNS1mYzk2MDdhOTRkYWYiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL05oYXIvXy9GYWRpbmcrRXllcy8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtMGMxMTJmODAtYWZiMi00NmZjLTgxMDUtZmM5NjA3YTk0ZGFmIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTExMDUwMzk4LTI1ZTQtNDQyOS1iYmY3LTRkYzg1NTEyYWEwZCIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9OaGFyL18vRmFkaW5nK0V5ZXMvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtMTEwNTAzOTgtMjVlNC00NDI5LWJiZjctNGRjODU1MTJhYTBkIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9OaGFyL18vRmFkaW5nK0V5ZXMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9OaGFyL18vRmFkaW5nK0V5ZXM/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9OaGFyIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvTmhhcj9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL05oYXIvXy9GYWRpbmcrRXllcz9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTUuMTUxNTE1MTUxNTE1MTUyJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDUgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI3CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzQxMjhhNmViMjlmOTQ5NDNjOWQyMDZjMDhlNjI1OTA0IgogICAgICAgICAgICBhbHQ9Ik1hZnJhIChBcm5vIERpcmlzaW8gUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjUyY2RjZGNkN2M1ZmUwNDJhNmU3ZWE2MTRhNTc0YTAwIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjUyY2RjZGNkN2M1ZmUwNDJhNmU3ZWE2MTRhNTc0YTAwIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvbmljb2xhK3NhbGFkaW5vL18vTWFmcmErKEFybm8rRGlyaXNpbytSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJNYWZyYSAoQXJubyBEaXJpc2lvIFJlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5NYWZyYSAoQXJubyBEaXJpc2lvIFJlbWl4KTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvbmljb2xhK3NhbGFkaW5vIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0ibmljb2xhIHNhbGFkaW5vIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5uaWNvbGEgc2FsYWRpbm88L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtYWE1NWU5MDEtNzFiMi00MTBkLWI3YTktYTA2YTdkZjY4OWU0IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9uaWNvbGErc2FsYWRpbm8vXy9NYWZyYSsoQXJubytEaXJpc2lvK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtYWE1NWU5MDEtNzFiMi00MTBkLWI3YTktYTA2YTdkZjY4OWU0IgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTM1NzRlMGMwLWRjMTItNGY3My04MzQ2LTEwNzk1MjEwZWU5NCIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9uaWNvbGErc2FsYWRpbm8vXy9NYWZyYSsoQXJubytEaXJpc2lvK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS0zNTc0ZTBjMC1kYzEyLTRmNzMtODM0Ni0xMDc5NTIxMGVlOTQiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL25pY29sYStzYWxhZGluby9fL01hZnJhKyhBcm5vK0RpcmlzaW8rUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvbmljb2xhK3NhbGFkaW5vL18vTWFmcmErKEFybm8rRGlyaXNpbytSZW1peCk/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9uaWNvbGErc2FsYWRpbm8iCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9uaWNvbGErc2FsYWRpbm8/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsaWJyYXJ5JTJGdHJhY2tzIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9uaWNvbGErc2FsYWRpbm8vXy9NYWZyYSsoQXJubytEaXJpc2lvK1JlbWl4KT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTUuMTUxNTE1MTUxNTE1MTUyJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDUgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI4CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DY1luU1ZuWFY3WSIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJDY1luU1ZuWFY3WSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Q2NZblNWblhWN1kiCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJUaGluZ3MgWW91IE5lZWQiCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL1Jvc3MrRC9fL1RoaW5ncytZb3UrTmVlZCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IlJvc3MgRCIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy9Sb3NzK0QiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5IG9uIHlvdXR1YmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheVRyYWNrT25QYWdlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InlvdXR1YmUiCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIFBsYXkgdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9Sb3NzK0QvVGhpbmdzK1lvdStOZWVkIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9jNmY1OWMxZTVlNzI0MGE0YzBkNDI3YWJkNzFmM2RiYiIKICAgICAgICAgICAgYWx0PSJUaGluZ3MgWW91IE5lZWQiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iY2JhYmU4MzcxZjMxMmE2MTNjNGY0OTIyOTU3MGQ5NjIiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iY2JhYmU4MzcxZjMxMmE2MTNjNGY0OTIyOTU3MGQ5NjIiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Sb3NzK0QvXy9UaGluZ3MrWW91K05lZWQiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJUaGluZ3MgWW91IE5lZWQiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+VGhpbmdzIFlvdSBOZWVkPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Sb3NzK0QiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJSb3NzIEQiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlJvc3MgRDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy0zNTJjNDVmOC1kZDNhLTQ3YTktODI4Yi00YjY2OWNlOWFmOGYiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1Jvc3MrRC9fL1RoaW5ncytZb3UrTmVlZC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtMzUyYzQ1ZjgtZGQzYS00N2E5LTgyOGItNGI2NjljZTlhZjhmIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLWJkMGQzZDNiLWU3OTQtNDkxOS1iNjZmLTQxZTM5YzQzOTgzZSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Sb3NzK0QvXy9UaGluZ3MrWW91K05lZWQvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtYmQwZDNkM2ItZTc5NC00OTE5LWI2NmYtNDFlMzljNDM5ODNlIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Sb3NzK0QvXy9UaGluZ3MrWW91K05lZWQiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Sb3NzK0QvXy9UaGluZ3MrWW91K05lZWQ/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Sb3NzK0QiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Sb3NzK0Q/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsaWJyYXJ5JTJGdHJhY2tzIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Sb3NzK0QvXy9UaGluZ3MrWW91K05lZWQ/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjE1LjE1MTUxNTE1MTUxNTE1MiU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA1IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyOQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LTJxV1ZuVDVKb2siCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iLTJxV1ZuVDVKb2siCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PS0ycVdWblQ1Sm9rIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iTGFuYXJrYSIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvUyVDMyVBOWJhc3RpZW4rTCVDMyVBOWdlci9fL0xhbmFya2EiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJTw6liYXN0aWVuIEzDqWdlciIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy9TJUMzJUE5YmFzdGllbitMJUMzJUE5Z2VyIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvUyVDMyVBOWJhc3RpZW4rTCVDMyVBOWdlci9MYW5hcmthKyUyRitTYWJsaWVyIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9mZjg5NTAxZGI4MWZmMDUyNGYyOGU2MTBlZGZhZGYwZC5qcGciCiAgICAgICAgICAgIGFsdD0iTGFuYXJrYSAvIFNhYmxpZXIiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMTZhYzE4YzJkYmU0ZWEyZmJkY2YwYjEwZjhjZTNiZjQiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSIxNmFjMThjMmRiZTRlYTJmYmRjZjBiMTBmOGNlM2JmNCIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9TJUMzJUE5YmFzdGllbitMJUMzJUE5Z2VyL18vTGFuYXJrYSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkxhbmFya2EiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TGFuYXJrYTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvUyVDMyVBOWJhc3RpZW4rTCVDMyVBOWdlciIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlPDqWJhc3RpZW4gTMOpZ2VyIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Tw6liYXN0aWVuIEzDqWdlcjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy00NDlhYzdiYy1hZWM5LTRkNjEtOWE5OS1hNDQxN2Y5ZjlmYWIiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1MlQzMlQTliYXN0aWVuK0wlQzMlQTlnZXIvXy9MYW5hcmthLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy00NDlhYzdiYy1hZWM5LTRkNjEtOWE5OS1hNDQxN2Y5ZjlmYWIiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtMjBmMDljNTUtMDE0Ny00MzFjLWIxYzAtZjYwZDVkODEzNTIzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL1MlQzMlQTliYXN0aWVuK0wlQzMlQTlnZXIvXy9MYW5hcmthLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTIwZjA5YzU1LTAxNDctNDMxYy1iMWMwLWY2MGQ1ZDgxMzUyMyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvUyVDMyVBOWJhc3RpZW4rTCVDMyVBOWdlci9fL0xhbmFya2EiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9TJUMzJUE5YmFzdGllbitMJUMzJUE5Z2VyL18vTGFuYXJrYT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1MlQzMlQTliYXN0aWVuK0wlQzMlQTlnZXIiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9TJUMzJUE5YmFzdGllbitMJUMzJUE5Z2VyP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvUyVDMyVBOWJhc3RpZW4rTCVDMyVBOWdlci9fL0xhbmFya2E/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjE1LjE1MTUxNTE1MTUxNTE1MiU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA1IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzMAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9MFVjM1pybWhETjQiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iMFVjM1pybWhETjQiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTBVYzNacm1oRE40IgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iV2hhdCBJIEdvdCIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvU3VibGltZS9fL1doYXQrSStHb3QiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJTdWJsaW1lIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL1N1YmxpbWUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5IG9uIHlvdXR1YmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheVRyYWNrT25QYWdlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InlvdXR1YmUiCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIFBsYXkgdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9TdWJsaW1lL1N1YmxpbWUiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzBlOWMxMmQ3ZjhhNzMxOWVjMTAzYjczYTg3Zjg4OWQ3LmpwZyIKICAgICAgICAgICAgYWx0PSJTdWJsaW1lIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImU1ZjdkMjRlYWI0OTIwZTE2NTE2YjQ5ODczMGYyN2IxIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZTVmN2QyNGVhYjQ5MjBlMTY1MTZiNDk4NzMwZjI3YjEiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvU3VibGltZS9fL1doYXQrSStHb3QiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJXaGF0IEkgR290IgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPldoYXQgSSBHb3Q8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL1N1YmxpbWUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJTdWJsaW1lIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5TdWJsaW1lPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTEyZjY2ZTU5LWY5MmUtNDQyYy05NjFlLTM0OTgyMTg5YmNhYiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvU3VibGltZS9fL1doYXQrSStHb3QvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTEyZjY2ZTU5LWY5MmUtNDQyYy05NjFlLTM0OTgyMTg5YmNhYiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1iYjE2OWZmZi05OWU4LTQ2MWMtYjk2ZS0yZDE2MjVjOTlkMDYiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvU3VibGltZS9fL1doYXQrSStHb3QvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtYmIxNjlmZmYtOTllOC00NjFjLWI5NmUtMmQxNjI1Yzk5ZDA2IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9TdWJsaW1lL18vV2hhdCtJK0dvdCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1N1YmxpbWUvXy9XaGF0K0krR290P2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvU3VibGltZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL1N1YmxpbWU/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsaWJyYXJ5JTJGdHJhY2tzIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9TdWJsaW1lL18vV2hhdCtJK0dvdD9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTUuMTUxNTE1MTUxNTE1MTUyJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDUgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMxCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9BbmFsb2crSnVuZ3MvUGhvZW5peCIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDA3OGU2MGMzMmYwNmUzMTI1Mjc0YjRkZGRmYWY0OTIuanBnIgogICAgICAgICAgICBhbHQ9IlBob2VuaXgiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMDM5MGQzNjRmMTg4MjNhNDJiN2MxMjc3ZGIxN2IwMTAiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSIwMzkwZDM2NGYxODgyM2E0MmI3YzEyNzdkYjE3YjAxMCIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9BbmFsb2crSnVuZ3MvXy9NaXJmYWsrKEV3YW4rUmlsbCtSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJNaXJmYWsgKEV3YW4gUmlsbCBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TWlyZmFrIChFd2FuIFJpbGwgUmVtaXgpPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9BbmFsb2crSnVuZ3MiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJBbmFsb2cgSnVuZ3MiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkFuYWxvZyBKdW5nczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy0yYTZjMTI5YS0xOGVhLTQ2YjMtYWYyNy0wMGQ5MzU1YmQ4MzMiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0FuYWxvZytKdW5ncy9fL01pcmZhaysoRXdhbitSaWxsK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtMmE2YzEyOWEtMThlYS00NmIzLWFmMjctMDBkOTM1NWJkODMzIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLWEzMWM0ZTQwLWViZjktNDRjNS04YWEwLTJmYzk2Mjc1N2VlYyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9BbmFsb2crSnVuZ3MvXy9NaXJmYWsrKEV3YW4rUmlsbCtSZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtYTMxYzRlNDAtZWJmOS00NGM1LThhYTAtMmZjOTYyNzU3ZWVjIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9BbmFsb2crSnVuZ3MvXy9NaXJmYWsrKEV3YW4rUmlsbCtSZW1peCkiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9BbmFsb2crSnVuZ3MvXy9NaXJmYWsrKEV3YW4rUmlsbCtSZW1peCk/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9BbmFsb2crSnVuZ3MiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9BbmFsb2crSnVuZ3M/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsaWJyYXJ5JTJGdHJhY2tzIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9BbmFsb2crSnVuZ3MvXy9NaXJmYWsrKEV3YW4rUmlsbCtSZW1peCk/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEyLjEyMTIxMjEyMTIxMjEyMSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA0IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzMgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJTbGlwIEF3YXkiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYzliZDBjYjU1YTJhY2RkMmU5YjdhMGJiZDg4OTMzYjQiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYzliZDBjYjU1YTJhY2RkMmU5YjdhMGJiZDg4OTMzYjQiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9CYW1ib29rKyZhbXA7K01lbm5pZS9fL1NsaXArQXdheSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlNsaXAgQXdheSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5TbGlwIEF3YXk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JhbWJvb2srJmFtcDsrTWVubmllIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQmFtYm9vayAmYW1wOyBNZW5uaWUiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkJhbWJvb2sgJmFtcDsgTWVubmllPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTBkNmU3NzBkLTY3OWEtNGE2MS05NWRmLTQ0MmIxYjFmN2RiNCIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQmFtYm9vaysmYW1wOytNZW5uaWUvXy9TbGlwK0F3YXkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTBkNmU3NzBkLTY3OWEtNGE2MS05NWRmLTQ0MmIxYjFmN2RiNCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1jNDU5N2ZiOC01NWYxLTRmOWItYjI0OC1mOTM4MDhmM2I4ZjkiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQmFtYm9vaysmYW1wOytNZW5uaWUvXy9TbGlwK0F3YXkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtYzQ1OTdmYjgtNTVmMS00ZjliLWIyNDgtZjkzODA4ZjNiOGY5IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9CYW1ib29rKyZhbXA7K01lbm5pZS9fL1NsaXArQXdheSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JhbWJvb2srJmFtcDsrTWVubmllL18vU2xpcCtBd2F5P2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQmFtYm9vaysmYW1wOytNZW5uaWUiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9CYW1ib29rKyZhbXA7K01lbm5pZT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JhbWJvb2srJmFtcDsrTWVubmllL18vU2xpcCtBd2F5P2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxMi4xMjEyMTIxMjEyMTIxMjElOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNCA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMzMKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUVFYldpdjZTTXQ0IgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9IkVFYldpdjZTTXQ0IgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1FRWJXaXY2U010NCIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9IkRhd24gb2YgYSBEYXJrIERheSAoUmVjZXB0b3IgUmVtaXgpIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9CbGFjaytTdW4rRW1waXJlL18vRGF3bitvZithK0RhcmsrRGF5KyhSZWNlcHRvcitSZW1peCkiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJCbGFjayBTdW4gRW1waXJlIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL0JsYWNrK1N1bitFbXBpcmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5IG9uIHlvdXR1YmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheVRyYWNrT25QYWdlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InlvdXR1YmUiCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIFBsYXkgdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9CbGFjaytTdW4rRW1waXJlL1ZhcmlhdGlvbnMrb24rQmxhY2siIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzIxZDI2YmVmZTExNzRjZGZiYmRhNmY2YjBkODgwNjIxLmpwZyIKICAgICAgICAgICAgYWx0PSJWYXJpYXRpb25zIG9uIEJsYWNrIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImE2OGZiZjkzZTFkNzgyYjgyYjA0MDQ1MjY1MTJiYTYyIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImE2OGZiZjkzZTFkNzgyYjgyYjA0MDQ1MjY1MTJiYTYyIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQmxhY2srU3VuK0VtcGlyZS9fL0Rhd24rb2YrYStEYXJrK0RheSsoUmVjZXB0b3IrUmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iRGF3biBvZiBhIERhcmsgRGF5IChSZWNlcHRvciBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+RGF3biBvZiBhIERhcmsgRGF5IChSZWNlcHRvciBSZW1peCk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JsYWNrK1N1bitFbXBpcmUiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJCbGFjayBTdW4gRW1waXJlIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5CbGFjayBTdW4gRW1waXJlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWExZmIyOGIxLTI4MmEtNDAzZi1hOGM4LWRlMmIyZDRhMGYxOSIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQmxhY2srU3VuK0VtcGlyZS9fL0Rhd24rb2YrYStEYXJrK0RheSsoUmVjZXB0b3IrUmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1hMWZiMjhiMS0yODJhLTQwM2YtYThjOC1kZTJiMmQ0YTBmMTkiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtZGE1N2UwNWQtNDk2ZS00MDMyLWIzOTYtMTBhMjY3NWUxN2M0IgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0JsYWNrK1N1bitFbXBpcmUvXy9EYXduK29mK2ErRGFyaytEYXkrKFJlY2VwdG9yK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1kYTU3ZTA1ZC00OTZlLTQwMzItYjM5Ni0xMGEyNjc1ZTE3YzQiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JsYWNrK1N1bitFbXBpcmUvXy9EYXduK29mK2ErRGFyaytEYXkrKFJlY2VwdG9yK1JlbWl4KSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JsYWNrK1N1bitFbXBpcmUvXy9EYXduK29mK2ErRGFyaytEYXkrKFJlY2VwdG9yK1JlbWl4KT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0JsYWNrK1N1bitFbXBpcmUiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9CbGFjaytTdW4rRW1waXJlP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQmxhY2srU3VuK0VtcGlyZS9fL0Rhd24rb2YrYStEYXJrK0RheSsoUmVjZXB0b3IrUmVtaXgpP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxMi4xMjEyMTIxMjEyMTIxMjElOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNCA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMzQKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iVGhlIFdhdGNoIChmZWF0LiBDb3BwYSkiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZTU2NTU1NmIxZDZkM2VkOTkzZGQxNGFhZDRiNjJlMTMiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iZTU2NTU1NmIxZDZkM2VkOTkzZGQxNGFhZDRiNjJlMTMiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Cb3JkZXJsaW5lL18vVGhlK1dhdGNoKyhmZWF0LitDb3BwYSkiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJUaGUgV2F0Y2ggKGZlYXQuIENvcHBhKSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5UaGUgV2F0Y2ggKGZlYXQuIENvcHBhKTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yZGVybGluZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkJvcmRlcmxpbmUiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkJvcmRlcmxpbmU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtMDI2YmY0YWUtMGM0OC00M2Y2LWFjZGEtMzFhYzMzNGY3MzRmIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Cb3JkZXJsaW5lL18vVGhlK1dhdGNoKyhmZWF0LitDb3BwYSkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTAyNmJmNGFlLTBjNDgtNDNmNi1hY2RhLTMxYWMzMzRmNzM0ZiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1kZjEyMTllNi1jZmY1LTRkMDAtYjRiMy1mNGRkNTdmN2UxY2MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQm9yZGVybGluZS9fL1RoZStXYXRjaCsoZmVhdC4rQ29wcGEpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWRmMTIxOWU2LWNmZjUtNGQwMC1iNGIzLWY0ZGQ1N2Y3ZTFjYyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yZGVybGluZS9fL1RoZStXYXRjaCsoZmVhdC4rQ29wcGEpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQm9yZGVybGluZS9fL1RoZStXYXRjaCsoZmVhdC4rQ29wcGEpP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQm9yZGVybGluZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0JvcmRlcmxpbmU/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsaWJyYXJ5JTJGdHJhY2tzIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Cb3JkZXJsaW5lL18vVGhlK1dhdGNoKyhmZWF0LitDb3BwYSk/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEyLjEyMTIxMjEyMTIxMjEyMSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA0IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzNQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9SDd4MENaeVVVWlUiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iSDd4MENaeVVVWlUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUg3eDBDWnlVVVpVIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iVGVhciBZb3UgRG93biIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvQnJvb2tlcytCcm90aGVycy9fL1RlYXIrWW91K0Rvd24iCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJCcm9va2VzIEJyb3RoZXJzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL0Jyb29rZXMrQnJvdGhlcnMiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5IG9uIHlvdXR1YmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheVRyYWNrT25QYWdlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InlvdXR1YmUiCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIFBsYXkgdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9Ccm9va2VzK0Jyb3RoZXJzL0Jyb29rZXMrQnJvdGhlcnMiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzllNjcxYzI2OWJiNGE1MjNlZGQ2NjJjNjExODJkOWVjLmpwZyIKICAgICAgICAgICAgYWx0PSJCcm9va2VzIEJyb3RoZXJzIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9Ijg4OTIxZDk3NmUzODcyYTM4NGNmNTAyMjNmMTQwOWJjIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iODg5MjFkOTc2ZTM4NzJhMzg0Y2Y1MDIyM2YxNDA5YmMiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQnJvb2tlcytCcm90aGVycy9fL1RlYXIrWW91K0Rvd24iCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJUZWFyIFlvdSBEb3duIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlRlYXIgWW91IERvd248L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0Jyb29rZXMrQnJvdGhlcnMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJCcm9va2VzIEJyb3RoZXJzIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Ccm9va2VzIEJyb3RoZXJzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWNlNzkyZDI5LTg0MzYtNDMyMS05MDkwLTk1Yzc1ODQ0NWRmZiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQnJvb2tlcytCcm90aGVycy9fL1RlYXIrWW91K0Rvd24vK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLWNlNzkyZDI5LTg0MzYtNDMyMS05MDkwLTk1Yzc1ODQ0NWRmZiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS00ZmI4NDQ4OC01NjM0LTQwZTYtOTVmYS1hYTc5OGI4MDg3MDUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQnJvb2tlcytCcm90aGVycy9fL1RlYXIrWW91K0Rvd24vK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNGZiODQ0ODgtNTYzNC00MGU2LTk1ZmEtYWE3OThiODA4NzA1IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Ccm9va2VzK0Jyb3RoZXJzL18vVGVhcitZb3UrRG93biIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0Jyb29rZXMrQnJvdGhlcnMvXy9UZWFyK1lvdStEb3duP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQnJvb2tlcytCcm90aGVycyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0Jyb29rZXMrQnJvdGhlcnM/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsaWJyYXJ5JTJGdHJhY2tzIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9Ccm9va2VzK0Jyb3RoZXJzL18vVGVhcitZb3UrRG93bj9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTIuMTIxMjEyMTIxMjEyMTIxJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDQgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM2CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzQxMjhhNmViMjlmOTQ5NDNjOWQyMDZjMDhlNjI1OTA0IgogICAgICAgICAgICBhbHQ9IllvdSYjMzk7dmUgQmVlbiBMaWdodCB0byBNZSAoTWFyemVuaXQmIzM5O3MgQmFjayB0byBEaXNjbyBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNTQ4ZTI3OThiZjkzNjU1YjNlNTZkNTY3MzE2NDU1YmYiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI1NDhlMjc5OGJmOTM2NTViM2U1NmQ1NjczMTY0NTViZiIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9iUlVOQS9fL1lvdSUyN3ZlK0JlZW4rTGlnaHQrdG8rTWUrKE1hcnplbml0JTI3cytCYWNrK3RvK0Rpc2NvK1JlbWl4KSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IllvdSYjMzk7dmUgQmVlbiBMaWdodCB0byBNZSAoTWFyemVuaXQmIzM5O3MgQmFjayB0byBEaXNjbyBSZW1peCkiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+WW91JiMzOTt2ZSBCZWVuIExpZ2h0IHRvIE1lIChNYXJ6ZW5pdCYjMzk7cyBCYWNrIHRvIERpc2NvIFJlbWl4KTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvYlJVTkEiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJiUlVOQSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+YlJVTkE8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtOWMzZTk5NjUtMmY4OC00MmYwLTg3N2YtNmI3MmNhMzhkMTFmIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9iUlVOQS9fL1lvdSUyN3ZlK0JlZW4rTGlnaHQrdG8rTWUrKE1hcnplbml0JTI3cytCYWNrK3RvK0Rpc2NvK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtOWMzZTk5NjUtMmY4OC00MmYwLTg3N2YtNmI3MmNhMzhkMTFmIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLWFiZDc1MjM4LTM0NTctNDllYS05ZTAzLTgyZGZhYWYxMGEwNSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9iUlVOQS9fL1lvdSUyN3ZlK0JlZW4rTGlnaHQrdG8rTWUrKE1hcnplbml0JTI3cytCYWNrK3RvK0Rpc2NvK1JlbWl4KS8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1hYmQ3NTIzOC0zNDU3LTQ5ZWEtOWUwMy04MmRmYWFmMTBhMDUiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL2JSVU5BL18vWW91JTI3dmUrQmVlbitMaWdodCt0bytNZSsoTWFyemVuaXQlMjdzK0JhY2srdG8rRGlzY28rUmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvYlJVTkEvXy9Zb3UlMjd2ZStCZWVuK0xpZ2h0K3RvK01lKyhNYXJ6ZW5pdCUyN3MrQmFjayt0bytEaXNjbytSZW1peCk/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9iUlVOQSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL2JSVU5BP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvYlJVTkEvXy9Zb3UlMjd2ZStCZWVuK0xpZ2h0K3RvK01lKyhNYXJ6ZW5pdCUyN3MrQmFjayt0bytEaXNjbytSZW1peCk/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEyLjEyMTIxMjEyMTIxMjEyMSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA0IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzNwogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9QW8zd204aEsxNVEiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iQW8zd204aEsxNVEiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUFvM3dtOGhLMTVRIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iMTIgR2F1Z2UiCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljLytub3JlZGlyZWN0L0J1bGxldHByb29mKyZhbXA7K0NvbmNvcmQrRGF3bi9fLzEyK0dhdWdlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iQnVsbGV0cHJvb2YgJmFtcDsgQ29uY29yZCBEYXduIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljLytub3JlZGlyZWN0L0J1bGxldHByb29mKyZhbXA7K0NvbmNvcmQrRGF3biIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iMTIgR2F1Z2UiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iODdjMjRhNzNlMmZkYjY3NjFiNTdkYjUyODhjYjBmN2IiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iODdjMjRhNzNlMmZkYjY3NjFiNTdkYjUyODhjYjBmN2IiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy8rbm9yZWRpcmVjdC9CdWxsZXRwcm9vZismYW1wOytDb25jb3JkK0Rhd24vXy8xMitHYXVnZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IjEyIEdhdWdlIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPjEyIEdhdWdlPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy8rbm9yZWRpcmVjdC9CdWxsZXRwcm9vZismYW1wOytDb25jb3JkK0Rhd24iCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJCdWxsZXRwcm9vZiAmYW1wOyBDb25jb3JkIERhd24iCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkJ1bGxldHByb29mICZhbXA7IENvbmNvcmQgRGF3bjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy1lZGJiMDIyZC1hMDY4LTQ4ZjktYTM2Mi04ZjIzYjE1NDJlMWYiCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljLytub3JlZGlyZWN0L0J1bGxldHByb29mKyZhbXA7K0NvbmNvcmQrRGF3bi9fLzEyK0dhdWdlLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1lZGJiMDIyZC1hMDY4LTQ4ZjktYTM2Mi04ZjIzYjE1NDJlMWYiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtZTE1YmE1NmMtNWZkZS00NmNhLWIzNGEtMzliZDZmOTRmZjc0IgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljLytub3JlZGlyZWN0L0J1bGxldHByb29mKyZhbXA7K0NvbmNvcmQrRGF3bi9fLzEyK0dhdWdlLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWUxNWJhNTZjLTVmZGUtNDZjYS1iMzRhLTM5YmQ2Zjk0ZmY3NCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvK25vcmVkaXJlY3QvQnVsbGV0cHJvb2YrJmFtcDsrQ29uY29yZCtEYXduL18vMTIrR2F1Z2UiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy8rbm9yZWRpcmVjdC9CdWxsZXRwcm9vZismYW1wOytDb25jb3JkK0Rhd24vXy8xMitHYXVnZT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljLytub3JlZGlyZWN0L0J1bGxldHByb29mKyZhbXA7K0NvbmNvcmQrRGF3biIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljLytub3JlZGlyZWN0L0J1bGxldHByb29mKyZhbXA7K0NvbmNvcmQrRGF3bj9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljLytub3JlZGlyZWN0L0J1bGxldHByb29mKyZhbXA7K0NvbmNvcmQrRGF3bi9fLzEyK0dhdWdlP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxMi4xMjEyMTIxMjEyMTIxMjElOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNCA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMzgKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQiCiAgICAgICAgICAgIGFsdD0iVGhlIFRvdWNoIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjNlYjVjYjU1ZjNiZGZjOTYwYTk1M2IxYThlMDIwNjViIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjNlYjVjYjU1ZjNiZGZjOTYwYTk1M2IxYThlMDIwNjViIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ2FtbysmYW1wOytLcm9va2VkL18vVGhlK1RvdWNoIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iVGhlIFRvdWNoIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlRoZSBUb3VjaDwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ2FtbysmYW1wOytLcm9va2VkIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQ2FtbyAmYW1wOyBLcm9va2VkIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5DYW1vICZhbXA7IEtyb29rZWQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtMTdjMzY2ZjQtNjEyNS00MmQ2LTlkODQtNDA2NjQzNmU2Y2JkIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9DYW1vKyZhbXA7K0tyb29rZWQvXy9UaGUrVG91Y2gvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTE3YzM2NmY0LTYxMjUtNDJkNi05ZDg0LTQwNjY0MzZlNmNiZCIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1lOWQ4ZGQ0NS1hZGRkLTQ2ZGEtODQ0Mi04YjY5MzA0NmRkNjEiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQ2FtbysmYW1wOytLcm9va2VkL18vVGhlK1RvdWNoLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLWU5ZDhkZDQ1LWFkZGQtNDZkYS04NDQyLThiNjkzMDQ2ZGQ2MSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ2FtbysmYW1wOytLcm9va2VkL18vVGhlK1RvdWNoIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ2FtbysmYW1wOytLcm9va2VkL18vVGhlK1RvdWNoP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ2FtbysmYW1wOytLcm9va2VkIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ2FtbysmYW1wOytLcm9va2VkP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ2FtbysmYW1wOytLcm9va2VkL18vVGhlK1RvdWNoP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxMi4xMjEyMTIxMjEyMTIxMjElOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNCA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMzkKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTlWeEpJdGpUR3lVIgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9IjlWeEpJdGpUR3lVIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj05VnhKSXRqVEd5VSIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9Ikh1cnQgWW91IgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9DaGFzZSsmYW1wOytTdGF0dXMvXy9IdXJ0K1lvdSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IkNoYXNlICZhbXA7IFN0YXR1cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy9DaGFzZSsmYW1wOytTdGF0dXMiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5IG9uIHlvdXR1YmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheVRyYWNrT25QYWdlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InlvdXR1YmUiCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIFBsYXkgdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9DaGFzZSsmYW1wOytTdGF0dXMvTW9yZStUaGFuK0Fsb3QiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzL2M1Yjk0ZGEwZGFlYjQ3NWM4MDM1NjY4NTJhYTZjZThlLmpwZyIKICAgICAgICAgICAgYWx0PSJNb3JlIFRoYW4gQWxvdCIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI0NDk1NmQ4MmNhMTU1NjdlMWYwY2MzNDczZjY4ZDY0ZiIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjQ0OTU2ZDgyY2ExNTU2N2UxZjBjYzM0NzNmNjhkNjRmIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0ibG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0NoYXNlKyZhbXA7K1N0YXR1cy9fL0h1cnQrWW91IgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iSHVydCBZb3UiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+SHVydCBZb3U8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0NoYXNlKyZhbXA7K1N0YXR1cyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkNoYXNlICZhbXA7IFN0YXR1cyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Q2hhc2UgJmFtcDsgU3RhdHVzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTRhMDJhZjcyLTBlYTEtNDBjYS1iYjBjLTg1YjkzZDM5NzAwNyIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQ2hhc2UrJmFtcDsrU3RhdHVzL18vSHVydCtZb3UvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTRhMDJhZjcyLTBlYTEtNDBjYS1iYjBjLTg1YjkzZDM5NzAwNyIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS02NmRlZTkwOC1jZDQwLTQwZTktYWM0Ny0zOWIxMDEzYTVmZTkiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQ2hhc2UrJmFtcDsrU3RhdHVzL18vSHVydCtZb3UvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtNjZkZWU5MDgtY2Q0MC00MGU5LWFjNDctMzliMTAxM2E1ZmU5IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9DaGFzZSsmYW1wOytTdGF0dXMvXy9IdXJ0K1lvdSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0NoYXNlKyZhbXA7K1N0YXR1cy9fL0h1cnQrWW91P2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ2hhc2UrJmFtcDsrU3RhdHVzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ2hhc2UrJmFtcDsrU3RhdHVzP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ2hhc2UrJmFtcDsrU3RhdHVzL18vSHVydCtZb3U/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEyLjEyMTIxMjEyMTIxMjEyMSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA0IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0MAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80MTI4YTZlYjI5Zjk0OTQzYzlkMjA2YzA4ZTYyNTkwNCIKICAgICAgICAgICAgYWx0PSJUb21vcnJvdyYjMzk7cyBBbm90aGVyIERheSAoTGlvbkR1YiByZW1peCkiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iNzcyMDNjMjRiOTFmN2ZhY2ViYzhlMjk5MzQ4YzczODYiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI3NzIwM2MyNGI5MWY3ZmFjZWJjOGUyOTkzNDhjNzM4NiIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9ImxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Db2xsaWUrQnVkZHovXy9Ub21vcnJvdyUyN3MrQW5vdGhlcitEYXkrKExpb25EdWIrcmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iVG9tb3Jyb3cmIzM5O3MgQW5vdGhlciBEYXkgKExpb25EdWIgcmVtaXgpIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlRvbW9ycm93JiMzOTtzIEFub3RoZXIgRGF5IChMaW9uRHViIHJlbWl4KTwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ29sbGllK0J1ZGR6IgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQ29sbGllIEJ1ZGR6IgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Db2xsaWUgQnVkZHo8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtYTJhZGQ3ZjUtM2U3ZS00MTI0LTk0ZmItYjVmY2VmNjliZjMwIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Db2xsaWUrQnVkZHovXy9Ub21vcnJvdyUyN3MrQW5vdGhlcitEYXkrKExpb25EdWIrcmVtaXgpLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy1hMmFkZDdmNS0zZTdlLTQxMjQtOTRmYi1iNWZjZWY2OWJmMzAiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtODc2N2U5NGYtNmIzNC00M2FiLTk3MzktNzIwMjlmOGU1NjEyIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0NvbGxpZStCdWRkei9fL1RvbW9ycm93JTI3cytBbm90aGVyK0RheSsoTGlvbkR1YityZW1peCkvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtODc2N2U5NGYtNmIzNC00M2FiLTk3MzktNzIwMjlmOGU1NjEyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Db2xsaWUrQnVkZHovXy9Ub21vcnJvdyUyN3MrQW5vdGhlcitEYXkrKExpb25EdWIrcmVtaXgpIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ29sbGllK0J1ZGR6L18vVG9tb3Jyb3clMjdzK0Fub3RoZXIrRGF5KyhMaW9uRHViK3JlbWl4KT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0NvbGxpZStCdWRkeiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0NvbGxpZStCdWRkej9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0NvbGxpZStCdWRkei9fL1RvbW9ycm93JTI3cytBbm90aGVyK0RheSsoTGlvbkR1YityZW1peCk/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEyLjEyMTIxMjEyMTIxMjEyMSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA0IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0MQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZzRmbEFaRWd0anMiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iZzRmbEFaRWd0anMiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWc0ZmxBWkVndGpzIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iSGF2ZSBZb3UgRXZlciBTZWVuIHRoZSBSYWluIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9DcmVlZGVuY2UrQ2xlYXJ3YXRlcitSZXZpdmFsL18vSGF2ZStZb3UrRXZlcitTZWVuK3RoZStSYWluIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iQ3JlZWRlbmNlIENsZWFyd2F0ZXIgUmV2aXZhbCIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy9DcmVlZGVuY2UrQ2xlYXJ3YXRlcitSZXZpdmFsIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvQ3JlZWRlbmNlK0NsZWFyd2F0ZXIrUmV2aXZhbC9QbGF0aW51bSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvMzE3ZTYyZTE0NjA2NDY2ZmI5NDg0YWM4ODljODYyNmQuanBnIgogICAgICAgICAgICBhbHQ9IlBsYXRpbnVtIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjJjNzUzZWZkNDk4ZTVmMzVkNDM5MjM2ZjE1MmRiZmExIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iMmM3NTNlZmQ0OThlNWYzNWQ0MzkyMzZmMTUyZGJmYTEiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJsb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ3JlZWRlbmNlK0NsZWFyd2F0ZXIrUmV2aXZhbC9fL0hhdmUrWW91K0V2ZXIrU2Vlbit0aGUrUmFpbiIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkhhdmUgWW91IEV2ZXIgU2VlbiB0aGUgUmFpbiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5IYXZlIFlvdSBFdmVyIFNlZW4gdGhlIFJhaW48L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0NyZWVkZW5jZStDbGVhcndhdGVyK1Jldml2YWwiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJDcmVlZGVuY2UgQ2xlYXJ3YXRlciBSZXZpdmFsIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5DcmVlZGVuY2UgQ2xlYXJ3YXRlciBSZXZpdmFsPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLWJmNTRjNDAwLTg5NzItNDEzMC1hNDU2LTJlMzdlNTY0NmUzNSIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvQ3JlZWRlbmNlK0NsZWFyd2F0ZXIrUmV2aXZhbC9fL0hhdmUrWW91K0V2ZXIrU2Vlbit0aGUrUmFpbi8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtYmY1NGM0MDAtODk3Mi00MTMwLWE0NTYtMmUzN2U1NjQ2ZTM1IgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTNhNTBkY2EzLWJmMmYtNGVkNS1iMDFlLTA2MjNlMjM0NTA1MiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9DcmVlZGVuY2UrQ2xlYXJ3YXRlcitSZXZpdmFsL18vSGF2ZStZb3UrRXZlcitTZWVuK3RoZStSYWluLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgICAgICA+TW9yZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICAgICAgaWQ9ImNoYXJ0bGlzdC1tb3JlLTNhNTBkY2EzLWJmMmYtNGVkNS1iMDFlLTA2MjNlMjM0NTA1MiIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZS0tanMtb25seQogICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1tZW51CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ3JlZWRlbmNlK0NsZWFyd2F0ZXIrUmV2aXZhbC9fL0hhdmUrWW91K0V2ZXIrU2Vlbit0aGUrUmFpbiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0NyZWVkZW5jZStDbGVhcndhdGVyK1Jldml2YWwvXy9IYXZlK1lvdStFdmVyK1NlZW4rdGhlK1JhaW4/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9DcmVlZGVuY2UrQ2xlYXJ3YXRlcitSZXZpdmFsIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ3JlZWRlbmNlK0NsZWFyd2F0ZXIrUmV2aXZhbD9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0NyZWVkZW5jZStDbGVhcndhdGVyK1Jldml2YWwvXy9IYXZlK1lvdStFdmVyK1NlZW4rdGhlK1JhaW4/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEyLjEyMTIxMjEyMTIxMjEyMSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA0IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0MgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9aTZQZ0JLeldOSUkiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iaTZQZ0JLeldOSUkiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWk2UGdCS3pXTklJIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iR2hldHRvIEJsYXN0ZXIiCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL0N5YW50aWZpYy9fL0doZXR0bytCbGFzdGVyIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iQ3lhbnRpZmljIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL0N5YW50aWZpYyIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0N5YW50aWZpYy9HaGV0dG8rQmxhc3RlciIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYTE3NTNjZWU1MzA1NDZiY2FkN2U3MWVkM2Q0MWIyOWUuanBnIgogICAgICAgICAgICBhbHQ9IkdoZXR0byBCbGFzdGVyIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjMyMTBiNzg2NTczZDUzOGY5NzFhNzMyZjhjY2Q1OTU3IgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjMyMTBiNzg2NTczZDUzOGY5NzFhNzMyZjhjY2Q1OTU3IgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ3lhbnRpZmljL18vR2hldHRvK0JsYXN0ZXIiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJHaGV0dG8gQmxhc3RlciIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5HaGV0dG8gQmxhc3RlcjwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ3lhbnRpZmljIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iQ3lhbnRpZmljIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5DeWFudGlmaWM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtOWMwNmI1OWUtNGEzYy00NjVmLTg4NjUtYTVjODZjMjM5YWE4IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9DeWFudGlmaWMvXy9HaGV0dG8rQmxhc3Rlci8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtOWMwNmI1OWUtNGEzYy00NjVmLTg4NjUtYTVjODZjMjM5YWE4IgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTMyZjA1NjE0LTYzNDMtNGE5OC1hYWNjLWNiOTcyZGVmZTcwZSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9DeWFudGlmaWMvXy9HaGV0dG8rQmxhc3Rlci8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS0zMmYwNTYxNC02MzQzLTRhOTgtYWFjYy1jYjk3MmRlZmU3MGUiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0N5YW50aWZpYy9fL0doZXR0bytCbGFzdGVyIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ3lhbnRpZmljL18vR2hldHRvK0JsYXN0ZXI/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9DeWFudGlmaWMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9DeWFudGlmaWM/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsaWJyYXJ5JTJGdHJhY2tzIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9DeWFudGlmaWMvXy9HaGV0dG8rQmxhc3Rlcj9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTIuMTIxMjEyMTIxMjEyMTIxJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDQgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzQxMjhhNmViMjlmOTQ5NDNjOWQyMDZjMDhlNjI1OTA0IgogICAgICAgICAgICBhbHQ9IlRocmVzaG9sZCIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI2YmU1NTk0ZmY4OWI0YzQ1M2QyNDcyYTUxYWViMzQ5YiIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI2YmU1NTk0ZmY4OWI0YzQ1M2QyNDcyYTUxYWViMzQ5YiIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0N5Ym90cm9uL18vVGhyZXNob2xkIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iVGhyZXNob2xkIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPlRocmVzaG9sZDwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvQ3lib3Ryb24iCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJDeWJvdHJvbiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Q3lib3Ryb248L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtMTNhZmU3YzAtMmRjMC00ZGZkLThkZTMtMmZjMTMwMWM5ZDNkIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9DeWJvdHJvbi9fL1RocmVzaG9sZC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtMTNhZmU3YzAtMmRjMC00ZGZkLThkZTMtMmZjMTMwMWM5ZDNkIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTRmYzhmYmE4LTMxZjMtNDlmMi1hYzE5LTQ4NDA1OTU3ODA4NCIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9DeWJvdHJvbi9fL1RocmVzaG9sZC8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS00ZmM4ZmJhOC0zMWYzLTQ5ZjItYWMxOS00ODQwNTk1NzgwODQiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0N5Ym90cm9uL18vVGhyZXNob2xkIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ3lib3Ryb24vXy9UaHJlc2hvbGQ/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9DeWJvdHJvbiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0N5Ym90cm9uP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvQ3lib3Ryb24vXy9UaHJlc2hvbGQ/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEyLjEyMTIxMjEyMTIxMjEyMSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA0IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0NAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9amlWcHdvWjdNQjQiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iamlWcHdvWjdNQjQiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWppVnB3b1o3TUI0IgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iVGVhY2hlcnMiCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljL0RhZnQrUHVuay9fL1RlYWNoZXJzIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtbmFtZT0iRGFmdCBQdW5rIgogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LXVybD0iL211c2ljL0RhZnQrUHVuayIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL0RhZnQrUHVuay9Ib21ld29yayIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvMzhkNGJhYzYzYjkwNGU3ODllOTZlNDhlMmM2NjA5OGEuanBnIgogICAgICAgICAgICBhbHQ9IkhvbWV3b3JrIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjFlYjI1YzZmODdkNjEyMDE5YTVhYjAzZmM0ZDBhMGY0IgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjFlYjI1YzZmODdkNjEyMDE5YTVhYjAzZmM0ZDBhMGY0IgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRGFmdCtQdW5rL18vVGVhY2hlcnMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJUZWFjaGVycyIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5UZWFjaGVyczwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRGFmdCtQdW5rIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iRGFmdCBQdW5rIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5EYWZ0IFB1bms8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtNmQ1ZWJhNzMtYzM0MC00MjMwLTg5NTEtNjI2NTJhYmEzMTg2IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9EYWZ0K1B1bmsvXy9UZWFjaGVycy8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtNmQ1ZWJhNzMtYzM0MC00MjMwLTg5NTEtNjI2NTJhYmEzMTg2IgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLTU2ZmE2YTIxLTdhMTMtNGNjOC05NzBiLTZiYTdlYzBiNjViYyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9EYWZ0K1B1bmsvXy9UZWFjaGVycy8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS01NmZhNmEyMS03YTEzLTRjYzgtOTcwYi02YmE3ZWMwYjY1YmMiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RhZnQrUHVuay9fL1RlYWNoZXJzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRGFmdCtQdW5rL18vVGVhY2hlcnM/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EYWZ0K1B1bmsiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9EYWZ0K1B1bms/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdCBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPGEKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgZGF0YS1vcGVuLW1vZGFsPSIvam9pbi9tb2RhbD9hY3Rpb249c2V0LW9ic2Vzc2lvbiZhbXA7YmFja190bz0lMkZ1c2VyJTJGYWxleGlzdG91bG90dGUlMkZsaWJyYXJ5JTJGdHJhY2tzIgogICAgCiAgICAKICAgIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4/bmV4dD0vdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcyIKCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWljLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tb2JzZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIFNldCB0cmFjayBhcyBjdXJyZW50IG9ic2Vzc2lvbgogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InZpc2libGUteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lbnUtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQgdHJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYnV5bGlua3MtZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy9EYWZ0K1B1bmsvXy9UZWFjaGVycz9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTIuMTIxMjEyMTIxMjEyMTIxJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDQgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ1CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1wbGF5LWJ1dHRvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBqcy1wbGF5bGluawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1IMUpCLVQySmxnZyIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgoKICAgICAgICAgICAgICAgIGRhdGEtcGxheWxpbmstYWZmaWxpYXRlPSJ5b3V0dWJlIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLWlkPSJIMUpCLVQySmxnZyIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS11cmw9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9SDFKQi1UMkpsZ2ciCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgZGF0YS10cmFjay1uYW1lPSJNaW5kIEdhbWVzIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9EZXNpcmVkK1N0YXRlL18vTWluZCtHYW1lcyIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IkRlc2lyZWQgU3RhdGUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvRGVzaXJlZCtTdGF0ZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL09yaWdpbitVbmtub3duL09yaWdpbitVbmtub3duK1ByZXNlbnQrVGhlK1NwZWVkK09mK1NvdW5kIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy80YzM2MmNkZmZmMWY0OGVkYTZjMmViMjk1NTE4ZmE2NC5qcGciCiAgICAgICAgICAgIGFsdD0iT3JpZ2luIFVua25vd24gUHJlc2VudCBUaGUgU3BlZWQgT2YgU291bmQiCiAgICAgICAgICAgIAogICAgICAgIC8+CiAgICAKCiAgICAKICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbG92ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIDxkaXYKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYWU2NTQwZTRjNjVlNmFkODdkN2Y4ZDlhMGMxNGVmMmEiCiAgICAgICAgCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1zdGF0ZXM9Ilt7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7dW5sb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7bG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtMb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLmxvdmUmIzM0O30sIHsmIzM0O25hbWUmIzM0OzogJiMzNDtsb3ZlZCYjMzQ7LCAmIzM0O2J1dHRvbl90ZXh0JiMzNDs6ICYjMzQ7YWxleGlzdG91bG90dGUgbG92ZXMgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O3VubG92ZSYjMzQ7LCAmIzM0O2FuYWx5dGljc19hY3Rpb24mIzM0OzogJiMzNDtVbmxvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2sudW5sb3ZlJiMzNDt9XSIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgPgogICAgICAgIAogICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InRvZ2dsZS1idXR0b24gY2hhcnRsaXN0LWxvdmUtYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBhbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2sKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgPC9kaXY+CgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbgogICAgICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1ncm91cC1pZD0iYWU2NTQwZTRjNjVlNmFkODdkN2Y4ZDlhMGMxNGVmMmEiCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EZXNpcmVkK1N0YXRlL18vTWluZCtHYW1lcyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9Ik1pbmQgR2FtZXMiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+TWluZCBHYW1lczwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRGVzaXJlZCtTdGF0ZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkRlc2lyZWQgU3RhdGUiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkRlc2lyZWQgU3RhdGU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtZDFmNGI2OTgtNjhlZS00NzBkLWIyZjktMmRiMGE5NWU3MDhkIgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9EZXNpcmVkK1N0YXRlL18vTWluZCtHYW1lcy8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgIGRhdGEtZHJvcGRvd24tbGF5b3V0LWF0PSJjZW50ZXIgYm90dG9tKzMiCiAgICAgICAgICAgID5CdXk8L2J1dHRvbj4KICAgICAgICAgICAgPHVsCiAgICAgICAgICAgICAgICBpZD0iYnV5bGlua3MtZDFmNGI2OTgtNjhlZS00NzBkLWIyZjktMmRiMGE5NWU3MDhkIgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUKICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZQogICAgICAgICAgICAgICAgICAgIGJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0icG9saXRlIgogICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1tb3JlIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNoYXJ0bGlzdC1tb3JlLWRkODdhZDBiLTk1YjgtNDMyNi04YWE1LWE3N2RmODc3YTBiNiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9EZXNpcmVkK1N0YXRlL18vTWluZCtHYW1lcy8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS1kZDg3YWQwYi05NWI4LTQzMjYtOGFhNS1hNzdkZjg3N2EwYjYiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0Rlc2lyZWQrU3RhdGUvXy9NaW5kK0dhbWVzIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRGVzaXJlZCtTdGF0ZS9fL01pbmQrR2FtZXM/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EZXNpcmVkK1N0YXRlIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRGVzaXJlZCtTdGF0ZT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0Rlc2lyZWQrU3RhdGUvXy9NaW5kK0dhbWVzP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItbGluayIKICAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1zbHVnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxMi4xMjEyMTIxMjEyMTIxMjElOyIKICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci12YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgNCA8c3BhbiBjbGFzcz0ic3RhdC1uYW1lIj5zY3JvYmJsZXM8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3NwYW4+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3ctLXdpdGgtYXJ0aXN0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzLWZvY3VzLWNvbnRyb2xzLWNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICIKCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zY3JvYmJsZS1yb3cKICAgICAgICAgICAgICAgICAgICBkYXRhLWFqYXgtZm9ybS1zdGF0ZQoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNDYKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1wbGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXBsYXktYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzLXBsYXlsaW5rCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXE1UzdWSVNPWThFIgogICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCgogICAgICAgICAgICAgICAgZGF0YS1wbGF5bGluay1hZmZpbGlhdGU9InlvdXR1YmUiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtaWQ9InE1UzdWSVNPWThFIgogICAgICAgICAgICAgICAgZGF0YS15b3V0dWJlLXVybD0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1xNVM3VklTT1k4RSIKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLW5hbWU9IkRlZXAgU2VhcmNoIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9EaWUrJmFtcDsrQnJlYWsvXy9EZWVwK1NlYXJjaCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IkRpZSAmYW1wOyBCcmVhayIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy9EaWUrJmFtcDsrQnJlYWsiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5IG9uIHlvdXR1YmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheVRyYWNrT25QYWdlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InlvdXR1YmUiCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIFBsYXkgdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9EaWUrJmFtcDsrQnJlYWsvR3JhbmQrRnVuaytIdXN0bGUrRVAiIGNsYXNzPSJjb3Zlci1hcnQiPgogICAgCgogICAgCiAgICAgICAgPGltZwogICAgICAgICAgICBzcmM9Imh0dHBzOi8vbGFzdGZtLWltZzIuYWthbWFpemVkLm5ldC9pL3UvNjRzLzM4YWIzMjY2NjA3OTQ1ZDBjNTQ3YWVlOTNkZWQ4M2I1LmpwZyIKICAgICAgICAgICAgYWx0PSJHcmFuZCBGdW5rIEh1c3RsZSBFUCIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI1NDE3YWNkNDgwMGJkOTY3OWUyNmRiYTM4NzQ1NWQ4YyIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI1NDE3YWNkNDgwMGJkOTY3OWUyNmRiYTM4NzQ1NWQ4YyIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RpZSsmYW1wOytCcmVhay9fL0RlZXArU2VhcmNoIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iRGVlcCBTZWFyY2giCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+RGVlcCBTZWFyY2g8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RpZSsmYW1wOytCcmVhayIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkRpZSAmYW1wOyBCcmVhayIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+RGllICZhbXA7IEJyZWFrPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTk1OWMxN2VlLWQ0M2MtNGM4My04NzViLTZkYzU3MWUzMjZhNyIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRGllKyZhbXA7K0JyZWFrL18vRGVlcCtTZWFyY2gvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTk1OWMxN2VlLWQ0M2MtNGM4My04NzViLTZkYzU3MWUzMjZhNyIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS1jZmRmZGI3YS1mZGZjLTQ3N2YtOGY3ZS1hYzdjMDVjOWJlODMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRGllKyZhbXA7K0JyZWFrL18vRGVlcCtTZWFyY2gvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtY2ZkZmRiN2EtZmRmYy00NzdmLThmN2UtYWM3YzA1YzliZTgzIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EaWUrJmFtcDsrQnJlYWsvXy9EZWVwK1NlYXJjaCIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0RpZSsmYW1wOytCcmVhay9fL0RlZXArU2VhcmNoP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRGllKyZhbXA7K0JyZWFrIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRGllKyZhbXA7K0JyZWFrP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRGllKyZhbXA7K0JyZWFrL18vRGVlcCtTZWFyY2g/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEyLjEyMTIxMjEyMTIxMjEyMSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA0IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0NwogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Rlo5ZmRoNWxxOXciCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iRlo5ZmRoNWxxOXciCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUZaOWZkaDVscTl3IgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iRXJhZGljYXRpb24iCiAgICAgICAgICAgICAgICBkYXRhLXRyYWNrLXVybD0iL211c2ljLytub3JlZGlyZWN0L0RqK0wuQS5CL18vRXJhZGljYXRpb24iCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJEaiBMLkEuQiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy8rbm9yZWRpcmVjdC9EaitMLkEuQiIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IlBsYXkgb24geW91dHViZSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJQbGF5VHJhY2tPblBhZ2UiCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0ieW91dHViZSIKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgUGxheSB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGEgaHJlZj0iL211c2ljL1ZhcmlvdXMrQXJ0aXN0cy9EZWVwK0luK1RoZStKdW5nbGUrQW50aGVtcyIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvOWRhNWU5YTQ4MmJkZTE4NmUyNmY2YWYyMzcyZmY1N2UuanBnIgogICAgICAgICAgICBhbHQ9IkRlZXAgSW4gVGhlIEp1bmdsZSBBbnRoZW1zIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImJkYTBhZmI1NmUyNzUyNDlkNDliNGJhNjk2Nzc4OTI4IgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9ImJkYTBhZmI1NmUyNzUyNDlkNDliNGJhNjk2Nzc4OTI4IgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvK25vcmVkaXJlY3QvRGorTC5BLkIvXy9FcmFkaWNhdGlvbiIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkVyYWRpY2F0aW9uIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSIiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaXRlbXByb3A9IiIKICAgICAgICAgICAgCiAgICAgICAgPkVyYWRpY2F0aW9uPC9hPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtYXJ0aXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy8rbm9yZWRpcmVjdC9EaitMLkEuQiIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkRqIEwuQS5CIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5EaiBMLkEuQjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWJ1eWxpbmtzIGZvY3VzLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibGF6eS1idXlsaW5rcyAiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLXRyaWdnZXIKICAgICAgICAgICAgICAgICAgICBsYXp5LWJ1eWxpbmtzLXRvZ2dsZQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJidXlsaW5rcy0yZDI5MmRkZi04NWFjLTQwZTUtYWE0Yi04ZWE4YjhlMDU1YjciCiAgICAgICAgICAgICAgICBkYXRhLWRpc2Nsb3NlLWxhenktYnV5bGlua3MKICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljLytub3JlZGlyZWN0L0RqK0wuQS5CL18vRXJhZGljYXRpb24vK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTJkMjkyZGRmLTg1YWMtNDBlNS1hYTRiLThlYThiOGUwNTViNyIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0wMjQ1M2ZkYy04ZTMyLTQ1NjQtODMyMS04NzZlMThjM2ZhNWMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvK25vcmVkaXJlY3QvRGorTC5BLkIvXy9FcmFkaWNhdGlvbi8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS0wMjQ1M2ZkYy04ZTMyLTQ1NjQtODMyMS04NzZlMThjM2ZhNWMiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljLytub3JlZGlyZWN0L0RqK0wuQS5CL18vRXJhZGljYXRpb24iCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy8rbm9yZWRpcmVjdC9EaitMLkEuQi9fL0VyYWRpY2F0aW9uP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvK25vcmVkaXJlY3QvRGorTC5BLkIiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS9tdXNpYy8rbm9yZWRpcmVjdC9EaitMLkEuQj9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljLytub3JlZGlyZWN0L0RqK0wuQS5CL18vRXJhZGljYXRpb24/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEyLjEyMTIxMjEyMTIxMjEyMSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA0IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0OAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9RmdYX0pzekVXekEiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iRmdYX0pzekVXekEiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUZnWF9Kc3pFV3pBIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iQm9keSBMaWtlIFdvdyIKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stdXJsPSIvbXVzaWMvRG9jdW1lbnQrT25lL18vQm9keStMaWtlK1dvdyIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtYXJ0aXN0LW5hbWU9IkRvY3VtZW50IE9uZSIKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC11cmw9Ii9tdXNpYy9Eb2N1bWVudCtPbmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRpdGxlPSJQbGF5IG9uIHlvdXR1YmUiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iUGxheVRyYWNrT25QYWdlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtbGFiZWw9InlvdXR1YmUiCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIFBsYXkgdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9WYXJpb3VzK0FydGlzdHMvMTUrWWVhcnMrb2YrVGVjaG5pcXVlIiBjbGFzcz0iY292ZXItYXJ0Ij4KICAgIAoKICAgIAogICAgICAgIDxpbWcKICAgICAgICAgICAgc3JjPSJodHRwczovL2xhc3RmbS1pbWcyLmFrYW1haXplZC5uZXQvaS91LzY0cy9kYWYyNGQ2MjI0Mzk0ZjEwY2Y5Y2MyOGIyMGQyZTQ0MC5qcGciCiAgICAgICAgICAgIGFsdD0iMTUgWWVhcnMgb2YgVGVjaG5pcXVlIgogICAgICAgICAgICAKICAgICAgICAvPgogICAgCgogICAgCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWxvdmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8ZGl2CiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjQ3ZGFiNTdhNjlmNzY4MTA0M2VmYzQ4YjQ0ODE4NTNjIgogICAgICAgIAogICAgICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tc3RhdGVzPSJbeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O3VubG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjayYjMzQ7LCAmIzM0O3VybCYjMzQ7OiBudWxsLCAmIzM0O2FjdGlvbiYjMzQ7OiAmIzM0O2xvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7TG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay5sb3ZlJiMzNDt9LCB7JiMzNDtuYW1lJiMzNDs6ICYjMzQ7bG92ZWQmIzM0OywgJiMzNDtidXR0b25fdGV4dCYjMzQ7OiAmIzM0O2FsZXhpc3RvdWxvdHRlIGxvdmVzIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDt1bmxvdmUmIzM0OywgJiMzNDthbmFseXRpY3NfYWN0aW9uJiMzNDs6ICYjMzQ7VW5sb3ZlVHJhY2smIzM0OywgJiMzNDtldmVudCYjMzQ7OiAmIzM0O3RyYWNrLnVubG92ZSYjMzQ7fV0iCiAgICAgICAgCiAgICAKICAgIGRhdGEtdG9nZ2xlLWJ1dHRvbi1jdXJyZW50LXN0YXRlPSJ1bmxvdmVkIgoKICAgID4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIGNsYXNzPSJ0b2dnbGUtYnV0dG9uIGNoYXJ0bGlzdC1sb3ZlLWJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgYWxleGlzdG91bG90dGUgZG9lc24mIzM5O3QgbG92ZSB0aGlzIHRyYWNrCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24KICAgICAgICBkYXRhLXRvZ2dsZS1idXR0b24tZ3JvdXAtaWQ9IjQ3ZGFiNTdhNjlmNzY4MTA0M2VmYzQ4YjQ0ODE4NTNjIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRG9jdW1lbnQrT25lL18vQm9keStMaWtlK1dvdyIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkJvZHkgTGlrZSBXb3ciCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+Qm9keSBMaWtlIFdvdzwvYT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWFydGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRG9jdW1lbnQrT25lIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iRG9jdW1lbnQgT25lIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5Eb2N1bWVudCBPbmU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1idXlsaW5rcyBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxhenktYnV5bGlua3MgIj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgbGF6eS1idXlsaW5rcy10b2dnbGUKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYnV5bGlua3MtM2Q5YzcxZDEtZDRhMi00NmJjLWI5NGUtZjQzOGQxNTg3MTU5IgogICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGluay11cmw9Ii9tdXNpYy9Eb2N1bWVudCtPbmUvXy9Cb2R5K0xpa2UrV293LytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy0zZDljNzFkMS1kNGEyLTQ2YmMtYjk0ZS1mNDM4ZDE1ODcxNTkiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtZjBmMDVkOTMtYjYxZS00ZmEzLTk1ZTMtMjM5YjU5NGMxNTg3IgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0RvY3VtZW50K09uZS9fL0JvZHkrTGlrZStXb3cvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtZjBmMDVkOTMtYjYxZS00ZmEzLTk1ZTMtMjM5YjU5NGMxNTg3IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9Eb2N1bWVudCtPbmUvXy9Cb2R5K0xpa2UrV293IgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLXRyYWNrCiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gdHJhY2sKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRG9jdW1lbnQrT25lL18vQm9keStMaWtlK1dvdz9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RvY3VtZW50K09uZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0RvY3VtZW50K09uZT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0RvY3VtZW50K09uZS9fL0JvZHkrTGlrZStXb3c/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEyLjEyMTIxMjEyMTIxMjEyMSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA0IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdy0td2l0aC1hcnRpc3QKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAganMtZm9jdXMtY29udHJvbHMtY29udGFpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIgoKICAgICAgICAgICAgICAgICAgICBkYXRhLXNjcm9iYmxlLXJvdwogICAgICAgICAgICAgICAgICAgIGRhdGEtYWpheC1mb3JtLXN0YXRlCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1pbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0OQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LXBsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtcGxheS1idXR0b24KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAganMtcGxheWxpbmsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9M2J5eEZuSW93REEiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKCiAgICAgICAgICAgICAgICBkYXRhLXBsYXlsaW5rLWFmZmlsaWF0ZT0ieW91dHViZSIKICAgICAgICAgICAgICAgIGRhdGEteW91dHViZS1pZD0iM2J5eEZuSW93REEiCiAgICAgICAgICAgICAgICBkYXRhLXlvdXR1YmUtdXJsPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTNieXhGbklvd0RBIgoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRhdGEtdHJhY2stbmFtZT0iSmF6eiBDbHViIgogICAgICAgICAgICAgICAgZGF0YS10cmFjay11cmw9Ii9tdXNpYy9Eb2N1bWVudCtPbmUvXy9KYXp6K0NsdWIiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLWFydGlzdC1uYW1lPSJEb2N1bWVudCBPbmUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hcnRpc3QtdXJsPSIvbXVzaWMvRG9jdW1lbnQrT25lIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxheSBvbiB5b3V0dWJlIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249IlBsYXlUcmFja09uUGFnZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJ5b3V0dWJlIgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQbGF5IHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgICAgICA8YSBocmVmPSIvbXVzaWMvVmFyaW91cytBcnRpc3RzLzE1K1llYXJzK29mK1RlY2huaXF1ZSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvZGFmMjRkNjIyNDM5NGYxMGNmOWNjMjhiMjBkMmU0NDAuanBnIgogICAgICAgICAgICBhbHQ9IjE1IFllYXJzIG9mIFRlY2huaXF1ZSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSIyZmYzYWJkZjQ1YTUxZjVjZDNkMjFjOTZjMDY4NWIzNCIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSIyZmYzYWJkZjQ1YTUxZjVjZDNkMjFjOTZjMDY4NWIzNCIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RvY3VtZW50K09uZS9fL0phenorQ2x1YiIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkphenogQ2x1YiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iIgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSIiCiAgICAgICAgICAgIAogICAgICAgID5KYXp6IENsdWI8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RvY3VtZW50K09uZSIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkRvY3VtZW50IE9uZSIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+RG9jdW1lbnQgT25lPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTI5ZjIxZDM1LTc0OTMtNDljZi05MjhiLWMyYjYwMWY5OTg0MCIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRG9jdW1lbnQrT25lL18vSmF6eitDbHViLytwYXJ0aWFsL2J1eWxpbmtzIgogICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgPkJ1eTwvYnV0dG9uPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgIGlkPSJidXlsaW5rcy0yOWYyMWQzNS03NDkzLTQ5Y2YtOTI4Yi1jMmI2MDFmOTk4NDAiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgYnV5bGlua3MtZHJvcGRvd24tbWVudQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rcy1sb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LW1vcmUgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3QtbW9yZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iY2hhcnRsaXN0LW1vcmUtNGYxMzRjOWEtNmI5Ni00Y2FiLTljYzQtNmRjYjAxOTY5NTNjIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1idXlsaW5rLXVybD0iL211c2ljL0RvY3VtZW50K09uZS9fL0phenorQ2x1Yi8rcGFydGlhbC9idXlsaW5rcyIKICAgICAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICAgICAgPk1vcmU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgICAgIGlkPSJjaGFydGxpc3QtbW9yZS00ZjEzNGM5YS02Yjk2LTRjYWItOWNjNC02ZGNiMDE5Njk1M2MiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlLWhpZGUtLWpzLW9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LW1vcmUtbWVudQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RvY3VtZW50K09uZS9fL0phenorQ2x1YiIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0RvY3VtZW50K09uZS9fL0phenorQ2x1Yj9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tdHJhY2sKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byB0cmFjayBpbiBsaWJyYXJ5CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICA8bGk+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RvY3VtZW50K09uZSIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0RvY3VtZW50K09uZT9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlLWl0ZW0KICAgICAgICAgICAgICAgIG1vcmUtaXRlbS0tYXJ0aXN0CiAgICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgR28gdG8gYXJ0aXN0IGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8YQogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAKICAgICAgICBkYXRhLW9wZW4tbW9kYWw9Ii9qb2luL21vZGFsP2FjdGlvbj1zZXQtb2JzZXNzaW9uJmFtcDtiYWNrX3RvPSUyRnVzZXIlMkZhbGV4aXN0b3Vsb3R0ZSUyRmxpYnJhcnklMkZ0cmFja3MiCiAgICAKICAgIAogICAgaHJlZj0iaHR0cHM6Ly9zZWN1cmUubGFzdC5mbS9sb2dpbj9uZXh0PS91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvdHJhY2tzIgoKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltaWMtbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1vYnNlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgU2V0IHRyYWNrIGFzIGN1cnJlbnQgb2JzZXNzaW9uCiAgICAgICAgPC9hPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWVudS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldCB0cmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidXlsaW5rcy1kcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1lbnUtbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1saXZlPSJwb2xpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPkxvYWRpbmc8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXIiPgogICAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0RvY3VtZW50K09uZS9fL0phenorQ2x1Yj9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMiCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLWxpbmsiCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItc2x1ZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTIuMTIxMjEyMTIxMjEyMTIxJTsiCiAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNoYXJ0bGlzdC1jb3VudC1iYXItdmFsdWUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDQgPHNwYW4gY2xhc3M9InN0YXQtbmFtZSI+c2Nyb2JibGVzPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9zcGFuPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRsaXN0LXJvdwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydGxpc3Qtcm93LS13aXRoLWFydGlzdAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcy1mb2N1cy1jb250cm9scy1jb250YWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiCgogICAgICAgICAgICAgICAgICAgIGRhdGEtc2Nyb2JibGUtcm93CiAgICAgICAgICAgICAgICAgICAgZGF0YS1hamF4LWZvcm0tc3RhdGUKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY2hhcnRsaXN0LWluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUwCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtcGxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgCgogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxhIGhyZWY9Ii9tdXNpYy9WYXJpb3VzK0FydGlzdHMvRHJ1bXNvdW5kKyZhbXA7K0Jhc3NsaW5lK1NtaXRoK1ByZXNlbnQ6K1RFQ0gxMDArUmV0cm9zcGVjdGl2ZSIgY2xhc3M9ImNvdmVyLWFydCI+CiAgICAKCiAgICAKICAgICAgICA8aW1nCiAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9sYXN0Zm0taW1nMi5ha2FtYWl6ZWQubmV0L2kvdS82NHMvYzZmNTljMWU1ZTcyNDBhNGMwZDQyN2FiZDcxZjNkYmIiCiAgICAgICAgICAgIGFsdD0iRHJ1bXNvdW5kICZhbXA7IEJhc3NsaW5lIFNtaXRoIFByZXNlbnQ6IFRFQ0gxMDAgUmV0cm9zcGVjdGl2ZSIKICAgICAgICAgICAgCiAgICAgICAgLz4KICAgIAoKICAgIAogICAgICAgIDwvYT4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1sb3ZlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgPGRpdgogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI1NjIyODc1ZmRlYmJiMTZiNWIwOWIxZTE5NDcxNzg1ZCIKICAgICAgICAKICAgICAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLXN0YXRlcz0iW3smIzM0O25hbWUmIzM0OzogJiMzNDt1bmxvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBkb2VzbiYjMzk7dCBsb3ZlIHRoaXMgdHJhY2smIzM0OywgJiMzNDt1cmwmIzM0OzogbnVsbCwgJiMzNDthY3Rpb24mIzM0OzogJiMzNDtsb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O0xvdmVUcmFjayYjMzQ7LCAmIzM0O2V2ZW50JiMzNDs6ICYjMzQ7dHJhY2subG92ZSYjMzQ7fSwgeyYjMzQ7bmFtZSYjMzQ7OiAmIzM0O2xvdmVkJiMzNDssICYjMzQ7YnV0dG9uX3RleHQmIzM0OzogJiMzNDthbGV4aXN0b3Vsb3R0ZSBsb3ZlcyB0aGlzIHRyYWNrJiMzNDssICYjMzQ7dXJsJiMzNDs6IG51bGwsICYjMzQ7YWN0aW9uJiMzNDs6ICYjMzQ7dW5sb3ZlJiMzNDssICYjMzQ7YW5hbHl0aWNzX2FjdGlvbiYjMzQ7OiAmIzM0O1VubG92ZVRyYWNrJiMzNDssICYjMzQ7ZXZlbnQmIzM0OzogJiMzNDt0cmFjay51bmxvdmUmIzM0O31dIgogICAgICAgIAogICAgCiAgICBkYXRhLXRvZ2dsZS1idXR0b24tY3VycmVudC1zdGF0ZT0idW5sb3ZlZCIKCiAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBjbGFzcz0idG9nZ2xlLWJ1dHRvbiBjaGFydGxpc3QtbG92ZS1idXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIGFsZXhpc3RvdWxvdHRlIGRvZXNuJiMzOTt0IGxvdmUgdGhpcyB0cmFjawogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uCiAgICAgICAgZGF0YS10b2dnbGUtYnV0dG9uLWdyb3VwLWlkPSI1NjIyODc1ZmRlYmJiMTZiNWIwOWIxZTE5NDcxNzg1ZCIKICAgICAgICAKICAgIAogICAgZGF0YS10b2dnbGUtYnV0dG9uLWN1cnJlbnQtc3RhdGU9InVubG92ZWQiCgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RydW1zb3VuZCsmYW1wOytCYXNzbGluZStTbWl0aC9fL1BsYW5ldCtNYXJzIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0aXRsZT0iUGxhbmV0IE1hcnMiCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+UGxhbmV0IE1hcnM8L2E+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoYXJ0bGlzdC1hcnRpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL211c2ljL0RydW1zb3VuZCsmYW1wOytCYXNzbGluZStTbWl0aCIKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGl0bGU9IkRydW1zb3VuZCAmYW1wOyBCYXNzbGluZSBTbWl0aCIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtcHJvcD0iIgogICAgICAgICAgICAKICAgICAgICA+RHJ1bXNvdW5kICZhbXA7IEJhc3NsaW5lIFNtaXRoPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtYnV5bGlua3MgZm9jdXMtY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJsYXp5LWJ1eWxpbmtzICI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtdHJpZ2dlcgogICAgICAgICAgICAgICAgICAgIGxhenktYnV5bGlua3MtdG9nZ2xlCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImJ1eWxpbmtzLTE2NWQwNzgzLWVmZmUtNGY4OC1hNTMwLWIyNzVhODE2YjIwYiIKICAgICAgICAgICAgICAgIGRhdGEtZGlzY2xvc2UtbGF6eS1idXlsaW5rcwogICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRHJ1bXNvdW5kKyZhbXA7K0Jhc3NsaW5lK1NtaXRoL18vUGxhbmV0K01hcnMvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICBkYXRhLWRyb3Bkb3duLWxheW91dC1hdD0iY2VudGVyIGJvdHRvbSszIgogICAgICAgICAgICA+QnV5PC9idXR0b24+CiAgICAgICAgICAgIDx1bAogICAgICAgICAgICAgICAgaWQ9ImJ1eWxpbmtzLTE2NWQwNzgzLWVmZmUtNGY4OC1hNTMwLWIyNzVhODE2YjIwYiIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUKICAgICAgICAgICAgICAgICAgICBidXlsaW5rcy1kcm9wZG93bi1tZW51CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51LWxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmtzLWxvYWRpbmcKICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgID5Mb2FkaW5nPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjaGFydGxpc3QtbW9yZSBmb2N1cy1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS10cmlnZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJjaGFydGxpc3QtbW9yZS0zMWY4Y2Q3Zi1kODllLTRmMzctYmQ1MS04NzM5MmEyM2E0M2MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNjbG9zZS1sYXp5LWJ1eWxpbmtzCiAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LWJ1eWxpbmstdXJsPSIvbXVzaWMvRHJ1bXNvdW5kKyZhbXA7K0Jhc3NsaW5lK1NtaXRoL18vUGxhbmV0K01hcnMvK3BhcnRpYWwvYnV5bGlua3MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kcm9wZG93bi1sYXlvdXQtYXQ9ImNlbnRlciBib3R0b20rMyIKICAgICAgICAgICAgICAgID5Nb3JlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwKICAgICAgICAgICAgICAgICAgICBpZD0iY2hhcnRsaXN0LW1vcmUtMzFmOGNkN2YtZDg5ZS00ZjM3LWJkNTEtODczOTJhMjNhNDNjIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY2xvc2UtaGlkZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZS1oaWRlLS1qcy1vbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLW1lbnUtY2xpY2thYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0bGlzdC1tb3JlLW1lbnUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9tdXNpYy9EcnVtc291bmQrJmFtcDsrQmFzc2xpbmUrU21pdGgvXy9QbGFuZXQrTWFycyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9hPgogICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L211c2ljL0RydW1zb3VuZCsmYW1wOytCYXNzbGluZStTbWl0aC9fL1BsYW5ldCtNYXJzP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS10cmFjawogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIHRyYWNrIGluIGxpYnJhcnkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2E+CiAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgIDxsaT4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvbXVzaWMvRHJ1bXNvdW5kKyZhbXA7K0Jhc3NsaW5lK1NtaXRoIgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLWFydGlzdAogICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEdvIHRvIGFydGlzdAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgPGxpPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRHJ1bXNvdW5kKyZhbXA7K0Jhc3NsaW5lK1NtaXRoP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyIKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgZHJvcGRvd24tbWVudS1jbGlja2FibGUtaXRlbQogICAgICAgICAgICAgICAgbW9yZS1pdGVtLS1hcnRpc3QKICAgICAgICAgICAgIgogICAgICAgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBHbyB0byBhcnRpc3QgaW4gbGlicmFyeQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvYT4KICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxhCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIGRhdGEtb3Blbi1tb2RhbD0iL2pvaW4vbW9kYWw/YWN0aW9uPXNldC1vYnNlc3Npb24mYW1wO2JhY2tfdG89JTJGdXNlciUyRmFsZXhpc3RvdWxvdHRlJTJGbGlicmFyeSUyRnRyYWNrcyIKICAgIAogICAgCiAgICBocmVmPSJodHRwczovL3NlY3VyZS5sYXN0LmZtL2xvZ2luP25leHQ9L3VzZXIvYWxleGlzdG91bG90dGUvbGlicmFyeS90cmFja3MiCgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1pYy1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi1tZW51LWNsaWNrYWJsZS1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLWl0ZW0tLW9ic2Vzc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgPgogICAgICAgICAgICBTZXQgdHJhY2sgYXMgY3VycmVudCBvYnNlc3Npb24KICAgICAgICA8L2E+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZW51LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0IHRyYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImJ1eWxpbmtzLWRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWVudS1sb2FkaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktYnV5bGlua3MtbG9hZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxpdmU9InBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+TG9hZGluZzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNoYXJ0bGlzdC1iYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICA8c3BhbiBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhciI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii91c2VyL2FsZXhpc3RvdWxvdHRlL2xpYnJhcnkvbXVzaWMvRHJ1bXNvdW5kKyZhbXA7K0Jhc3NsaW5lK1NtaXRoL18vUGxhbmV0K01hcnM/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTIgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iY2hhcnRsaXN0LWNvdW50LWJhci1saW5rIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXNsdWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEyLjEyMTIxMjEyMTIxMjEyMSU7IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaGFydGxpc3QtY291bnQtYmFyLXZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA0IDxzcGFuIGNsYXNzPSJzdGF0LW5hbWUiPnNjcm9iYmxlczwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvc3Bhbj4KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAKICAgICAgICA8L3Rib2R5PgogICAgPC90YWJsZT4KCgogICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LWZvcm0iPgogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvdXNlci9hbGV4aXN0b3Vsb3R0ZS9saWJyYXJ5L3RyYWNrcz9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMjY3VycmVudC1pdGVtIiBtZXRob2Q9ImdldCIgY2xhc3M9ImZvcm0taG9yaXpvbnRhbCBqdW1wdG8tZm9ybSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCIgZm9yPSJqdW1wdG9fcG9zaXRpb24iPkp1bXAgdG8gcG9zaXRpb246PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cC1jb250cm9scyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ibnVtYmVyIiBuYW1lPSJpdGVtIiBpZD0ianVtcHRvX3Bvc2l0aW9uIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuLXNlY29uZGFyeSI+R288L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCgogICAgICAgIDxuYXYgY2xhc3M9InBhZ2luYXRpb24iPgogICAgICAgICAgICA8aDIgY2xhc3M9InNyLW9ubHkiPlBhZ2luYXRpb248L2gyPgoKICAgICAgICAgICAgPHVsIGNsYXNzPSJwYWdpbmF0aW9uLWxpc3QiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbi1wYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWN1cnJlbnQ9InBhZ2UiCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uLXBhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyZhbXA7cGFnZT0yIj4yPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbi1wYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMmYW1wO3BhZ2U9MyI+MzwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb24tcGFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI/ZGF0ZV9wcmVzZXQ9TEFTVF85MF9EQVlTJmFtcDtwYWdlPTQiPjQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uLXBhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb24tcGFnZS0taGlkZS1tb2JpbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyZhbXA7cGFnZT01Ij41PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbi1wYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uLXBhZ2UtLWhpZGUtbW9iaWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMmYW1wO3BhZ2U9NiI+NjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb24tcGFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb24tcGFnZS0tZWxsaXBzaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj7igKY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbi1wYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9kYXRlX3ByZXNldD1MQVNUXzkwX0RBWVMmYW1wO3BhZ2U9MjMiPjIzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFnaW5hdGlvbi1uZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iP2RhdGVfcHJlc2V0PUxBU1RfOTBfREFZUyZhbXA7cGFnZT0yIj5OZXh0PC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC91bD4KICAgICAgICA8L25hdj4KICAgIAoKICAgICAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgaWQ9Im1vYmlsZV9wb3NfMyIgZGF0YS1hZD0ibW9iaWxlX3Bvc18zIiBjbGFzcz0ibW9iaWxlX3Bvc18zIGxhc3RmbS1hZC1tb2JpbGUiIGRhdGEtYWRzLXBsYWNlbWVudD0neyYjMzQ7aWQmIzM0OzogJiMzNDttb2JpbGVfcG9zXzMmIzM0OywgJiMzNDtzaXplcyYjMzQ7OiBbWzMwMCwgMjUwXSwgWzMyMCwgNTBdXSwgJiMzNDtpc19tb2JpbGUmIzM0OzogdHJ1ZSwgJiMzNDt0YXJnZXRpbmcmIzM0OzogeyYjMzQ7cG9zJiMzNDs6ICYjMzQ7MyYjMzQ7fX0nPjwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgICAgICAKCgo8ZGl2IGNsYXNzPSJjb2wtc2lkZWJhciBfYnVmZmVyLXNpZGViYXIiPgogICAgCiAgICAgICAgPGgyIGNsYXNzPSJ1c2VyLXNpZGViYXItaGVhZGVyIj5MaXN0ZW5pbmcgSGlzdG9yeTwvaDI+CiAgICAgICAgCiAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAoKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1yZXNwb25zaXZlIHNjcm9iYmxlLXRhYmxlIgogICAgICAgICAgICAgZGF0YS1yZXF1aXJlPSJjaGFydHMvc2Nyb2JibGUtY2hhcnQiCiAgICAgICAgICAgICBkYXRhLXktYXhpcy1sYWJlbD0iU0NST0JCTEVTIgogICAgICAgICAgICAgZGF0YS1jaGFydC10aXRsZT0iTnVtYmVyIG9mIHRyYWNrcyBzY3JvYmJsZWQgZWFjaCBtb250aC4iCiAgICAgICAgICAgICBkYXRhLXRob3VzYW5kLXNlcGFyYXRvcj0iLCIKICAgICAgICAgICAgIGRhdGEtdG9vbHRpcC1wb2ludC1mb3JtYXQ9IlNjcm9iYmxlczogPGI+e3BvaW50Lnl9PC9iPiIKICAgICAgICAgICAgIGRhdGEtYnVja2V0LXNpemU9Ik1PTlRITFkiPgogICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIj4KICAgICAgICAgICAgICAgIDxjYXB0aW9uIGNsYXNzPSJzci1vbmx5Ij5OdW1iZXIgb2YgdHJhY2tzIHNjcm9iYmxlZCBlYWNoIG1vbnRoLjwvY2FwdGlvbj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vbnRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk51bWJlciBvZiBzY3JvYmJsZXM8L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJqcy1wZXJpb2QiIGRhdGEtdGltZXN0YW1wPSIxNTU1MTQ0MDgzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9mcm9tPTIwMTktMDQtMDEmYW1wO3JhbmdldHlwZT0xbW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHIgMjAxOQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImpzLXNjcm9iYmxlcyI+NTYzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJqcy1wZXJpb2QiIGRhdGEtdGltZXN0YW1wPSIxNTU2NjI5MjAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9mcm9tPTIwMTktMDUtMDEmYW1wO3JhbmdldHlwZT0xbW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXkgMjAxOQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImpzLXNjcm9iYmxlcyI+ODAxPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJqcy1wZXJpb2QiIGRhdGEtdGltZXN0YW1wPSIxNTU5MzA3NjAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9mcm9tPTIwMTktMDYtMDEmYW1wO3JhbmdldHlwZT0xbW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKdW4gMjAxOQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImpzLXNjcm9iYmxlcyI+NTM1PC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJqcy1wZXJpb2QiIGRhdGEtdGltZXN0YW1wPSIxNTYxODk5NjAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9mcm9tPTIwMTktMDctMDEmYW1wO3JhbmdldHlwZT0xbW9udGgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKdWwgMjAxOQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImpzLXNjcm9iYmxlcyI+NDIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBpZD0ibXB1X3RvcCIgZGF0YS1hZD0ibXB1X3RvcCIgY2xhc3M9Im1wdV90b3AgbGFzdGZtLWFkIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7bXB1X3RvcCYjMzQ7LCAmIzM0O3NpemVzJiMzNDs6IFtbMzAwLCAyNTBdLCBbMzAwLCA2MDBdXSwgJiMzNDt0YXJnZXRpbmcmIzM0OzogeyYjMzQ7cG9zJiMzNDs6ICYjMzQ7dG9wJiMzNDt9LCAmIzM0O2FkYmxvY2tfbWVzc2FnZSYjMzQ7OiB0cnVlfSc+PC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxwIGNsYXNzPSJtcHUtc3Vic2NyaXB0aW9uLXVwc2VsbCBtcHUtc3Vic2NyaXB0aW9uLXVwc2VsbC0tbXB1Ij4KICAgICAgICAgICAgICAgIERvbid0IHdhbnQgdG8gc2VlIGFkcz8gPGEgaHJlZj0iL3N1YnNjcmliZSIgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJTdWJzY3JpYmVDbGljayIgZGF0YS1hbmFseXRpY3MtbGFiZWw9IkFkVXBzZWxsQ1RBIj5TdWJzY3JpYmUgbm93PC9hPgogICAgICAgICAgICA8L3A+CiAgICAgICAgCiAgICAKCiAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJtb2JpbGVfcG9zXzMiIGRhdGEtYWQ9Im1vYmlsZV9wb3NfMyIgY2xhc3M9Im1vYmlsZV9wb3NfMyBsYXN0Zm0tYWQtbW9iaWxlIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7bW9iaWxlX3Bvc18zJiMzNDssICYjMzQ7c2l6ZXMmIzM0OzogW1szMDAsIDI1MF0sIFszMjAsIDUwXV0sICYjMzQ7aXNfbW9iaWxlJiMzNDs6IHRydWUsICYjMzQ7dGFyZ2V0aW5nJiMzNDs6IHsmIzM0O3BvcyYjMzQ7OiAmIzM0OzMmIzM0O319Jz48L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgIAoKPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8L2Rpdj4KCgogICAgICAgIAoKCiAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgaWQ9ImxlYWRlcl9ib3R0b20iIGRhdGEtYWQ9ImxlYWRlcl9ib3R0b20iIGNsYXNzPSJsZWFkZXJfYm90dG9tIGxhc3RmbS1hZCIgZGF0YS1hZHMtcGxhY2VtZW50PSd7JiMzNDtpZCYjMzQ7OiAmIzM0O2xlYWRlcl9ib3R0b20mIzM0OywgJiMzNDtzaXplcyYjMzQ7OiBbWzcyOCwgOTBdLCBbOTcwLCA2Nl1dLCAmIzM0O3RhcmdldGluZyYjMzQ7OiB7JiMzNDtwb3MmIzM0OzogJiMzNDtib3R0b20mIzM0O319Jz48L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgIAoKICAgIDwvZGl2PgoKCiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBwYWdlLWNvbnRlbnQgdmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9InJlbGF0ZWQtYWRzIj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWFyY2hsaW5rcy1tb2JpbGUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvZGl2PgoKICAgIDxkaXYgaWQ9InFhLXBhZ2UtbG9hZCI+PC9kaXY+CgogICAgCiAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAKICAgIAogICAgCiAgICA8ZGl2CiAgICAgICAgY2xhc3M9ImxhenktZmVhdHVyZXMtZm9vdGVyIgogICAgICAgIGRhdGEtcmVxdWlyZT0iY29tcG9uZW50cy9sYXp5LWxvYWQtdjIiCiAgICAgICAgZGF0YS1sYXp5LWxvYWQtY29udGVudD0iL2ZlYXR1cmVzL3BhcnRpYWwvZm9vdGVyIgogICAgICAgIGRhdGEtbGF6eS1sb2FkLXdoZW4tb24tc2NyZWVuCiAgICA+PC9kaXY+CgogICAgICAgIAogICAgCgoKICAgIAogICAgPGZvb3RlciBjbGFzcz0iZm9vdGVyIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09yZ2FuaXphdGlvbiI+CiAgICAgICAgPGxpbmsgaXRlbXByb3A9InVybCIgaHJlZj0iaHR0cHM6Ly93d3cubGFzdC5mbSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci10b3AiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXRvcC1yb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci10b3AtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJmb290ZXItaGVhZGluZyI+Q29tcGFueTwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZm9vdGVyLWxpbmtzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYWJvdXQiPkFib3V0IExhc3QuZm08L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYWJvdXQvY29udGFjdCI+Q29udGFjdCBVczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hYm91dC9qb2JzIj5Kb2JzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci10b3AtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJmb290ZXItaGVhZGluZyI+SGVscDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZm9vdGVyLWxpbmtzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYWJvdXQvdHJhY2tteW11c2ljIj5UcmFjayBNeSBNdXNpYzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2V0c2F0aXNmYWN0aW9uLmNvbS9sYXN0Zm0iIHRhcmdldD0iX0JMQU5LIj5Db21tdW5pdHkgU3VwcG9ydDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2hlbHAvZ3VpZGVsaW5lcyI+Q29tbXVuaXR5IEd1aWRlbGluZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwOi8vY2JzaS5mb3JjZS5jb20vQ0JTaS9sYXN0Zm0iIHRhcmdldD0iX0JMQU5LIj5IZWxwPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXRvcC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImZvb3Rlci1oZWFkaW5nIj5Hb29kaWVzPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJmb290ZXItbGlua3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hYm91dC90cmFja215bXVzaWMiPkRvd25sb2FkIFNjcm9iYmxlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hcGkiPkRldmVsb3BlciBBUEk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbXVzaWMvK2ZyZWUtbXVzaWMtZG93bmxvYWRzIj5GcmVlIE11c2ljIERvd25sb2FkczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vc3RvcmUubGFzdC5mbSI+TWVyY2hhbmRpc2U8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXRvcC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImZvb3Rlci1oZWFkaW5nIj5BY2NvdW50PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJmb290ZXItbGlua3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9qb2luIj5Kb2luPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vc2VjdXJlLmxhc3QuZm0vbG9naW4iPkxvZ2luPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9zdWJzY3JpYmUiPlN1YnNjcmliZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci10b3AtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJmb290ZXItaGVhZGluZyI+Rm9sbG93IFVzPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJmb290ZXItbGlua3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vbGFzdGZtIj5GYWNlYm9vazwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2xhc3RmbSI+VHdpdHRlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2xhc3RfZm0iPkluc3RhZ3JhbTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL2xhc3RmbSI+WW91VHViZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItYm90dG9tIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS05Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGlkPSJsYW5ndWFnZS1zZWxlY3RvciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UtLWFjdGl2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5FbmdsaXNoPC9zdHJvbmc+PHNwYW4gY2xhc3M9InNyLW9ubHkiPmN1cnJlbnQgbGFuZ3VhZ2U8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J3V3R2FCa1hMdjdNZksyZ2lScklnYTlrWlBES1ZEZG1VJyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0iZGUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0iZGUiIHR5cGU9InN1Ym1pdCI+RGV1dHNjaDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3Rlci1sYW5ndWFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvb3Rlci1sYW5ndWFnZS1mb3JtIiBhY3Rpb249Ii9pMThuL3NldGxhbmcvIiBtZXRob2Q9InBvc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J2NzcmZtaWRkbGV3YXJldG9rZW4nIHZhbHVlPSd1d0dhQmtYTHY3TWZLMmdpUnJJZ2E5a1pQREtWRGRtVScgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJsYW5ndWFnZSIgdmFsdWU9ImVzIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im1pbWljLWxpbmsiIG5hbWU9ImVzIiB0eXBlPSJzdWJtaXQiPkVzcGHDsW9sPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J3V3R2FCa1hMdjdNZksyZ2lScklnYTlrWlBES1ZEZG1VJyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0iZnIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0iZnIiIHR5cGU9InN1Ym1pdCI+RnJhbsOnYWlzPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J3V3R2FCa1hMdjdNZksyZ2lScklnYTlrWlBES1ZEZG1VJyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0iaXQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0iaXQiIHR5cGU9InN1Ym1pdCI+SXRhbGlhbm88L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb290ZXItbGFuZ3VhZ2UtZm9ybSIgYWN0aW9uPSIvaTE4bi9zZXRsYW5nLyIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdjc3JmbWlkZGxld2FyZXRva2VuJyB2YWx1ZT0ndXdHYUJrWEx2N01mSzJnaVJySWdhOWtaUERLVkRkbVUnIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibGFuZ3VhZ2UiIHZhbHVlPSJqYSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtaW1pYy1saW5rIiBuYW1lPSJqYSIgdHlwZT0ic3VibWl0Ij7ml6XmnKzoqp48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb290ZXItbGFuZ3VhZ2UtZm9ybSIgYWN0aW9uPSIvaTE4bi9zZXRsYW5nLyIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdjc3JmbWlkZGxld2FyZXRva2VuJyB2YWx1ZT0ndXdHYUJrWEx2N01mSzJnaVJySWdhOWtaUERLVkRkbVUnIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibGFuZ3VhZ2UiIHZhbHVlPSJwbCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtaW1pYy1saW5rIiBuYW1lPSJwbCIgdHlwZT0ic3VibWl0Ij5Qb2xza2k8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb290ZXItbGFuZ3VhZ2UtZm9ybSIgYWN0aW9uPSIvaTE4bi9zZXRsYW5nLyIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdjc3JmbWlkZGxld2FyZXRva2VuJyB2YWx1ZT0ndXdHYUJrWEx2N01mSzJnaVJySWdhOWtaUERLVkRkbVUnIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibGFuZ3VhZ2UiIHZhbHVlPSJwdCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtaW1pYy1saW5rIiBuYW1lPSJwdCIgdHlwZT0ic3VibWl0Ij5Qb3J0dWd1w6pzPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J3V3R2FCa1hMdjdNZksyZ2lScklnYTlrWlBES1ZEZG1VJyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0icnUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0icnUiIHR5cGU9InN1Ym1pdCI+0KDRg9GB0YHQutC40Lk8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb290ZXItbGFuZ3VhZ2UtZm9ybSIgYWN0aW9uPSIvaTE4bi9zZXRsYW5nLyIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdjc3JmbWlkZGxld2FyZXRva2VuJyB2YWx1ZT0ndXdHYUJrWEx2N01mSzJnaVJySWdhOWtaUERLVkRkbVUnIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibGFuZ3VhZ2UiIHZhbHVlPSJzdiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtaW1pYy1saW5rIiBuYW1lPSJzdiIgdHlwZT0ic3VibWl0Ij5TdmVuc2thPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyLWxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9vdGVyLWxhbmd1YWdlLWZvcm0iIGFjdGlvbj0iL2kxOG4vc2V0bGFuZy8iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nY3NyZm1pZGRsZXdhcmV0b2tlbicgdmFsdWU9J3V3R2FCa1hMdjdNZksyZ2lScklnYTlrWlBES1ZEZG1VJyAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Imxhbmd1YWdlIiB2YWx1ZT0idHIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibWltaWMtbGluayIgbmFtZT0idHIiIHR5cGU9InN1Ym1pdCI+VMO8cmvDp2U8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXItbGFuZ3VhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb290ZXItbGFuZ3VhZ2UtZm9ybSIgYWN0aW9uPSIvaTE4bi9zZXRsYW5nLyIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdjc3JmbWlkZGxld2FyZXRva2VuJyB2YWx1ZT0ndXdHYUJrWEx2N01mSzJnaVJySWdhOWtaUERLVkRkbVUnIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibGFuZ3VhZ2UiIHZhbHVlPSJ6aCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtaW1pYy1saW5rIiBuYW1lPSJ6aCIgdHlwZT0ic3VibWl0Ij7nroDkvZPkuK3mloc8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImZvb3Rlci10aW1lem9uZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaW1lIHpvbmU6IDxzdHJvbmc+UGFjaWZpYy9Ob3VtZWE8L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItbGVnYWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyLWxlZ2FsLWl0ZW0iPjxhIHJlbD0ibm9mb2xsb3ciIGhyZWY9Imh0dHA6Ly93d3cuY2JzaW50ZXJhY3RpdmUuY29tLyI+Q0JTIEludGVyYWN0aXZlPC9hPiDCqSAyMDE5IDxzcGFuIGl0ZW1wcm9wPSJuYW1lIj5MYXN0LmZtPC9zcGFuPiBMdGQuIEFsbCByaWdodHMgcmVzZXJ2ZWQ8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyLWxlZ2FsLWl0ZW0iPjxhIGhyZWY9Ii9sZWdhbC90ZXJtcyI+VGVybXMgb2YgVXNlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXItbGVnYWwtaXRlbSI+PGEgaHJlZj0iL2xlZ2FsL3ByaXZhY3kiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXItbGVnYWwtaXRlbSI+PGEgaHJlZj0iL2xlZ2FsIj5MZWdhbCBQb2xpY2llczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyLWxlZ2FsLWl0ZW0iPjxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwOi8vd3d3LmNic2ludGVyYWN0aXZlLmNvbS9jYXJlZXJzIj5Kb2JzIGF0IENCU2k8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlci1sZWdhbC1pdGVtIj48YSByZWw9Im5vZm9sbG93IiBocmVmPSJodHRwOi8vd3d3Lmxhc3QuZm0iPkxhc3QuZm0gTXVzaWM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2dvIGNvbC14cy0xMiBjb2wtc20tMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkF1ZGlvc2Nyb2JibGVyPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3N0YXRpYy9pbWFnZXMvZm9vdGVyX2xvZ29AMnguNDljYTUxOTQ4YjBhLnBuZyIgd2lkdGg9IjM3IiBoZWlnaHQ9IjIwIiBhbHQ9Ikxhc3QuZm0gJ2FzJyBsb2dvIj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZmVlZGJhY2stbWVzc2FnZSI+CiAgICA8ZGl2IGNsYXNzPSJmZWVkYmFjay1tZXNzYWdlLWlubmVyIj4KICAgICAgICA8cD4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhpZGRlbi14cyI+CiAgICAgICAgICAgICAgICBMZXQgdXMga25vdyB3aGF0IHlvdSB0aGluayBvZiB0aGUgTGFzdC5mbSB3ZWJzaXRlLgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly9jYnNpLmZvcmNlLmNvbS9DQlNpL3RlbXBsYXRlX2xmbWZiaz9wX3VzZXJpZD0iIHRhcmdldD0iX2JsYW5rIj5MZWF2ZSBmZWVkYmFjazwvYT4KICAgICAgICA8L3A+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8L2Zvb3Rlcj4KCgogICAgPHNlY3Rpb24gY2xhc3M9ImRlYnVnLWxvZyI+CiAgICA8aDIgY2xhc3M9ImRlYnVnLWxvZy1oZWFkaW5nIj5BUEkgQ2FsbHM8L2gyPgogICAgCjwvc2VjdGlvbj4KCgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCiAgICAgICAgPGRpdgogICAgICAgICAgICBkYXRhLWFkcy1iZWFjb24KICAgICAgICAgICAgZGF0YS1hZHMtdGFyZ2V0aW5nPSd7JiMzNDtnZW8mIzM0OzogJiMzNDtOQyYjMzQ7LCAmIzM0O2xhbmcmIzM0OzogJiMzNDtlbiYjMzQ7LCAmIzM0O2JldGEmIzM0OzogJiMzNDt5ZXMmIzM0OywgJiMzNDtwdHlwZSYjMzQ7OiAmIzM0O3VzZXJfbGlicmFyeV90cmFja3MmIzM0OywgJiMzNDthciYjMzQ7OiAmIzM0OyYjMzQ7fScKICAgICAgICAgICAgZGF0YS1hZHMtdW5pdG5hbWU9Jy84MjY0L3Jvdy1sYXN0Zm0vdXNlci9saWJyYXJ5L3RyYWNrcycKICAgICAgICAgICAgZGF0YS1hZHMtdW5pdG5hbWUtbW9iaWxlPScvODI2NC9tYXctbGFzdGZtL3VzZXIvbGlicmFyeS90cmFja3MnCiAgICAgICAgPjwvZGl2PgogICAgCgogICAgPC9kaXY+CgogICAgCiAgICAgICAgPGRpdgogICAgICAgICAgICBkYXRhLXJlcXVpcmU9InBsYXllci9wcm92aWRlcnMvc3BvdGlmeS9zcG90aWZ5LXByb3ZpZGVyIgogICAgICAgICAgICBkYXRhLXNwb3RpZnktYXV0aC1tb2RhbD0iL3BsYXllci9tb2RhbC9zcG90aWZ5IgogICAgICAgICAgICBkYXRhLXNwb3RpZnktcHJlbWl1bS1tb2RhbD0iL3BsYXllci9tb2RhbC9zcG90aWZ5LXByZW1pdW0iCiAgICAgICAgICAgIGRhdGEtc3BvdGlmeS1pbmFjdGl2ZS1tb2RhbD0iL3BsYXllci9tb2RhbC9zcG90aWZ5LWluYWN0aXZlIgogICAgICAgICAgICBkYXRhLXNwb3RpZnktaW5pdGlhbC1kZXZpY2UtbW9kYWw9Ii9wbGF5ZXIvbW9kYWwvc3BvdGlmeS1pbml0aWFsLWRldmljZS1kZXRlY3Rpb24iCiAgICAgICAgPjwvZGl2PgoKICAgICAgICA8ZGl2CiAgICAgICAgICAgIGRhdGEtcmVxdWlyZT0icGxheWVyL3Byb3ZpZGVycy95b3V0dWJlL3lvdXR1YmUtcHJvdmlkZXIiCiAgICAgICAgICAgIGNsYXNzPSJ2aWRlby1wbGF5ZXIiCiAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICBpZD0ieW91dHViZS12aWRlbyIKICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InZpZGVvLXBsYXllci1pbm5lci13cmFwIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InZpZGVvLXBsYXllci1lbWJlZCBqcy1wbGF5ZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgdmlkZW8tcGxheWVyLWNsb3NlCiAgICAgICAgICAgICAgICAgICAganMtY2xvc2UtcGxheWVyCiAgICAgICAgICAgICAgICAiPkNsb3NlPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgCgogICAgCiAgICAgICAgCiAgICAKCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBpZD0iaW50cm9tZXJjaWFsIiBkYXRhLWFkPSJpbnRyb21lcmNpYWwiIGNsYXNzPSJpbnRyb21lcmNpYWwgbGFzdGZtLWFkIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7aW50cm9tZXJjaWFsJiMzNDssICYjMzQ7b3V0X29mX3BhZ2UmIzM0OzogdHJ1ZX0nPjwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgCgogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJtb2JpbGVfaW50cm9tZXJjaWFsIiBkYXRhLWFkPSJtb2JpbGVfaW50cm9tZXJjaWFsIiBjbGFzcz0ibW9iaWxlX2ludHJvbWVyY2lhbCBsYXN0Zm0tYWQtbW9iaWxlIiBkYXRhLWFkcy1wbGFjZW1lbnQ9J3smIzM0O2lkJiMzNDs6ICYjMzQ7bW9iaWxlX2ludHJvbWVyY2lhbCYjMzQ7LCAmIzM0O2lzX21vYmlsZSYjMzQ7OiB0cnVlLCAmIzM0O291dF9vZl9wYWdlJiMzNDs6IHRydWV9Jz48L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgIAoKICAgICAgICAKCiAgICAgICAgPHNjcmlwdCBjbGFzcz0ianMtbW9kYWwtdGVtcGxhdGUiIHR5cGU9InRleHQvdGVtcGxhdGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciIHJvbGU9ImRpYWxvZyIgYXJpYS1sYWJlbGxlZGJ5PSJtb2RhbC1sYWJlbCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtb2RhbC1kaXNtaXNzIGpzLWNsb3NlIj5DbG9zZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxoMgogICAgICAgICAgICAgICAgICAgICAgICBpZD0ibW9kYWwtbGFiZWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtb2RhbC10aXRsZSBqcy1tb2RhbC10aXRsZSIKICAgICAgICAgICAgICAgICAgICA+PC9oMj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IGpzLW1vZGFsLWJvZHkiPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvc2NyaXB0PgoKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPHNjcmlwdCBjbGFzcz0ianMtYWRibG9jay1tZXNzYWdlLXRlbXBsYXRlIiB0eXBlPSJ0ZXh0L3RlbXBsYXRlIj4KICAgICAgICAgICAgICAgIAogICAgCiAgICA8ZGl2PjxkaXY+CiAgICAgICAgPHNlY3Rpb24gY2xhc3M9IgogICAgICAgICAgICBhZGJsb2NrLW1lc3NhZ2UKICAgICAgICAgICAgYWRibG9jay1tZXNzYWdlLS1hZGZyZWUKICAgICAgICAgICAgbGluay1ibG9jawogICAgICAgICAgICBqcy1saW5rLWJsb2NrCiAgICAgICAgIj4KICAgICAgICAgICAgPHAgY2xhc3M9ImFkYmxvY2stbWVzc2FnZS1ib2R5Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+QnJvd3NlIGFkLWZyZWU8L3N0cm9uZz4gd2l0aCBhIHByZW1pdW0gTGFzdC5mbSBhY2NvdW50CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSJhZGJsb2NrLW1lc3NhZ2UtYnV0dG9uIGxpbmstYmxvY2stdGFyZ2V0IgogICAgICAgICAgICAgICAgaHJlZj0iL3N1YnNjcmliZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3Vic2NyaWJlQ2xpY2siCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQWRibG9ja01lc3NhZ2VBZGZyZWUiCiAgICAgICAgICAgID5GaW5kIG91dCBtb3JlPC9hPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgaHJlZj0iL3N1YnNjcmliZSIKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBqcy1saW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICAgICBsaW5rLWJsb2NrLWNvdmVyLWxpbmsKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJTdWJzY3JpYmVDbGljayIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBZGJsb2NrTWVzc2FnZUFkZnJlZSIKICAgICAgICAgICAgPjwvYT4KICAgICAgICA8L3NlY3Rpb24+CiAgICA8L2Rpdj48L2Rpdj4KCiAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICA8c2NyaXB0IGNsYXNzPSJqcy1hZGJsb2NrLW1lc3NhZ2UtdGVtcGxhdGUiIHR5cGU9InRleHQvdGVtcGxhdGUiPgogICAgICAgICAgICAgICAgCiAgICAKICAgIDxkaXY+PGRpdj4KICAgICAgICA8c2VjdGlvbiBjbGFzcz0iCiAgICAgICAgICAgIGFkYmxvY2stbWVzc2FnZQogICAgICAgICAgICBhZGJsb2NrLW1lc3NhZ2UtLXN1cHBvcnQKICAgICAgICAgICAgbGluay1ibG9jawogICAgICAgICAgICBqcy1saW5rLWJsb2NrCiAgICAgICAgIj4KICAgICAgICAgICAgPHAgY2xhc3M9ImFkYmxvY2stbWVzc2FnZS1ib2R5Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+U2hvdyB5b3VyIHN1cHBvcnQ8L3N0cm9uZz4gd2l0aCBhIHByZW1pdW0gTGFzdC5mbSBhY2NvdW50CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAKICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSJhZGJsb2NrLW1lc3NhZ2UtYnV0dG9uIGxpbmstYmxvY2stdGFyZ2V0IgogICAgICAgICAgICAgICAgaHJlZj0iL3N1YnNjcmliZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3Vic2NyaWJlQ2xpY2siCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQWRibG9ja01lc3NhZ2VTdXBwb3J0IgogICAgICAgICAgICA+RmluZCBvdXQgbW9yZTwvYT4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGhyZWY9Ii9zdWJzY3JpYmUiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAganMtbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAgICAgbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3Vic2NyaWJlQ2xpY2siCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQWRibG9ja01lc3NhZ2VTdXBwb3J0IgogICAgICAgICAgICA+PC9hPgogICAgICAgIDwvc2VjdGlvbj4KICAgIDwvZGl2PjwvZGl2PgoKICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgIDxzY3JpcHQgY2xhc3M9ImpzLWFkYmxvY2stbWVzc2FnZS10ZW1wbGF0ZSIgdHlwZT0idGV4dC90ZW1wbGF0ZSI+CiAgICAgICAgICAgICAgICAKICAgIAogICAgPGRpdj48ZGl2PgogICAgICAgIDxzZWN0aW9uIGNsYXNzPSIKICAgICAgICAgICAgYWRibG9jay1tZXNzYWdlCiAgICAgICAgICAgIGFkYmxvY2stbWVzc2FnZS0tYmVuZWZpdHMKICAgICAgICAgICAgbGluay1ibG9jawogICAgICAgICAgICBqcy1saW5rLWJsb2NrCiAgICAgICAgIj4KICAgICAgICAgICAgPHAgY2xhc3M9ImFkYmxvY2stbWVzc2FnZS1ib2R5Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+R2V0IGV4Y2x1c2l2ZSBiZW5lZml0czwvc3Ryb25nPiB3aXRoIGEgcHJlbWl1bSBMYXN0LmZtIGFjY291bnQKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIAogICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9ImFkYmxvY2stbWVzc2FnZS1idXR0b24gbGluay1ibG9jay10YXJnZXQiCiAgICAgICAgICAgICAgICBocmVmPSIvc3Vic2NyaWJlIgogICAgICAgICAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJTdWJzY3JpYmVDbGljayIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJBZGJsb2NrTWVzc2FnZUJlbmVmaXRzIgogICAgICAgICAgICA+RmluZCBvdXQgbW9yZTwvYT4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGhyZWY9Ii9zdWJzY3JpYmUiCiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAganMtbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAgICAgbGluay1ibG9jay1jb3Zlci1saW5rCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iU3Vic2NyaWJlQ2xpY2siCiAgICAgICAgICAgICAgICBkYXRhLWFuYWx5dGljcy1sYWJlbD0iQWRibG9ja01lc3NhZ2VCZW5lZml0cyIKICAgICAgICAgICAgPjwvYT4KICAgICAgICA8L3NlY3Rpb24+CiAgICA8L2Rpdj48L2Rpdj4KCiAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgIAoKICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICB3aW5kb3cubGZtRG9tUmVhZHlDYWxsYmFjayAmJiB3aW5kb3cubGZtRG9tUmVhZHlDYWxsYmFjaygpOwogICAgICAgICAgICB3aW5kb3cubGZtRG9tUmVhZHkgPSB0cnVlOwogICAgICAgIDwvc2NyaXB0PgogICAgICAgIAogICAgICAgICAgICA8bGluayBocmVmPSIvc3RhdGljL3N0eWxlcy9idWlsZC9iN2Q2ZmZlZDcwLmI3ZDZmZmVkNzAxNi5jc3MiIHJlbD0icHJlbG9hZCIgYXM9InN0eWxlIiBjaGFyc2V0PSJ1dGYtOCIgZGF0YS1yZXF1aXJlPSJzaGltL3JlbC1wcmVsb2FkIj4KICAgICAgICAKICAgIDwvYm9keT4KPC9odG1sPg==
    http_version: 
  recorded_at: Fri, 12 Jul 2019 08:28:06 GMT
recorded_with: VCR 5.0.0
